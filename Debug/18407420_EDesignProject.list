
18407420_EDesignProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f00  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  080070c4  080070c4  000170c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007514  08007514  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007514  08007514  00017514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800751c  0800751c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800751c  0800751c  0001751c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007520  08007520  00017520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007524  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000211c  20000010  08007534  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000212c  08007534  0002212c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011694  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000262f  00000000  00000000  000316d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001108  00000000  00000000  00033d08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fd0  00000000  00000000  00034e10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000231aa  00000000  00000000  00035de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d12b  00000000  00000000  00058f8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d737c  00000000  00000000  000660b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013d431  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a4c  00000000  00000000  0013d4ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080070ac 	.word	0x080070ac

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	080070ac 	.word	0x080070ac

08000204 <__aeabi_drsub>:
 8000204:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000208:	e002      	b.n	8000210 <__adddf3>
 800020a:	bf00      	nop

0800020c <__aeabi_dsub>:
 800020c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000210 <__adddf3>:
 8000210:	b530      	push	{r4, r5, lr}
 8000212:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000216:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021a:	ea94 0f05 	teq	r4, r5
 800021e:	bf08      	it	eq
 8000220:	ea90 0f02 	teqeq	r0, r2
 8000224:	bf1f      	itttt	ne
 8000226:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000232:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000236:	f000 80e2 	beq.w	80003fe <__adddf3+0x1ee>
 800023a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000242:	bfb8      	it	lt
 8000244:	426d      	neglt	r5, r5
 8000246:	dd0c      	ble.n	8000262 <__adddf3+0x52>
 8000248:	442c      	add	r4, r5
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	ea82 0000 	eor.w	r0, r2, r0
 8000256:	ea83 0101 	eor.w	r1, r3, r1
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	2d36      	cmp	r5, #54	; 0x36
 8000264:	bf88      	it	hi
 8000266:	bd30      	pophi	{r4, r5, pc}
 8000268:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800026c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000270:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000274:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x70>
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000284:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000288:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x84>
 800028e:	4252      	negs	r2, r2
 8000290:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000294:	ea94 0f05 	teq	r4, r5
 8000298:	f000 80a7 	beq.w	80003ea <__adddf3+0x1da>
 800029c:	f1a4 0401 	sub.w	r4, r4, #1
 80002a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a4:	db0d      	blt.n	80002c2 <__adddf3+0xb2>
 80002a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002aa:	fa22 f205 	lsr.w	r2, r2, r5
 80002ae:	1880      	adds	r0, r0, r2
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b8:	1880      	adds	r0, r0, r2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	4159      	adcs	r1, r3
 80002c0:	e00e      	b.n	80002e0 <__adddf3+0xd0>
 80002c2:	f1a5 0520 	sub.w	r5, r5, #32
 80002c6:	f10e 0e20 	add.w	lr, lr, #32
 80002ca:	2a01      	cmp	r2, #1
 80002cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d0:	bf28      	it	cs
 80002d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	18c0      	adds	r0, r0, r3
 80002dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e4:	d507      	bpl.n	80002f6 <__adddf3+0xe6>
 80002e6:	f04f 0e00 	mov.w	lr, #0
 80002ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fa:	d31b      	bcc.n	8000334 <__adddf3+0x124>
 80002fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000300:	d30c      	bcc.n	800031c <__adddf3+0x10c>
 8000302:	0849      	lsrs	r1, r1, #1
 8000304:	ea5f 0030 	movs.w	r0, r0, rrx
 8000308:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800030c:	f104 0401 	add.w	r4, r4, #1
 8000310:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000314:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000318:	f080 809a 	bcs.w	8000450 <__adddf3+0x240>
 800031c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000320:	bf08      	it	eq
 8000322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000326:	f150 0000 	adcs.w	r0, r0, #0
 800032a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032e:	ea41 0105 	orr.w	r1, r1, r5
 8000332:	bd30      	pop	{r4, r5, pc}
 8000334:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000338:	4140      	adcs	r0, r0
 800033a:	eb41 0101 	adc.w	r1, r1, r1
 800033e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000342:	f1a4 0401 	sub.w	r4, r4, #1
 8000346:	d1e9      	bne.n	800031c <__adddf3+0x10c>
 8000348:	f091 0f00 	teq	r1, #0
 800034c:	bf04      	itt	eq
 800034e:	4601      	moveq	r1, r0
 8000350:	2000      	moveq	r0, #0
 8000352:	fab1 f381 	clz	r3, r1
 8000356:	bf08      	it	eq
 8000358:	3320      	addeq	r3, #32
 800035a:	f1a3 030b 	sub.w	r3, r3, #11
 800035e:	f1b3 0220 	subs.w	r2, r3, #32
 8000362:	da0c      	bge.n	800037e <__adddf3+0x16e>
 8000364:	320c      	adds	r2, #12
 8000366:	dd08      	ble.n	800037a <__adddf3+0x16a>
 8000368:	f102 0c14 	add.w	ip, r2, #20
 800036c:	f1c2 020c 	rsb	r2, r2, #12
 8000370:	fa01 f00c 	lsl.w	r0, r1, ip
 8000374:	fa21 f102 	lsr.w	r1, r1, r2
 8000378:	e00c      	b.n	8000394 <__adddf3+0x184>
 800037a:	f102 0214 	add.w	r2, r2, #20
 800037e:	bfd8      	it	le
 8000380:	f1c2 0c20 	rsble	ip, r2, #32
 8000384:	fa01 f102 	lsl.w	r1, r1, r2
 8000388:	fa20 fc0c 	lsr.w	ip, r0, ip
 800038c:	bfdc      	itt	le
 800038e:	ea41 010c 	orrle.w	r1, r1, ip
 8000392:	4090      	lslle	r0, r2
 8000394:	1ae4      	subs	r4, r4, r3
 8000396:	bfa2      	ittt	ge
 8000398:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800039c:	4329      	orrge	r1, r5
 800039e:	bd30      	popge	{r4, r5, pc}
 80003a0:	ea6f 0404 	mvn.w	r4, r4
 80003a4:	3c1f      	subs	r4, #31
 80003a6:	da1c      	bge.n	80003e2 <__adddf3+0x1d2>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc0e      	bgt.n	80003ca <__adddf3+0x1ba>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0220 	rsb	r2, r4, #32
 80003b4:	fa20 f004 	lsr.w	r0, r0, r4
 80003b8:	fa01 f302 	lsl.w	r3, r1, r2
 80003bc:	ea40 0003 	orr.w	r0, r0, r3
 80003c0:	fa21 f304 	lsr.w	r3, r1, r4
 80003c4:	ea45 0103 	orr.w	r1, r5, r3
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f1c4 040c 	rsb	r4, r4, #12
 80003ce:	f1c4 0220 	rsb	r2, r4, #32
 80003d2:	fa20 f002 	lsr.w	r0, r0, r2
 80003d6:	fa01 f304 	lsl.w	r3, r1, r4
 80003da:	ea40 0003 	orr.w	r0, r0, r3
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	fa21 f004 	lsr.w	r0, r1, r4
 80003e6:	4629      	mov	r1, r5
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f094 0f00 	teq	r4, #0
 80003ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f2:	bf06      	itte	eq
 80003f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f8:	3401      	addeq	r4, #1
 80003fa:	3d01      	subne	r5, #1
 80003fc:	e74e      	b.n	800029c <__adddf3+0x8c>
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf18      	it	ne
 8000404:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000408:	d029      	beq.n	800045e <__adddf3+0x24e>
 800040a:	ea94 0f05 	teq	r4, r5
 800040e:	bf08      	it	eq
 8000410:	ea90 0f02 	teqeq	r0, r2
 8000414:	d005      	beq.n	8000422 <__adddf3+0x212>
 8000416:	ea54 0c00 	orrs.w	ip, r4, r0
 800041a:	bf04      	itt	eq
 800041c:	4619      	moveq	r1, r3
 800041e:	4610      	moveq	r0, r2
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea91 0f03 	teq	r1, r3
 8000426:	bf1e      	ittt	ne
 8000428:	2100      	movne	r1, #0
 800042a:	2000      	movne	r0, #0
 800042c:	bd30      	popne	{r4, r5, pc}
 800042e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000432:	d105      	bne.n	8000440 <__adddf3+0x230>
 8000434:	0040      	lsls	r0, r0, #1
 8000436:	4149      	adcs	r1, r1
 8000438:	bf28      	it	cs
 800043a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000444:	bf3c      	itt	cc
 8000446:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044a:	bd30      	popcc	{r4, r5, pc}
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000454:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000458:	f04f 0000 	mov.w	r0, #0
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf1a      	itte	ne
 8000464:	4619      	movne	r1, r3
 8000466:	4610      	movne	r0, r2
 8000468:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800046c:	bf1c      	itt	ne
 800046e:	460b      	movne	r3, r1
 8000470:	4602      	movne	r2, r0
 8000472:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000476:	bf06      	itte	eq
 8000478:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800047c:	ea91 0f03 	teqeq	r1, r3
 8000480:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	bf00      	nop

08000488 <__aeabi_ui2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049c:	f04f 0500 	mov.w	r5, #0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e750      	b.n	8000348 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_i2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c0:	bf48      	it	mi
 80004c2:	4240      	negmi	r0, r0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e73e      	b.n	8000348 <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_f2d>:
 80004cc:	0042      	lsls	r2, r0, #1
 80004ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004da:	bf1f      	itttt	ne
 80004dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e8:	4770      	bxne	lr
 80004ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ee:	bf08      	it	eq
 80004f0:	4770      	bxeq	lr
 80004f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f6:	bf04      	itt	eq
 80004f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000508:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800050c:	e71c      	b.n	8000348 <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_ul2d>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	e00a      	b.n	8000536 <__aeabi_l2d+0x16>

08000520 <__aeabi_l2d>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052e:	d502      	bpl.n	8000536 <__aeabi_l2d+0x16>
 8000530:	4240      	negs	r0, r0
 8000532:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000536:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000542:	f43f aed8 	beq.w	80002f6 <__adddf3+0xe6>
 8000546:	f04f 0203 	mov.w	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000556:	bf18      	it	ne
 8000558:	3203      	addne	r2, #3
 800055a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055e:	f1c2 0320 	rsb	r3, r2, #32
 8000562:	fa00 fc03 	lsl.w	ip, r0, r3
 8000566:	fa20 f002 	lsr.w	r0, r0, r2
 800056a:	fa01 fe03 	lsl.w	lr, r1, r3
 800056e:	ea40 000e 	orr.w	r0, r0, lr
 8000572:	fa21 f102 	lsr.w	r1, r1, r2
 8000576:	4414      	add	r4, r2
 8000578:	e6bd      	b.n	80002f6 <__adddf3+0xe6>
 800057a:	bf00      	nop

0800057c <__aeabi_dmul>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000582:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000586:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058a:	bf1d      	ittte	ne
 800058c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000590:	ea94 0f0c 	teqne	r4, ip
 8000594:	ea95 0f0c 	teqne	r5, ip
 8000598:	f000 f8de 	bleq	8000758 <__aeabi_dmul+0x1dc>
 800059c:	442c      	add	r4, r5
 800059e:	ea81 0603 	eor.w	r6, r1, r3
 80005a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ae:	bf18      	it	ne
 80005b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005bc:	d038      	beq.n	8000630 <__aeabi_dmul+0xb4>
 80005be:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c2:	f04f 0500 	mov.w	r5, #0
 80005c6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ce:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d2:	f04f 0600 	mov.w	r6, #0
 80005d6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005da:	f09c 0f00 	teq	ip, #0
 80005de:	bf18      	it	ne
 80005e0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005ec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f0:	d204      	bcs.n	80005fc <__aeabi_dmul+0x80>
 80005f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f6:	416d      	adcs	r5, r5
 80005f8:	eb46 0606 	adc.w	r6, r6, r6
 80005fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000600:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000604:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000608:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800060c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000610:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000614:	bf88      	it	hi
 8000616:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061a:	d81e      	bhi.n	800065a <__aeabi_dmul+0xde>
 800061c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	bd70      	pop	{r4, r5, r6, pc}
 8000630:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000634:	ea46 0101 	orr.w	r1, r6, r1
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	ea81 0103 	eor.w	r1, r1, r3
 8000640:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000644:	bfc2      	ittt	gt
 8000646:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064e:	bd70      	popgt	{r4, r5, r6, pc}
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f04f 0e00 	mov.w	lr, #0
 8000658:	3c01      	subs	r4, #1
 800065a:	f300 80ab 	bgt.w	80007b4 <__aeabi_dmul+0x238>
 800065e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000662:	bfde      	ittt	le
 8000664:	2000      	movle	r0, #0
 8000666:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066a:	bd70      	pople	{r4, r5, r6, pc}
 800066c:	f1c4 0400 	rsb	r4, r4, #0
 8000670:	3c20      	subs	r4, #32
 8000672:	da35      	bge.n	80006e0 <__aeabi_dmul+0x164>
 8000674:	340c      	adds	r4, #12
 8000676:	dc1b      	bgt.n	80006b0 <__aeabi_dmul+0x134>
 8000678:	f104 0414 	add.w	r4, r4, #20
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f305 	lsl.w	r3, r0, r5
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f205 	lsl.w	r2, r1, r5
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	fa21 f604 	lsr.w	r6, r1, r4
 80006a0:	eb42 0106 	adc.w	r1, r2, r6
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 040c 	rsb	r4, r4, #12
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f304 	lsl.w	r3, r0, r4
 80006bc:	fa20 f005 	lsr.w	r0, r0, r5
 80006c0:	fa01 f204 	lsl.w	r2, r1, r4
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	f141 0100 	adc.w	r1, r1, #0
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f205 	lsl.w	r2, r0, r5
 80006e8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006ec:	fa20 f304 	lsr.w	r3, r0, r4
 80006f0:	fa01 f205 	lsl.w	r2, r1, r5
 80006f4:	ea43 0302 	orr.w	r3, r3, r2
 80006f8:	fa21 f004 	lsr.w	r0, r1, r4
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	fa21 f204 	lsr.w	r2, r1, r4
 8000704:	ea20 0002 	bic.w	r0, r0, r2
 8000708:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800070c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000710:	bf08      	it	eq
 8000712:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000716:	bd70      	pop	{r4, r5, r6, pc}
 8000718:	f094 0f00 	teq	r4, #0
 800071c:	d10f      	bne.n	800073e <__aeabi_dmul+0x1c2>
 800071e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000722:	0040      	lsls	r0, r0, #1
 8000724:	eb41 0101 	adc.w	r1, r1, r1
 8000728:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800072c:	bf08      	it	eq
 800072e:	3c01      	subeq	r4, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1a6>
 8000732:	ea41 0106 	orr.w	r1, r1, r6
 8000736:	f095 0f00 	teq	r5, #0
 800073a:	bf18      	it	ne
 800073c:	4770      	bxne	lr
 800073e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000742:	0052      	lsls	r2, r2, #1
 8000744:	eb43 0303 	adc.w	r3, r3, r3
 8000748:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800074c:	bf08      	it	eq
 800074e:	3d01      	subeq	r5, #1
 8000750:	d0f7      	beq.n	8000742 <__aeabi_dmul+0x1c6>
 8000752:	ea43 0306 	orr.w	r3, r3, r6
 8000756:	4770      	bx	lr
 8000758:	ea94 0f0c 	teq	r4, ip
 800075c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000760:	bf18      	it	ne
 8000762:	ea95 0f0c 	teqne	r5, ip
 8000766:	d00c      	beq.n	8000782 <__aeabi_dmul+0x206>
 8000768:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076c:	bf18      	it	ne
 800076e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000772:	d1d1      	bne.n	8000718 <__aeabi_dmul+0x19c>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000786:	bf06      	itte	eq
 8000788:	4610      	moveq	r0, r2
 800078a:	4619      	moveq	r1, r3
 800078c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000790:	d019      	beq.n	80007c6 <__aeabi_dmul+0x24a>
 8000792:	ea94 0f0c 	teq	r4, ip
 8000796:	d102      	bne.n	800079e <__aeabi_dmul+0x222>
 8000798:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800079c:	d113      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 800079e:	ea95 0f0c 	teq	r5, ip
 80007a2:	d105      	bne.n	80007b0 <__aeabi_dmul+0x234>
 80007a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a8:	bf1c      	itt	ne
 80007aa:	4610      	movne	r0, r2
 80007ac:	4619      	movne	r1, r3
 80007ae:	d10a      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ce:	bd70      	pop	{r4, r5, r6, pc}

080007d0 <__aeabi_ddiv>:
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007de:	bf1d      	ittte	ne
 80007e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e4:	ea94 0f0c 	teqne	r4, ip
 80007e8:	ea95 0f0c 	teqne	r5, ip
 80007ec:	f000 f8a7 	bleq	800093e <__aeabi_ddiv+0x16e>
 80007f0:	eba4 0405 	sub.w	r4, r4, r5
 80007f4:	ea81 0e03 	eor.w	lr, r1, r3
 80007f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000800:	f000 8088 	beq.w	8000914 <__aeabi_ddiv+0x144>
 8000804:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000808:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800080c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000810:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000814:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000818:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800081c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000820:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000824:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000828:	429d      	cmp	r5, r3
 800082a:	bf08      	it	eq
 800082c:	4296      	cmpeq	r6, r2
 800082e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000832:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000836:	d202      	bcs.n	800083e <__aeabi_ddiv+0x6e>
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	1ab6      	subs	r6, r6, r2
 8000840:	eb65 0503 	sbc.w	r5, r5, r3
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 000c 	orrcs.w	r0, r0, ip
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008ac:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b0:	d018      	beq.n	80008e4 <__aeabi_ddiv+0x114>
 80008b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ce:	d1c0      	bne.n	8000852 <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	d10b      	bne.n	80008ee <__aeabi_ddiv+0x11e>
 80008d6:	ea41 0100 	orr.w	r1, r1, r0
 80008da:	f04f 0000 	mov.w	r0, #0
 80008de:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e2:	e7b6      	b.n	8000852 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	bf04      	itt	eq
 80008ea:	4301      	orreq	r1, r0
 80008ec:	2000      	moveq	r0, #0
 80008ee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f2:	bf88      	it	hi
 80008f4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f8:	f63f aeaf 	bhi.w	800065a <__aeabi_dmul+0xde>
 80008fc:	ebb5 0c03 	subs.w	ip, r5, r3
 8000900:	bf04      	itt	eq
 8000902:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000906:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090a:	f150 0000 	adcs.w	r0, r0, #0
 800090e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000912:	bd70      	pop	{r4, r5, r6, pc}
 8000914:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000918:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800091c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000920:	bfc2      	ittt	gt
 8000922:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000926:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092a:	bd70      	popgt	{r4, r5, r6, pc}
 800092c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000930:	f04f 0e00 	mov.w	lr, #0
 8000934:	3c01      	subs	r4, #1
 8000936:	e690      	b.n	800065a <__aeabi_dmul+0xde>
 8000938:	ea45 0e06 	orr.w	lr, r5, r6
 800093c:	e68d      	b.n	800065a <__aeabi_dmul+0xde>
 800093e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000942:	ea94 0f0c 	teq	r4, ip
 8000946:	bf08      	it	eq
 8000948:	ea95 0f0c 	teqeq	r5, ip
 800094c:	f43f af3b 	beq.w	80007c6 <__aeabi_dmul+0x24a>
 8000950:	ea94 0f0c 	teq	r4, ip
 8000954:	d10a      	bne.n	800096c <__aeabi_ddiv+0x19c>
 8000956:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095a:	f47f af34 	bne.w	80007c6 <__aeabi_dmul+0x24a>
 800095e:	ea95 0f0c 	teq	r5, ip
 8000962:	f47f af25 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e72c      	b.n	80007c6 <__aeabi_dmul+0x24a>
 800096c:	ea95 0f0c 	teq	r5, ip
 8000970:	d106      	bne.n	8000980 <__aeabi_ddiv+0x1b0>
 8000972:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000976:	f43f aefd 	beq.w	8000774 <__aeabi_dmul+0x1f8>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e722      	b.n	80007c6 <__aeabi_dmul+0x24a>
 8000980:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000984:	bf18      	it	ne
 8000986:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098a:	f47f aec5 	bne.w	8000718 <__aeabi_dmul+0x19c>
 800098e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000992:	f47f af0d 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000996:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099a:	f47f aeeb 	bne.w	8000774 <__aeabi_dmul+0x1f8>
 800099e:	e712      	b.n	80007c6 <__aeabi_dmul+0x24a>

080009a0 <__aeabi_d2f>:
 80009a0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009a8:	bf24      	itt	cs
 80009aa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009b2:	d90d      	bls.n	80009d0 <__aeabi_d2f+0x30>
 80009b4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009b8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009bc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009c8:	bf08      	it	eq
 80009ca:	f020 0001 	biceq.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d4:	d121      	bne.n	8000a1a <__aeabi_d2f+0x7a>
 80009d6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009da:	bfbc      	itt	lt
 80009dc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009e0:	4770      	bxlt	lr
 80009e2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ea:	f1c2 0218 	rsb	r2, r2, #24
 80009ee:	f1c2 0c20 	rsb	ip, r2, #32
 80009f2:	fa10 f30c 	lsls.w	r3, r0, ip
 80009f6:	fa20 f002 	lsr.w	r0, r0, r2
 80009fa:	bf18      	it	ne
 80009fc:	f040 0001 	orrne.w	r0, r0, #1
 8000a00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a0c:	ea40 000c 	orr.w	r0, r0, ip
 8000a10:	fa23 f302 	lsr.w	r3, r3, r2
 8000a14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a18:	e7cc      	b.n	80009b4 <__aeabi_d2f+0x14>
 8000a1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a1e:	d107      	bne.n	8000a30 <__aeabi_d2f+0x90>
 8000a20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a24:	bf1e      	ittt	ne
 8000a26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a2e:	4770      	bxne	lr
 8000a30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_uldivmod>:
 8000a40:	b953      	cbnz	r3, 8000a58 <__aeabi_uldivmod+0x18>
 8000a42:	b94a      	cbnz	r2, 8000a58 <__aeabi_uldivmod+0x18>
 8000a44:	2900      	cmp	r1, #0
 8000a46:	bf08      	it	eq
 8000a48:	2800      	cmpeq	r0, #0
 8000a4a:	bf1c      	itt	ne
 8000a4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000a50:	f04f 30ff 	movne.w	r0, #4294967295
 8000a54:	f000 b972 	b.w	8000d3c <__aeabi_idiv0>
 8000a58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a60:	f000 f806 	bl	8000a70 <__udivmoddi4>
 8000a64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a6c:	b004      	add	sp, #16
 8000a6e:	4770      	bx	lr

08000a70 <__udivmoddi4>:
 8000a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a74:	9e08      	ldr	r6, [sp, #32]
 8000a76:	4604      	mov	r4, r0
 8000a78:	4688      	mov	r8, r1
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d14b      	bne.n	8000b16 <__udivmoddi4+0xa6>
 8000a7e:	428a      	cmp	r2, r1
 8000a80:	4615      	mov	r5, r2
 8000a82:	d967      	bls.n	8000b54 <__udivmoddi4+0xe4>
 8000a84:	fab2 f282 	clz	r2, r2
 8000a88:	b14a      	cbz	r2, 8000a9e <__udivmoddi4+0x2e>
 8000a8a:	f1c2 0720 	rsb	r7, r2, #32
 8000a8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a92:	fa20 f707 	lsr.w	r7, r0, r7
 8000a96:	4095      	lsls	r5, r2
 8000a98:	ea47 0803 	orr.w	r8, r7, r3
 8000a9c:	4094      	lsls	r4, r2
 8000a9e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000aa2:	0c23      	lsrs	r3, r4, #16
 8000aa4:	fbb8 f7fe 	udiv	r7, r8, lr
 8000aa8:	fa1f fc85 	uxth.w	ip, r5
 8000aac:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ab0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ab4:	fb07 f10c 	mul.w	r1, r7, ip
 8000ab8:	4299      	cmp	r1, r3
 8000aba:	d909      	bls.n	8000ad0 <__udivmoddi4+0x60>
 8000abc:	18eb      	adds	r3, r5, r3
 8000abe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ac2:	f080 811b 	bcs.w	8000cfc <__udivmoddi4+0x28c>
 8000ac6:	4299      	cmp	r1, r3
 8000ac8:	f240 8118 	bls.w	8000cfc <__udivmoddi4+0x28c>
 8000acc:	3f02      	subs	r7, #2
 8000ace:	442b      	add	r3, r5
 8000ad0:	1a5b      	subs	r3, r3, r1
 8000ad2:	b2a4      	uxth	r4, r4
 8000ad4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ad8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000adc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ae0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ae4:	45a4      	cmp	ip, r4
 8000ae6:	d909      	bls.n	8000afc <__udivmoddi4+0x8c>
 8000ae8:	192c      	adds	r4, r5, r4
 8000aea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000aee:	f080 8107 	bcs.w	8000d00 <__udivmoddi4+0x290>
 8000af2:	45a4      	cmp	ip, r4
 8000af4:	f240 8104 	bls.w	8000d00 <__udivmoddi4+0x290>
 8000af8:	3802      	subs	r0, #2
 8000afa:	442c      	add	r4, r5
 8000afc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b00:	eba4 040c 	sub.w	r4, r4, ip
 8000b04:	2700      	movs	r7, #0
 8000b06:	b11e      	cbz	r6, 8000b10 <__udivmoddi4+0xa0>
 8000b08:	40d4      	lsrs	r4, r2
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	e9c6 4300 	strd	r4, r3, [r6]
 8000b10:	4639      	mov	r1, r7
 8000b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b16:	428b      	cmp	r3, r1
 8000b18:	d909      	bls.n	8000b2e <__udivmoddi4+0xbe>
 8000b1a:	2e00      	cmp	r6, #0
 8000b1c:	f000 80eb 	beq.w	8000cf6 <__udivmoddi4+0x286>
 8000b20:	2700      	movs	r7, #0
 8000b22:	e9c6 0100 	strd	r0, r1, [r6]
 8000b26:	4638      	mov	r0, r7
 8000b28:	4639      	mov	r1, r7
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	fab3 f783 	clz	r7, r3
 8000b32:	2f00      	cmp	r7, #0
 8000b34:	d147      	bne.n	8000bc6 <__udivmoddi4+0x156>
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d302      	bcc.n	8000b40 <__udivmoddi4+0xd0>
 8000b3a:	4282      	cmp	r2, r0
 8000b3c:	f200 80fa 	bhi.w	8000d34 <__udivmoddi4+0x2c4>
 8000b40:	1a84      	subs	r4, r0, r2
 8000b42:	eb61 0303 	sbc.w	r3, r1, r3
 8000b46:	2001      	movs	r0, #1
 8000b48:	4698      	mov	r8, r3
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	d0e0      	beq.n	8000b10 <__udivmoddi4+0xa0>
 8000b4e:	e9c6 4800 	strd	r4, r8, [r6]
 8000b52:	e7dd      	b.n	8000b10 <__udivmoddi4+0xa0>
 8000b54:	b902      	cbnz	r2, 8000b58 <__udivmoddi4+0xe8>
 8000b56:	deff      	udf	#255	; 0xff
 8000b58:	fab2 f282 	clz	r2, r2
 8000b5c:	2a00      	cmp	r2, #0
 8000b5e:	f040 808f 	bne.w	8000c80 <__udivmoddi4+0x210>
 8000b62:	1b49      	subs	r1, r1, r5
 8000b64:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b68:	fa1f f885 	uxth.w	r8, r5
 8000b6c:	2701      	movs	r7, #1
 8000b6e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b72:	0c23      	lsrs	r3, r4, #16
 8000b74:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b7c:	fb08 f10c 	mul.w	r1, r8, ip
 8000b80:	4299      	cmp	r1, r3
 8000b82:	d907      	bls.n	8000b94 <__udivmoddi4+0x124>
 8000b84:	18eb      	adds	r3, r5, r3
 8000b86:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b8a:	d202      	bcs.n	8000b92 <__udivmoddi4+0x122>
 8000b8c:	4299      	cmp	r1, r3
 8000b8e:	f200 80cd 	bhi.w	8000d2c <__udivmoddi4+0x2bc>
 8000b92:	4684      	mov	ip, r0
 8000b94:	1a59      	subs	r1, r3, r1
 8000b96:	b2a3      	uxth	r3, r4
 8000b98:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b9c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ba0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ba4:	fb08 f800 	mul.w	r8, r8, r0
 8000ba8:	45a0      	cmp	r8, r4
 8000baa:	d907      	bls.n	8000bbc <__udivmoddi4+0x14c>
 8000bac:	192c      	adds	r4, r5, r4
 8000bae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb2:	d202      	bcs.n	8000bba <__udivmoddi4+0x14a>
 8000bb4:	45a0      	cmp	r8, r4
 8000bb6:	f200 80b6 	bhi.w	8000d26 <__udivmoddi4+0x2b6>
 8000bba:	4618      	mov	r0, r3
 8000bbc:	eba4 0408 	sub.w	r4, r4, r8
 8000bc0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bc4:	e79f      	b.n	8000b06 <__udivmoddi4+0x96>
 8000bc6:	f1c7 0c20 	rsb	ip, r7, #32
 8000bca:	40bb      	lsls	r3, r7
 8000bcc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bd0:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bd4:	fa01 f407 	lsl.w	r4, r1, r7
 8000bd8:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bdc:	fa21 f30c 	lsr.w	r3, r1, ip
 8000be0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000be4:	4325      	orrs	r5, r4
 8000be6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bea:	0c2c      	lsrs	r4, r5, #16
 8000bec:	fb08 3319 	mls	r3, r8, r9, r3
 8000bf0:	fa1f fa8e 	uxth.w	sl, lr
 8000bf4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bf8:	fb09 f40a 	mul.w	r4, r9, sl
 8000bfc:	429c      	cmp	r4, r3
 8000bfe:	fa02 f207 	lsl.w	r2, r2, r7
 8000c02:	fa00 f107 	lsl.w	r1, r0, r7
 8000c06:	d90b      	bls.n	8000c20 <__udivmoddi4+0x1b0>
 8000c08:	eb1e 0303 	adds.w	r3, lr, r3
 8000c0c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c10:	f080 8087 	bcs.w	8000d22 <__udivmoddi4+0x2b2>
 8000c14:	429c      	cmp	r4, r3
 8000c16:	f240 8084 	bls.w	8000d22 <__udivmoddi4+0x2b2>
 8000c1a:	f1a9 0902 	sub.w	r9, r9, #2
 8000c1e:	4473      	add	r3, lr
 8000c20:	1b1b      	subs	r3, r3, r4
 8000c22:	b2ad      	uxth	r5, r5
 8000c24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c28:	fb08 3310 	mls	r3, r8, r0, r3
 8000c2c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c30:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c34:	45a2      	cmp	sl, r4
 8000c36:	d908      	bls.n	8000c4a <__udivmoddi4+0x1da>
 8000c38:	eb1e 0404 	adds.w	r4, lr, r4
 8000c3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c40:	d26b      	bcs.n	8000d1a <__udivmoddi4+0x2aa>
 8000c42:	45a2      	cmp	sl, r4
 8000c44:	d969      	bls.n	8000d1a <__udivmoddi4+0x2aa>
 8000c46:	3802      	subs	r0, #2
 8000c48:	4474      	add	r4, lr
 8000c4a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c4e:	fba0 8902 	umull	r8, r9, r0, r2
 8000c52:	eba4 040a 	sub.w	r4, r4, sl
 8000c56:	454c      	cmp	r4, r9
 8000c58:	46c2      	mov	sl, r8
 8000c5a:	464b      	mov	r3, r9
 8000c5c:	d354      	bcc.n	8000d08 <__udivmoddi4+0x298>
 8000c5e:	d051      	beq.n	8000d04 <__udivmoddi4+0x294>
 8000c60:	2e00      	cmp	r6, #0
 8000c62:	d069      	beq.n	8000d38 <__udivmoddi4+0x2c8>
 8000c64:	ebb1 050a 	subs.w	r5, r1, sl
 8000c68:	eb64 0403 	sbc.w	r4, r4, r3
 8000c6c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c70:	40fd      	lsrs	r5, r7
 8000c72:	40fc      	lsrs	r4, r7
 8000c74:	ea4c 0505 	orr.w	r5, ip, r5
 8000c78:	e9c6 5400 	strd	r5, r4, [r6]
 8000c7c:	2700      	movs	r7, #0
 8000c7e:	e747      	b.n	8000b10 <__udivmoddi4+0xa0>
 8000c80:	f1c2 0320 	rsb	r3, r2, #32
 8000c84:	fa20 f703 	lsr.w	r7, r0, r3
 8000c88:	4095      	lsls	r5, r2
 8000c8a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c8e:	fa21 f303 	lsr.w	r3, r1, r3
 8000c92:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c96:	4338      	orrs	r0, r7
 8000c98:	0c01      	lsrs	r1, r0, #16
 8000c9a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c9e:	fa1f f885 	uxth.w	r8, r5
 8000ca2:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ca6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000caa:	fb07 f308 	mul.w	r3, r7, r8
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	fa04 f402 	lsl.w	r4, r4, r2
 8000cb4:	d907      	bls.n	8000cc6 <__udivmoddi4+0x256>
 8000cb6:	1869      	adds	r1, r5, r1
 8000cb8:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cbc:	d22f      	bcs.n	8000d1e <__udivmoddi4+0x2ae>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d92d      	bls.n	8000d1e <__udivmoddi4+0x2ae>
 8000cc2:	3f02      	subs	r7, #2
 8000cc4:	4429      	add	r1, r5
 8000cc6:	1acb      	subs	r3, r1, r3
 8000cc8:	b281      	uxth	r1, r0
 8000cca:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cce:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd6:	fb00 f308 	mul.w	r3, r0, r8
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d907      	bls.n	8000cee <__udivmoddi4+0x27e>
 8000cde:	1869      	adds	r1, r5, r1
 8000ce0:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ce4:	d217      	bcs.n	8000d16 <__udivmoddi4+0x2a6>
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d915      	bls.n	8000d16 <__udivmoddi4+0x2a6>
 8000cea:	3802      	subs	r0, #2
 8000cec:	4429      	add	r1, r5
 8000cee:	1ac9      	subs	r1, r1, r3
 8000cf0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000cf4:	e73b      	b.n	8000b6e <__udivmoddi4+0xfe>
 8000cf6:	4637      	mov	r7, r6
 8000cf8:	4630      	mov	r0, r6
 8000cfa:	e709      	b.n	8000b10 <__udivmoddi4+0xa0>
 8000cfc:	4607      	mov	r7, r0
 8000cfe:	e6e7      	b.n	8000ad0 <__udivmoddi4+0x60>
 8000d00:	4618      	mov	r0, r3
 8000d02:	e6fb      	b.n	8000afc <__udivmoddi4+0x8c>
 8000d04:	4541      	cmp	r1, r8
 8000d06:	d2ab      	bcs.n	8000c60 <__udivmoddi4+0x1f0>
 8000d08:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d0c:	eb69 020e 	sbc.w	r2, r9, lr
 8000d10:	3801      	subs	r0, #1
 8000d12:	4613      	mov	r3, r2
 8000d14:	e7a4      	b.n	8000c60 <__udivmoddi4+0x1f0>
 8000d16:	4660      	mov	r0, ip
 8000d18:	e7e9      	b.n	8000cee <__udivmoddi4+0x27e>
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	e795      	b.n	8000c4a <__udivmoddi4+0x1da>
 8000d1e:	4667      	mov	r7, ip
 8000d20:	e7d1      	b.n	8000cc6 <__udivmoddi4+0x256>
 8000d22:	4681      	mov	r9, r0
 8000d24:	e77c      	b.n	8000c20 <__udivmoddi4+0x1b0>
 8000d26:	3802      	subs	r0, #2
 8000d28:	442c      	add	r4, r5
 8000d2a:	e747      	b.n	8000bbc <__udivmoddi4+0x14c>
 8000d2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d30:	442b      	add	r3, r5
 8000d32:	e72f      	b.n	8000b94 <__udivmoddi4+0x124>
 8000d34:	4638      	mov	r0, r7
 8000d36:	e708      	b.n	8000b4a <__udivmoddi4+0xda>
 8000d38:	4637      	mov	r7, r6
 8000d3a:	e6e9      	b.n	8000b10 <__udivmoddi4+0xa0>

08000d3c <__aeabi_idiv0>:
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop

08000d40 <led_flicker>:
TIM_HandleTypeDef htim6;
DAC_HandleTypeDef hdac;
ADC_HandleTypeDef hadc2;


void led_flicker(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	460b      	mov	r3, r1
 8000d4a:	807b      	strh	r3, [r7, #2]

		counter = 0;
 8000d4c:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <led_flicker+0x5c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	701a      	strb	r2, [r3, #0]
	    while((counter < 80) && (Stop_button == Released))  // Record for 20 sec max & Continously check if the Stop button is released else stop recording
 8000d52:	e013      	b.n	8000d7c <led_flicker+0x3c>
		 {

			if((counter & 1) == 1){
 8000d54:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <led_flicker+0x5c>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d106      	bne.n	8000d70 <led_flicker+0x30>
				HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET); // LED x flashes at 250 ms ON and OFF.
 8000d62:	887b      	ldrh	r3, [r7, #2]
 8000d64:	2201      	movs	r2, #1
 8000d66:	4619      	mov	r1, r3
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f002 ffb7 	bl	8003cdc <HAL_GPIO_WritePin>
 8000d6e:	e005      	b.n	8000d7c <led_flicker+0x3c>
			}

			else {
				HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000d70:	887b      	ldrh	r3, [r7, #2]
 8000d72:	2200      	movs	r2, #0
 8000d74:	4619      	mov	r1, r3
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f002 ffb0 	bl	8003cdc <HAL_GPIO_WritePin>
	    while((counter < 80) && (Stop_button == Released))  // Record for 20 sec max & Continously check if the Stop button is released else stop recording
 8000d7c:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <led_flicker+0x5c>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	2b4f      	cmp	r3, #79	; 0x4f
 8000d84:	d804      	bhi.n	8000d90 <led_flicker+0x50>
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <led_flicker+0x60>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d0e1      	beq.n	8000d54 <led_flicker+0x14>
			}
		 }

	      reset_ever();
 8000d90:	f000 f8d2 	bl	8000f38 <reset_ever>
}
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	200010d4 	.word	0x200010d4
 8000da0:	2000002f 	.word	0x2000002f

08000da4 <uart_transmit_record>:


 void uart_transmit_record(uint8_t record){
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08c      	sub	sp, #48	; 0x30
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]

	 uint8_t recd1 [10] = {127, 128, 'R', 'e', 'c', 'o', 'r', 'd', '_', '1'};
 8000dae:	4a25      	ldr	r2, [pc, #148]	; (8000e44 <uart_transmit_record+0xa0>)
 8000db0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000db6:	c303      	stmia	r3!, {r0, r1}
 8000db8:	801a      	strh	r2, [r3, #0]
	 uint8_t recd2 [10] = {127, 128, 'R', 'e', 'c', 'o', 'r', 'd', '_', '2'};
 8000dba:	4a23      	ldr	r2, [pc, #140]	; (8000e48 <uart_transmit_record+0xa4>)
 8000dbc:	f107 0318 	add.w	r3, r7, #24
 8000dc0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000dc2:	c303      	stmia	r3!, {r0, r1}
 8000dc4:	801a      	strh	r2, [r3, #0]
	 uint8_t recd3 [10] = {127, 128, 'R', 'e', 'c', 'o', 'r', 'd', '_', '3'};
 8000dc6:	4a21      	ldr	r2, [pc, #132]	; (8000e4c <uart_transmit_record+0xa8>)
 8000dc8:	f107 030c 	add.w	r3, r7, #12
 8000dcc:	ca07      	ldmia	r2, {r0, r1, r2}
 8000dce:	c303      	stmia	r3!, {r0, r1}
 8000dd0:	801a      	strh	r2, [r3, #0]

	 switch(record){
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d013      	beq.n	8000e00 <uart_transmit_record+0x5c>
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d020      	beq.n	8000e1e <uart_transmit_record+0x7a>
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d000      	beq.n	8000de2 <uart_transmit_record+0x3e>
		 HAL_UART_Transmit(&huart2, recd3, sizeof(recd3), 1000);
		 HAL_ADC_Start_DMA(&hadc2, (uint32_t*)myADC_Signal_3, FULLBUFFERSZE);
		 //HAL_UART_Transmit_DMA(&huart2, myADC_Signal_3, sizeof(myADC_Signal_3), 1000);
		 break;
	 }
 }
 8000de0:	e02c      	b.n	8000e3c <uart_transmit_record+0x98>
		 HAL_UART_Transmit(&huart2, recd1, sizeof(recd1), 1000);
 8000de2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dea:	220a      	movs	r2, #10
 8000dec:	4818      	ldr	r0, [pc, #96]	; (8000e50 <uart_transmit_record+0xac>)
 8000dee:	f004 fc3a 	bl	8005666 <HAL_UART_Transmit>
		 HAL_ADC_Start_DMA(&hadc2, (uint32_t*)myADC_Signal_1, FULLBUFFERSZE);
 8000df2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000df6:	4917      	ldr	r1, [pc, #92]	; (8000e54 <uart_transmit_record+0xb0>)
 8000df8:	4817      	ldr	r0, [pc, #92]	; (8000e58 <uart_transmit_record+0xb4>)
 8000dfa:	f001 fbc5 	bl	8002588 <HAL_ADC_Start_DMA>
		 break;
 8000dfe:	e01d      	b.n	8000e3c <uart_transmit_record+0x98>
		 HAL_UART_Transmit(&huart2, recd2, sizeof(recd2), 1000);
 8000e00:	f107 0118 	add.w	r1, r7, #24
 8000e04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e08:	220a      	movs	r2, #10
 8000e0a:	4811      	ldr	r0, [pc, #68]	; (8000e50 <uart_transmit_record+0xac>)
 8000e0c:	f004 fc2b 	bl	8005666 <HAL_UART_Transmit>
		 HAL_ADC_Start_DMA(&hadc2, (uint32_t*)myADC_Signal_2, FULLBUFFERSZE);
 8000e10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e14:	4911      	ldr	r1, [pc, #68]	; (8000e5c <uart_transmit_record+0xb8>)
 8000e16:	4810      	ldr	r0, [pc, #64]	; (8000e58 <uart_transmit_record+0xb4>)
 8000e18:	f001 fbb6 	bl	8002588 <HAL_ADC_Start_DMA>
		 break;
 8000e1c:	e00e      	b.n	8000e3c <uart_transmit_record+0x98>
		 HAL_UART_Transmit(&huart2, recd3, sizeof(recd3), 1000);
 8000e1e:	f107 010c 	add.w	r1, r7, #12
 8000e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e26:	220a      	movs	r2, #10
 8000e28:	4809      	ldr	r0, [pc, #36]	; (8000e50 <uart_transmit_record+0xac>)
 8000e2a:	f004 fc1c 	bl	8005666 <HAL_UART_Transmit>
		 HAL_ADC_Start_DMA(&hadc2, (uint32_t*)myADC_Signal_3, FULLBUFFERSZE);
 8000e2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e32:	490b      	ldr	r1, [pc, #44]	; (8000e60 <uart_transmit_record+0xbc>)
 8000e34:	4808      	ldr	r0, [pc, #32]	; (8000e58 <uart_transmit_record+0xb4>)
 8000e36:	f001 fba7 	bl	8002588 <HAL_ADC_Start_DMA>
		 break;
 8000e3a:	bf00      	nop
 }
 8000e3c:	bf00      	nop
 8000e3e:	3730      	adds	r7, #48	; 0x30
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	080070c4 	.word	0x080070c4
 8000e48:	080070d0 	.word	0x080070d0
 8000e4c:	080070dc 	.word	0x080070dc
 8000e50:	20001518 	.word	0x20001518
 8000e54:	200008c0 	.word	0x200008c0
 8000e58:	20000038 	.word	0x20000038
 8000e5c:	20001118 	.word	0x20001118
 8000e60:	20000480 	.word	0x20000480

08000e64 <uart_transmit_playback>:


 void uart_transmit_playback(uint8_t play){
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08e      	sub	sp, #56	; 0x38
 8000e68:	af02      	add	r7, sp, #8
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]

	 uint8_t playb1 [10] = {127, 128, 'P', 'l', 'a', 'y', '_', '_', '_', '1'};
 8000e6e:	4a2a      	ldr	r2, [pc, #168]	; (8000f18 <uart_transmit_playback+0xb4>)
 8000e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e74:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e76:	c303      	stmia	r3!, {r0, r1}
 8000e78:	801a      	strh	r2, [r3, #0]
	 uint8_t playb2 [10] = {127, 128, 'P', 'l', 'a', 'y', '_', '_', '_', '2'};
 8000e7a:	4a28      	ldr	r2, [pc, #160]	; (8000f1c <uart_transmit_playback+0xb8>)
 8000e7c:	f107 0318 	add.w	r3, r7, #24
 8000e80:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e82:	c303      	stmia	r3!, {r0, r1}
 8000e84:	801a      	strh	r2, [r3, #0]
	 uint8_t playb3 [10] = {127, 128, 'P', 'l', 'a', 'y', '_', '_', '_', '3'};
 8000e86:	4a26      	ldr	r2, [pc, #152]	; (8000f20 <uart_transmit_playback+0xbc>)
 8000e88:	f107 030c 	add.w	r3, r7, #12
 8000e8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e8e:	c303      	stmia	r3!, {r0, r1}
 8000e90:	801a      	strh	r2, [r3, #0]

	 switch(play){
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d016      	beq.n	8000ec6 <uart_transmit_playback+0x62>
 8000e98:	2b03      	cmp	r3, #3
 8000e9a:	d026      	beq.n	8000eea <uart_transmit_playback+0x86>
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d000      	beq.n	8000ea2 <uart_transmit_playback+0x3e>
		  //wave_fillbuffer(myDAC_Signal, buttn, FULLBUFFERSZE);
		  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)myDAC_Signal_3, FULLBUFFERSZE, DAC_ALIGN_12B_R);
		  HAL_UART_Transmit(&huart2, playb3, sizeof(playb3), 1000);
		 break;
	 }
 }
 8000ea0:	e035      	b.n	8000f0e <uart_transmit_playback+0xaa>
		  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)myDAC_Signal_1, FULLBUFFERSZE, DAC_ALIGN_12B_R);
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	9300      	str	r3, [sp, #0]
 8000ea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eaa:	4a1e      	ldr	r2, [pc, #120]	; (8000f24 <uart_transmit_playback+0xc0>)
 8000eac:	2100      	movs	r1, #0
 8000eae:	481e      	ldr	r0, [pc, #120]	; (8000f28 <uart_transmit_playback+0xc4>)
 8000eb0:	f002 f84a 	bl	8002f48 <HAL_DAC_Start_DMA>
		  HAL_UART_Transmit(&huart2, playb1, sizeof(playb1), 1000);
 8000eb4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000eb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ebc:	220a      	movs	r2, #10
 8000ebe:	481b      	ldr	r0, [pc, #108]	; (8000f2c <uart_transmit_playback+0xc8>)
 8000ec0:	f004 fbd1 	bl	8005666 <HAL_UART_Transmit>
		 break;
 8000ec4:	e023      	b.n	8000f0e <uart_transmit_playback+0xaa>
		  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)myDAC_Signal_2, FULLBUFFERSZE, DAC_ALIGN_12B_R);
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ece:	4a18      	ldr	r2, [pc, #96]	; (8000f30 <uart_transmit_playback+0xcc>)
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4815      	ldr	r0, [pc, #84]	; (8000f28 <uart_transmit_playback+0xc4>)
 8000ed4:	f002 f838 	bl	8002f48 <HAL_DAC_Start_DMA>
		  HAL_UART_Transmit(&huart2, playb2, sizeof(playb2), 1000);
 8000ed8:	f107 0118 	add.w	r1, r7, #24
 8000edc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee0:	220a      	movs	r2, #10
 8000ee2:	4812      	ldr	r0, [pc, #72]	; (8000f2c <uart_transmit_playback+0xc8>)
 8000ee4:	f004 fbbf 	bl	8005666 <HAL_UART_Transmit>
		 break;
 8000ee8:	e011      	b.n	8000f0e <uart_transmit_playback+0xaa>
		  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)myDAC_Signal_3, FULLBUFFERSZE, DAC_ALIGN_12B_R);
 8000eea:	2300      	movs	r3, #0
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ef2:	4a10      	ldr	r2, [pc, #64]	; (8000f34 <uart_transmit_playback+0xd0>)
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	480c      	ldr	r0, [pc, #48]	; (8000f28 <uart_transmit_playback+0xc4>)
 8000ef8:	f002 f826 	bl	8002f48 <HAL_DAC_Start_DMA>
		  HAL_UART_Transmit(&huart2, playb3, sizeof(playb3), 1000);
 8000efc:	f107 010c 	add.w	r1, r7, #12
 8000f00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f04:	220a      	movs	r2, #10
 8000f06:	4809      	ldr	r0, [pc, #36]	; (8000f2c <uart_transmit_playback+0xc8>)
 8000f08:	f004 fbad 	bl	8005666 <HAL_UART_Transmit>
		 break;
 8000f0c:	bf00      	nop
 }
 8000f0e:	bf00      	nop
 8000f10:	3730      	adds	r7, #48	; 0x30
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	080070e8 	.word	0x080070e8
 8000f1c:	080070f4 	.word	0x080070f4
 8000f20:	08007100 	.word	0x08007100
 8000f24:	2000155c 	.word	0x2000155c
 8000f28:	20000cc0 	.word	0x20000cc0
 8000f2c:	20001518 	.word	0x20001518
 8000f30:	20000080 	.word	0x20000080
 8000f34:	20000cd4 	.word	0x20000cd4

08000f38 <reset_ever>:

 //Reset everything and return to the main function
  void reset_ever(void){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0

 		 uint8_t stop [10] = {127, 128, 'S', 't', 'o', 'p', '_', '_', '_', '_'};
 8000f3e:	4a1b      	ldr	r2, [pc, #108]	; (8000fac <reset_ever+0x74>)
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f44:	c303      	stmia	r3!, {r0, r1}
 8000f46:	801a      	strh	r2, [r3, #0]
 		 HAL_UART_Transmit(&huart2, stop, sizeof(stop), 1000);
 8000f48:	1d39      	adds	r1, r7, #4
 8000f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4e:	220a      	movs	r2, #10
 8000f50:	4817      	ldr	r0, [pc, #92]	; (8000fb0 <reset_ever+0x78>)
 8000f52:	f004 fb88 	bl	8005666 <HAL_UART_Transmit>

   	 		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2180      	movs	r1, #128	; 0x80
 8000f5a:	4816      	ldr	r0, [pc, #88]	; (8000fb4 <reset_ever+0x7c>)
 8000f5c:	f002 febe 	bl	8003cdc <HAL_GPIO_WritePin>
   	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2140      	movs	r1, #64	; 0x40
 8000f64:	4814      	ldr	r0, [pc, #80]	; (8000fb8 <reset_ever+0x80>)
 8000f66:	f002 feb9 	bl	8003cdc <HAL_GPIO_WritePin>
   	 		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2180      	movs	r1, #128	; 0x80
 8000f6e:	4813      	ldr	r0, [pc, #76]	; (8000fbc <reset_ever+0x84>)
 8000f70:	f002 feb4 	bl	8003cdc <HAL_GPIO_WritePin>
   	 		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000f74:	2200      	movs	r2, #0
 8000f76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f7a:	480e      	ldr	r0, [pc, #56]	; (8000fb4 <reset_ever+0x7c>)
 8000f7c:	f002 feae 	bl	8003cdc <HAL_GPIO_WritePin>

   	 		Record_button = Released;
 8000f80:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <reset_ever+0x88>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	701a      	strb	r2, [r3, #0]
   	 		button1 = Released;
 8000f86:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <reset_ever+0x8c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
   	 		button2 = Released;
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <reset_ever+0x90>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]
   	 		button3 = Released;
 8000f92:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <reset_ever+0x94>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	701a      	strb	r2, [r3, #0]
   	 		Stop_button = Released;
 8000f98:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <reset_ever+0x98>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]

   	        state = AUDIO_MODE_IDLE;
 8000f9e:	4b0d      	ldr	r3, [pc, #52]	; (8000fd4 <reset_ever+0x9c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	701a      	strb	r2, [r3, #0]
   }
 8000fa4:	bf00      	nop
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	0800710c 	.word	0x0800710c
 8000fb0:	20001518 	.word	0x20001518
 8000fb4:	40020000 	.word	0x40020000
 8000fb8:	40020400 	.word	0x40020400
 8000fbc:	40020800 	.word	0x40020800
 8000fc0:	20001558 	.word	0x20001558
 8000fc4:	2000002c 	.word	0x2000002c
 8000fc8:	2000002d 	.word	0x2000002d
 8000fcc:	2000002e 	.word	0x2000002e
 8000fd0:	2000002f 	.word	0x2000002f
 8000fd4:	20000033 	.word	0x20000033

08000fd8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){//Called Every button interrupt
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	80fb      	strh	r3, [r7, #6]

	//Delay the trigerring of the interrupt for 10ms to account for mechanical bounce:
	if(debounce <= 0){
 8000fe2:	4b27      	ldr	r3, [pc, #156]	; (8001080 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d118      	bne.n	800101c <HAL_GPIO_EXTI_Callback+0x44>

		switch(GPIO_Pin){
 8000fea:	88fb      	ldrh	r3, [r7, #6]
 8000fec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ff0:	d00c      	beq.n	800100c <HAL_GPIO_EXTI_Callback+0x34>
 8000ff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ff6:	dc03      	bgt.n	8001000 <HAL_GPIO_EXTI_Callback+0x28>
 8000ff8:	2b20      	cmp	r3, #32
 8000ffa:	d009      	beq.n	8001010 <HAL_GPIO_EXTI_Callback+0x38>
 8000ffc:	2b40      	cmp	r3, #64	; 0x40

		case GPIO_PIN_8: //btn 1
			break;

		case GPIO_PIN_6: //btn 2
			break;
 8000ffe:	e00a      	b.n	8001016 <HAL_GPIO_EXTI_Callback+0x3e>
		switch(GPIO_Pin){
 8001000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001004:	d006      	beq.n	8001014 <HAL_GPIO_EXTI_Callback+0x3c>
 8001006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400

		case GPIO_PIN_5: //btn 3
			break;

		case GPIO_PIN_10: //Record
		    break;
 800100a:	e004      	b.n	8001016 <HAL_GPIO_EXTI_Callback+0x3e>
			break;
 800100c:	bf00      	nop
 800100e:	e002      	b.n	8001016 <HAL_GPIO_EXTI_Callback+0x3e>
			break;
 8001010:	bf00      	nop
 8001012:	e000      	b.n	8001016 <HAL_GPIO_EXTI_Callback+0x3e>

		case GPIO_PIN_9: //Stop
		    break;
 8001014:	bf00      	nop
		}

		debounce = 10;
 8001016:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001018:	220a      	movs	r2, #10
 800101a:	701a      	strb	r2, [r3, #0]
	}


		if(GPIO_Pin == GPIO_PIN_8){
 800101c:	88fb      	ldrh	r3, [r7, #6]
 800101e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001022:	d103      	bne.n	800102c <HAL_GPIO_EXTI_Callback+0x54>

			button1 = Pressed;
 8001024:	4b17      	ldr	r3, [pc, #92]	; (8001084 <HAL_GPIO_EXTI_Callback+0xac>)
 8001026:	2201      	movs	r2, #1
 8001028:	701a      	strb	r2, [r3, #0]
		else if((GPIO_Pin == GPIO_PIN_10) && (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == 1)){

			Record_button = Pressed;
		}

}
 800102a:	e024      	b.n	8001076 <HAL_GPIO_EXTI_Callback+0x9e>
		else if(GPIO_Pin == GPIO_PIN_6){
 800102c:	88fb      	ldrh	r3, [r7, #6]
 800102e:	2b40      	cmp	r3, #64	; 0x40
 8001030:	d103      	bne.n	800103a <HAL_GPIO_EXTI_Callback+0x62>
			button2 = Pressed;
 8001032:	4b15      	ldr	r3, [pc, #84]	; (8001088 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001034:	2201      	movs	r2, #1
 8001036:	701a      	strb	r2, [r3, #0]
}
 8001038:	e01d      	b.n	8001076 <HAL_GPIO_EXTI_Callback+0x9e>
		else if(GPIO_Pin == GPIO_PIN_5){
 800103a:	88fb      	ldrh	r3, [r7, #6]
 800103c:	2b20      	cmp	r3, #32
 800103e:	d103      	bne.n	8001048 <HAL_GPIO_EXTI_Callback+0x70>
			button3 = Pressed;
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <HAL_GPIO_EXTI_Callback+0xb4>)
 8001042:	2201      	movs	r2, #1
 8001044:	701a      	strb	r2, [r3, #0]
}
 8001046:	e016      	b.n	8001076 <HAL_GPIO_EXTI_Callback+0x9e>
		else if(GPIO_Pin == GPIO_PIN_9){
 8001048:	88fb      	ldrh	r3, [r7, #6]
 800104a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800104e:	d103      	bne.n	8001058 <HAL_GPIO_EXTI_Callback+0x80>
			Stop_button = Pressed;
 8001050:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001052:	2201      	movs	r2, #1
 8001054:	701a      	strb	r2, [r3, #0]
}
 8001056:	e00e      	b.n	8001076 <HAL_GPIO_EXTI_Callback+0x9e>
		else if((GPIO_Pin == GPIO_PIN_10) && (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == 1)){
 8001058:	88fb      	ldrh	r3, [r7, #6]
 800105a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800105e:	d10a      	bne.n	8001076 <HAL_GPIO_EXTI_Callback+0x9e>
 8001060:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001064:	480b      	ldr	r0, [pc, #44]	; (8001094 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001066:	f002 fe21 	bl	8003cac <HAL_GPIO_ReadPin>
 800106a:	4603      	mov	r3, r0
 800106c:	2b01      	cmp	r3, #1
 800106e:	d102      	bne.n	8001076 <HAL_GPIO_EXTI_Callback+0x9e>
			Record_button = Pressed;
 8001070:	4b09      	ldr	r3, [pc, #36]	; (8001098 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001072:	2201      	movs	r2, #1
 8001074:	701a      	strb	r2, [r3, #0]
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000031 	.word	0x20000031
 8001084:	2000002c 	.word	0x2000002c
 8001088:	2000002d 	.word	0x2000002d
 800108c:	2000002e 	.word	0x2000002e
 8001090:	2000002f 	.word	0x2000002f
 8001094:	40020400 	.word	0x40020400
 8001098:	20001558 	.word	0x20001558

0800109c <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void){ //Called Every 1ms
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0

	if(debounce > 0){
 80010a0:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <HAL_SYSTICK_Callback+0x24>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d005      	beq.n	80010b4 <HAL_SYSTICK_Callback+0x18>
		debounce--;
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <HAL_SYSTICK_Callback+0x24>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	3b01      	subs	r3, #1
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <HAL_SYSTICK_Callback+0x24>)
 80010b2:	701a      	strb	r2, [r3, #0]
	}
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	20000031 	.word	0x20000031

080010c4 <rec_bttncb>:

void rec_bttncb(void){ //Check every 1ms if record is ON PRESS and HOLD
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0


	//StartTick = CurrentTick;
	if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == 1)){ // && ((CurrentTick - StartTick) > PB_PRESSED_TIMEOUT)){
 80010c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010cc:	480b      	ldr	r0, [pc, #44]	; (80010fc <rec_bttncb+0x38>)
 80010ce:	f002 fded 	bl	8003cac <HAL_GPIO_ReadPin>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d103      	bne.n	80010e0 <rec_bttncb+0x1c>

		Record_button = Pressed;
 80010d8:	4b09      	ldr	r3, [pc, #36]	; (8001100 <rec_bttncb+0x3c>)
 80010da:	2201      	movs	r2, #1
 80010dc:	701a      	strb	r2, [r3, #0]
	else if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == 0)){

		Record_button = Released;

	}
}
 80010de:	e00a      	b.n	80010f6 <rec_bttncb+0x32>
	else if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == 0)){
 80010e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010e4:	4805      	ldr	r0, [pc, #20]	; (80010fc <rec_bttncb+0x38>)
 80010e6:	f002 fde1 	bl	8003cac <HAL_GPIO_ReadPin>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d102      	bne.n	80010f6 <rec_bttncb+0x32>
		Record_button = Released;
 80010f0:	4b03      	ldr	r3, [pc, #12]	; (8001100 <rec_bttncb+0x3c>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	701a      	strb	r2, [r3, #0]
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40020400 	.word	0x40020400
 8001100:	20001558 	.word	0x20001558

08001104 <HAL_ADC_ConvCpltCallback>:
int32_t average = 128;
int32_t accumulator;
int32_t numavg;
float smoothed_sample;

 void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001104:	b5b0      	push	{r4, r5, r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]

	 huart2.gState = HAL_UART_STATE_READY;
 800110c:	4b47      	ldr	r3, [pc, #284]	; (800122c <HAL_ADC_ConvCpltCallback+0x128>)
 800110e:	2220      	movs	r2, #32
 8001110:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	 for(int i = 512; i < FULLBUFFERSZE; i++){
 8001114:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	e05c      	b.n	80011d6 <HAL_ADC_ConvCpltCallback+0xd2>

		 accumulator += myADC_Signal_1[i];
 800111c:	4a44      	ldr	r2, [pc, #272]	; (8001230 <HAL_ADC_ConvCpltCallback+0x12c>)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	4413      	add	r3, r2
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	461a      	mov	r2, r3
 8001126:	4b43      	ldr	r3, [pc, #268]	; (8001234 <HAL_ADC_ConvCpltCallback+0x130>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4413      	add	r3, r2
 800112c:	4a41      	ldr	r2, [pc, #260]	; (8001234 <HAL_ADC_ConvCpltCallback+0x130>)
 800112e:	6013      	str	r3, [r2, #0]
		 tempsample = (int32_t)myADC_Signal_1 - average;
 8001130:	4a3f      	ldr	r2, [pc, #252]	; (8001230 <HAL_ADC_ConvCpltCallback+0x12c>)
 8001132:	4b41      	ldr	r3, [pc, #260]	; (8001238 <HAL_ADC_ConvCpltCallback+0x134>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	4a40      	ldr	r2, [pc, #256]	; (800123c <HAL_ADC_ConvCpltCallback+0x138>)
 800113a:	6013      	str	r3, [r2, #0]
		 smoothed_sample = 0.125f * tempsample + 0.875 * smoothed_sample;
 800113c:	4b3f      	ldr	r3, [pc, #252]	; (800123c <HAL_ADC_ConvCpltCallback+0x138>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	ee07 3a90 	vmov	s15, r3
 8001144:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001148:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 800114c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001150:	ee17 0a90 	vmov	r0, s15
 8001154:	f7ff f9ba 	bl	80004cc <__aeabi_f2d>
 8001158:	4604      	mov	r4, r0
 800115a:	460d      	mov	r5, r1
 800115c:	4b38      	ldr	r3, [pc, #224]	; (8001240 <HAL_ADC_ConvCpltCallback+0x13c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff f9b3 	bl	80004cc <__aeabi_f2d>
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	4b36      	ldr	r3, [pc, #216]	; (8001244 <HAL_ADC_ConvCpltCallback+0x140>)
 800116c:	f7ff fa06 	bl	800057c <__aeabi_dmul>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	4620      	mov	r0, r4
 8001176:	4629      	mov	r1, r5
 8001178:	f7ff f84a 	bl	8000210 <__adddf3>
 800117c:	4603      	mov	r3, r0
 800117e:	460c      	mov	r4, r1
 8001180:	4618      	mov	r0, r3
 8001182:	4621      	mov	r1, r4
 8001184:	f7ff fc0c 	bl	80009a0 <__aeabi_d2f>
 8001188:	4602      	mov	r2, r0
 800118a:	4b2d      	ldr	r3, [pc, #180]	; (8001240 <HAL_ADC_ConvCpltCallback+0x13c>)
 800118c:	601a      	str	r2, [r3, #0]
		 tempsample = (int32_t)smoothed_sample;
 800118e:	4b2c      	ldr	r3, [pc, #176]	; (8001240 <HAL_ADC_ConvCpltCallback+0x13c>)
 8001190:	edd3 7a00 	vldr	s15, [r3]
 8001194:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001198:	ee17 2a90 	vmov	r2, s15
 800119c:	4b27      	ldr	r3, [pc, #156]	; (800123c <HAL_ADC_ConvCpltCallback+0x138>)
 800119e:	601a      	str	r2, [r3, #0]

		 if(tempsample > 127)
 80011a0:	4b26      	ldr	r3, [pc, #152]	; (800123c <HAL_ADC_ConvCpltCallback+0x138>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b7f      	cmp	r3, #127	; 0x7f
 80011a6:	dd02      	ble.n	80011ae <HAL_ADC_ConvCpltCallback+0xaa>
			 tempsample = 127;
 80011a8:	4b24      	ldr	r3, [pc, #144]	; (800123c <HAL_ADC_ConvCpltCallback+0x138>)
 80011aa:	227f      	movs	r2, #127	; 0x7f
 80011ac:	601a      	str	r2, [r3, #0]
		 if(tempsample < - 128)
 80011ae:	4b23      	ldr	r3, [pc, #140]	; (800123c <HAL_ADC_ConvCpltCallback+0x138>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f113 0f80 	cmn.w	r3, #128	; 0x80
 80011b6:	da03      	bge.n	80011c0 <HAL_ADC_ConvCpltCallback+0xbc>
			 tempsample = -128;
 80011b8:	4b20      	ldr	r3, [pc, #128]	; (800123c <HAL_ADC_ConvCpltCallback+0x138>)
 80011ba:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 80011be:	601a      	str	r2, [r3, #0]

		 outputbuf[i] = (int8_t)tempsample;
 80011c0:	4b1e      	ldr	r3, [pc, #120]	; (800123c <HAL_ADC_ConvCpltCallback+0x138>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	b259      	sxtb	r1, r3
 80011c6:	4a20      	ldr	r2, [pc, #128]	; (8001248 <HAL_ADC_ConvCpltCallback+0x144>)
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4413      	add	r3, r2
 80011cc:	460a      	mov	r2, r1
 80011ce:	701a      	strb	r2, [r3, #0]
	 for(int i = 512; i < FULLBUFFERSZE; i++){
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	3301      	adds	r3, #1
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011dc:	db9e      	blt.n	800111c <HAL_ADC_ConvCpltCallback+0x18>

	 }

	 numavg += 512;
 80011de:	4b1b      	ldr	r3, [pc, #108]	; (800124c <HAL_ADC_ConvCpltCallback+0x148>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80011e6:	4a19      	ldr	r2, [pc, #100]	; (800124c <HAL_ADC_ConvCpltCallback+0x148>)
 80011e8:	6013      	str	r3, [r2, #0]

	 if(numavg >= 20480){
 80011ea:	4b18      	ldr	r3, [pc, #96]	; (800124c <HAL_ADC_ConvCpltCallback+0x148>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80011f2:	db0f      	blt.n	8001214 <HAL_ADC_ConvCpltCallback+0x110>

		 average = accumulator / 20480;
 80011f4:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <HAL_ADC_ConvCpltCallback+0x130>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a15      	ldr	r2, [pc, #84]	; (8001250 <HAL_ADC_ConvCpltCallback+0x14c>)
 80011fa:	fb82 1203 	smull	r1, r2, r2, r3
 80011fe:	1352      	asrs	r2, r2, #13
 8001200:	17db      	asrs	r3, r3, #31
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	4a0c      	ldr	r2, [pc, #48]	; (8001238 <HAL_ADC_ConvCpltCallback+0x134>)
 8001206:	6013      	str	r3, [r2, #0]
		 accumulator = 0;
 8001208:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <HAL_ADC_ConvCpltCallback+0x130>)
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
		 numavg = 0;
 800120e:	4b0f      	ldr	r3, [pc, #60]	; (800124c <HAL_ADC_ConvCpltCallback+0x148>)
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
	 }

	 HAL_UART_Transmit_DMA(&huart2, (int8_t*)outputbuf+DATASIZE, DATASIZE);
 8001214:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <HAL_ADC_ConvCpltCallback+0x150>)
 8001216:	f44f 7200 	mov.w	r2, #512	; 0x200
 800121a:	4619      	mov	r1, r3
 800121c:	4803      	ldr	r0, [pc, #12]	; (800122c <HAL_ADC_ConvCpltCallback+0x128>)
 800121e:	f004 fabb 	bl	8005798 <HAL_UART_Transmit_DMA>

 }
 8001222:	bf00      	nop
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bdb0      	pop	{r4, r5, r7, pc}
 800122a:	bf00      	nop
 800122c:	20001518 	.word	0x20001518
 8001230:	200008c0 	.word	0x200008c0
 8001234:	20001960 	.word	0x20001960
 8001238:	20000000 	.word	0x20000000
 800123c:	20001f20 	.word	0x20001f20
 8001240:	20001e24 	.word	0x20001e24
 8001244:	3fec0000 	.word	0x3fec0000
 8001248:	200019c4 	.word	0x200019c4
 800124c:	2000195c 	.word	0x2000195c
 8001250:	66666667 	.word	0x66666667
 8001254:	20001bc4 	.word	0x20001bc4

08001258 <HAL_ADC_ConvHalfCpltCallback>:

 void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8001258:	b5b0      	push	{r4, r5, r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]

	 huart2.gState = HAL_UART_STATE_READY;
 8001260:	4b46      	ldr	r3, [pc, #280]	; (800137c <HAL_ADC_ConvHalfCpltCallback+0x124>)
 8001262:	2220      	movs	r2, #32
 8001264:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	 for(int i = 0; i < DATASIZE; i++){
 8001268:	2300      	movs	r3, #0
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	e05c      	b.n	8001328 <HAL_ADC_ConvHalfCpltCallback+0xd0>

		 accumulator += myADC_Signal_1[i];
 800126e:	4a44      	ldr	r2, [pc, #272]	; (8001380 <HAL_ADC_ConvHalfCpltCallback+0x128>)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4413      	add	r3, r2
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	461a      	mov	r2, r3
 8001278:	4b42      	ldr	r3, [pc, #264]	; (8001384 <HAL_ADC_ConvHalfCpltCallback+0x12c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4413      	add	r3, r2
 800127e:	4a41      	ldr	r2, [pc, #260]	; (8001384 <HAL_ADC_ConvHalfCpltCallback+0x12c>)
 8001280:	6013      	str	r3, [r2, #0]
		 tempsample = (int32_t)myADC_Signal_1 - average;
 8001282:	4a3f      	ldr	r2, [pc, #252]	; (8001380 <HAL_ADC_ConvHalfCpltCallback+0x128>)
 8001284:	4b40      	ldr	r3, [pc, #256]	; (8001388 <HAL_ADC_ConvHalfCpltCallback+0x130>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	4a40      	ldr	r2, [pc, #256]	; (800138c <HAL_ADC_ConvHalfCpltCallback+0x134>)
 800128c:	6013      	str	r3, [r2, #0]
		 smoothed_sample = 0.125f * tempsample + 0.875 * smoothed_sample;
 800128e:	4b3f      	ldr	r3, [pc, #252]	; (800138c <HAL_ADC_ConvHalfCpltCallback+0x134>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	ee07 3a90 	vmov	s15, r3
 8001296:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800129a:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 800129e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a2:	ee17 0a90 	vmov	r0, s15
 80012a6:	f7ff f911 	bl	80004cc <__aeabi_f2d>
 80012aa:	4604      	mov	r4, r0
 80012ac:	460d      	mov	r5, r1
 80012ae:	4b38      	ldr	r3, [pc, #224]	; (8001390 <HAL_ADC_ConvHalfCpltCallback+0x138>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff f90a 	bl	80004cc <__aeabi_f2d>
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	4b35      	ldr	r3, [pc, #212]	; (8001394 <HAL_ADC_ConvHalfCpltCallback+0x13c>)
 80012be:	f7ff f95d 	bl	800057c <__aeabi_dmul>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4620      	mov	r0, r4
 80012c8:	4629      	mov	r1, r5
 80012ca:	f7fe ffa1 	bl	8000210 <__adddf3>
 80012ce:	4603      	mov	r3, r0
 80012d0:	460c      	mov	r4, r1
 80012d2:	4618      	mov	r0, r3
 80012d4:	4621      	mov	r1, r4
 80012d6:	f7ff fb63 	bl	80009a0 <__aeabi_d2f>
 80012da:	4602      	mov	r2, r0
 80012dc:	4b2c      	ldr	r3, [pc, #176]	; (8001390 <HAL_ADC_ConvHalfCpltCallback+0x138>)
 80012de:	601a      	str	r2, [r3, #0]
		 tempsample = (int32_t)smoothed_sample;
 80012e0:	4b2b      	ldr	r3, [pc, #172]	; (8001390 <HAL_ADC_ConvHalfCpltCallback+0x138>)
 80012e2:	edd3 7a00 	vldr	s15, [r3]
 80012e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012ea:	ee17 2a90 	vmov	r2, s15
 80012ee:	4b27      	ldr	r3, [pc, #156]	; (800138c <HAL_ADC_ConvHalfCpltCallback+0x134>)
 80012f0:	601a      	str	r2, [r3, #0]

		 if(tempsample > 127)
 80012f2:	4b26      	ldr	r3, [pc, #152]	; (800138c <HAL_ADC_ConvHalfCpltCallback+0x134>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b7f      	cmp	r3, #127	; 0x7f
 80012f8:	dd02      	ble.n	8001300 <HAL_ADC_ConvHalfCpltCallback+0xa8>
			 tempsample = 127;
 80012fa:	4b24      	ldr	r3, [pc, #144]	; (800138c <HAL_ADC_ConvHalfCpltCallback+0x134>)
 80012fc:	227f      	movs	r2, #127	; 0x7f
 80012fe:	601a      	str	r2, [r3, #0]
		 if(tempsample < - 128)
 8001300:	4b22      	ldr	r3, [pc, #136]	; (800138c <HAL_ADC_ConvHalfCpltCallback+0x134>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8001308:	da03      	bge.n	8001312 <HAL_ADC_ConvHalfCpltCallback+0xba>
			 tempsample = -128;
 800130a:	4b20      	ldr	r3, [pc, #128]	; (800138c <HAL_ADC_ConvHalfCpltCallback+0x134>)
 800130c:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8001310:	601a      	str	r2, [r3, #0]

		 outputbuf[i] = (int8_t)tempsample;
 8001312:	4b1e      	ldr	r3, [pc, #120]	; (800138c <HAL_ADC_ConvHalfCpltCallback+0x134>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	b259      	sxtb	r1, r3
 8001318:	4a1f      	ldr	r2, [pc, #124]	; (8001398 <HAL_ADC_ConvHalfCpltCallback+0x140>)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4413      	add	r3, r2
 800131e:	460a      	mov	r2, r1
 8001320:	701a      	strb	r2, [r3, #0]
	 for(int i = 0; i < DATASIZE; i++){
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	3301      	adds	r3, #1
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800132e:	db9e      	blt.n	800126e <HAL_ADC_ConvHalfCpltCallback+0x16>

	 }

	 numavg += 512;
 8001330:	4b1a      	ldr	r3, [pc, #104]	; (800139c <HAL_ADC_ConvHalfCpltCallback+0x144>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001338:	4a18      	ldr	r2, [pc, #96]	; (800139c <HAL_ADC_ConvHalfCpltCallback+0x144>)
 800133a:	6013      	str	r3, [r2, #0]

	 if(numavg >= 20480){
 800133c:	4b17      	ldr	r3, [pc, #92]	; (800139c <HAL_ADC_ConvHalfCpltCallback+0x144>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8001344:	db0f      	blt.n	8001366 <HAL_ADC_ConvHalfCpltCallback+0x10e>

		 average = accumulator / 20480;
 8001346:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <HAL_ADC_ConvHalfCpltCallback+0x12c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a15      	ldr	r2, [pc, #84]	; (80013a0 <HAL_ADC_ConvHalfCpltCallback+0x148>)
 800134c:	fb82 1203 	smull	r1, r2, r2, r3
 8001350:	1352      	asrs	r2, r2, #13
 8001352:	17db      	asrs	r3, r3, #31
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	4a0c      	ldr	r2, [pc, #48]	; (8001388 <HAL_ADC_ConvHalfCpltCallback+0x130>)
 8001358:	6013      	str	r3, [r2, #0]
		 accumulator = 0;
 800135a:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <HAL_ADC_ConvHalfCpltCallback+0x12c>)
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
		 numavg = 0;
 8001360:	4b0e      	ldr	r3, [pc, #56]	; (800139c <HAL_ADC_ConvHalfCpltCallback+0x144>)
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
	 }

	 HAL_UART_Transmit_DMA(&huart2, (int8_t*)outputbuf+DATASIZE, DATASIZE);
 8001366:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <HAL_ADC_ConvHalfCpltCallback+0x14c>)
 8001368:	f44f 7200 	mov.w	r2, #512	; 0x200
 800136c:	4619      	mov	r1, r3
 800136e:	4803      	ldr	r0, [pc, #12]	; (800137c <HAL_ADC_ConvHalfCpltCallback+0x124>)
 8001370:	f004 fa12 	bl	8005798 <HAL_UART_Transmit_DMA>

 }
 8001374:	bf00      	nop
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bdb0      	pop	{r4, r5, r7, pc}
 800137c:	20001518 	.word	0x20001518
 8001380:	200008c0 	.word	0x200008c0
 8001384:	20001960 	.word	0x20001960
 8001388:	20000000 	.word	0x20000000
 800138c:	20001f20 	.word	0x20001f20
 8001390:	20001e24 	.word	0x20001e24
 8001394:	3fec0000 	.word	0x3fec0000
 8001398:	200019c4 	.word	0x200019c4
 800139c:	2000195c 	.word	0x2000195c
 80013a0:	66666667 	.word	0x66666667
 80013a4:	20001bc4 	.word	0x20001bc4

080013a8 <HAL_DAC_ConvCpltCallbackCh1>:

 void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af02      	add	r7, sp, #8
 80013ae:	6078      	str	r0, [r7, #4]

	 HAL_DAC_Start_DMA(hdac, DAC_CHANNEL_1, (uint32_t*)myDAC_Signal_1, FULLBUFFERSZE, DAC_ALIGN_12B_R);
 80013b0:	2300      	movs	r3, #0
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013b8:	4a04      	ldr	r2, [pc, #16]	; (80013cc <HAL_DAC_ConvCpltCallbackCh1+0x24>)
 80013ba:	2100      	movs	r1, #0
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f001 fdc3 	bl	8002f48 <HAL_DAC_Start_DMA>
	 //wave_fillbuffer(myDAC_Signal+512, buttn, 512);

 }
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	2000155c 	.word	0x2000155c

080013d0 <HAL_DAC_ConvHalfCpltCallbackCh1>:

 void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af02      	add	r7, sp, #8
 80013d6:	6078      	str	r0, [r7, #4]

	 HAL_DAC_Start_DMA(hdac, DAC_CHANNEL_1, (uint32_t*)myDAC_Signal_1, FULLBUFFERSZE, DAC_ALIGN_12B_R);
 80013d8:	2300      	movs	r3, #0
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013e0:	4a04      	ldr	r2, [pc, #16]	; (80013f4 <HAL_DAC_ConvHalfCpltCallbackCh1+0x24>)
 80013e2:	2100      	movs	r1, #0
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f001 fdaf 	bl	8002f48 <HAL_DAC_Start_DMA>
	 //wave_fillbuffer(myDAC_Signal, buttn, 512);

 }
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	2000155c 	.word	0x2000155c

080013f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	 uint8_t SU_ID[10] = {127, 128,'1','8','4','0','7','4','2','0'};
 80013fe:	4a84      	ldr	r2, [pc, #528]	; (8001610 <main+0x218>)
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	ca07      	ldmia	r2, {r0, r1, r2}
 8001404:	c303      	stmia	r3!, {r0, r1}
 8001406:	801a      	strh	r2, [r3, #0]


  wave_init();
 8001408:	f000 fc9e 	bl	8001d48 <wave_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800140c:	f001 f806 	bl	800241c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001410:	f000 f922 	bl	8001658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001414:	f000 fbbe 	bl	8001b94 <MX_GPIO_Init>
  MX_DMA_Init();
 8001418:	f000 fb7e 	bl	8001b18 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800141c:	f000 fb52 	bl	8001ac4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001420:	f000 fab4 	bl	800198c <MX_TIM3_Init>
  MX_DAC_Init();
 8001424:	f000 f9d8 	bl	80017d8 <MX_DAC_Init>
  MX_TIM6_Init();
 8001428:	f000 fb16 	bl	8001a58 <MX_TIM6_Init>
  MX_TIM2_Init();
 800142c:	f000 fa34 	bl	8001898 <MX_TIM2_Init>
  MX_ADC2_Init();
 8001430:	f000 f980 	bl	8001734 <MX_ADC2_Init>
  MX_SPI1_Init();
 8001434:	f000 f9fa 	bl	800182c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  __HAL_TIM_ENABLE(&htim3);
 8001438:	4b76      	ldr	r3, [pc, #472]	; (8001614 <main+0x21c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	4b75      	ldr	r3, [pc, #468]	; (8001614 <main+0x21c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f042 0201 	orr.w	r2, r2, #1
 8001446:	601a      	str	r2, [r3, #0]
  __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE);
 8001448:	4b72      	ldr	r3, [pc, #456]	; (8001614 <main+0x21c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	68da      	ldr	r2, [r3, #12]
 800144e:	4b71      	ldr	r3, [pc, #452]	; (8001614 <main+0x21c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f042 0201 	orr.w	r2, r2, #1
 8001456:	60da      	str	r2, [r3, #12]

  HAL_UART_Transmit(&huart2, SU_ID, 10, 1000);
 8001458:	1d39      	adds	r1, r7, #4
 800145a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800145e:	220a      	movs	r2, #10
 8001460:	486d      	ldr	r0, [pc, #436]	; (8001618 <main+0x220>)
 8001462:	f004 f900 	bl	8005666 <HAL_UART_Transmit>


  //1. Enable Timer 2, 6:

  HAL_TIM_Base_Start(&htim6);
 8001466:	486d      	ldr	r0, [pc, #436]	; (800161c <main+0x224>)
 8001468:	f003 fa0d 	bl	8004886 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 800146c:	486c      	ldr	r0, [pc, #432]	; (8001620 <main+0x228>)
 800146e:	f003 fa0a 	bl	8004886 <HAL_TIM_Base_Start>

  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)myADC_Signal_1, FULLBUFFERSZE);
 8001472:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001476:	496b      	ldr	r1, [pc, #428]	; (8001624 <main+0x22c>)
 8001478:	486b      	ldr	r0, [pc, #428]	; (8001628 <main+0x230>)
 800147a:	f001 f885 	bl	8002588 <HAL_ADC_Start_DMA>
  __HAL_TIM_ENABLE(&htim2);
 800147e:	4b68      	ldr	r3, [pc, #416]	; (8001620 <main+0x228>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4b66      	ldr	r3, [pc, #408]	; (8001620 <main+0x228>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f042 0201 	orr.w	r2, r2, #1
 800148c:	601a      	str	r2, [r3, #0]

  //delete code testing123....
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)myDAC_Signal_1, FULLBUFFERSZE, DAC_ALIGN_12B_R);
 800148e:	2300      	movs	r3, #0
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001496:	4a65      	ldr	r2, [pc, #404]	; (800162c <main+0x234>)
 8001498:	2100      	movs	r1, #0
 800149a:	4865      	ldr	r0, [pc, #404]	; (8001630 <main+0x238>)
 800149c:	f001 fd54 	bl	8002f48 <HAL_DAC_Start_DMA>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

           switch(state){
 80014a0:	4b64      	ldr	r3, [pc, #400]	; (8001634 <main+0x23c>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b06      	cmp	r3, #6
 80014a6:	d8fb      	bhi.n	80014a0 <main+0xa8>
 80014a8:	a201      	add	r2, pc, #4	; (adr r2, 80014b0 <main+0xb8>)
 80014aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ae:	bf00      	nop
 80014b0:	080014cd 	.word	0x080014cd
 80014b4:	08001587 	.word	0x08001587
 80014b8:	080015a3 	.word	0x080015a3
 80014bc:	080015bf 	.word	0x080015bf
 80014c0:	080015db 	.word	0x080015db
 80014c4:	080015eb 	.word	0x080015eb
 80014c8:	080015fb 	.word	0x080015fb
           case AUDIO_MODE_IDLE:

        	   //Check for recording:
        	   //if(Record_button ==  Pressed){ //While it held down check if:

        		   if((button1 == Pressed) && (Record_button ==  Pressed)){
 80014cc:	4b5a      	ldr	r3, [pc, #360]	; (8001638 <main+0x240>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d108      	bne.n	80014e8 <main+0xf0>
 80014d6:	4b59      	ldr	r3, [pc, #356]	; (800163c <main+0x244>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d103      	bne.n	80014e8 <main+0xf0>
        			   state = AUDIO_MODE_RECORDING_1;
 80014e0:	4b54      	ldr	r3, [pc, #336]	; (8001634 <main+0x23c>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	701a      	strb	r2, [r3, #0]
 80014e6:	e01a      	b.n	800151e <main+0x126>
        		   }

        		   else if((button2 == Pressed) && (Record_button ==  Pressed)){
 80014e8:	4b55      	ldr	r3, [pc, #340]	; (8001640 <main+0x248>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d108      	bne.n	8001504 <main+0x10c>
 80014f2:	4b52      	ldr	r3, [pc, #328]	; (800163c <main+0x244>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d103      	bne.n	8001504 <main+0x10c>
        			   state = AUDIO_MODE_RECORDING_2;
 80014fc:	4b4d      	ldr	r3, [pc, #308]	; (8001634 <main+0x23c>)
 80014fe:	2202      	movs	r2, #2
 8001500:	701a      	strb	r2, [r3, #0]
 8001502:	e00c      	b.n	800151e <main+0x126>
        		   }

        		   else if((button3 == Pressed) && (Record_button ==  Pressed)){
 8001504:	4b4f      	ldr	r3, [pc, #316]	; (8001644 <main+0x24c>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b01      	cmp	r3, #1
 800150c:	d107      	bne.n	800151e <main+0x126>
 800150e:	4b4b      	ldr	r3, [pc, #300]	; (800163c <main+0x244>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b01      	cmp	r3, #1
 8001516:	d102      	bne.n	800151e <main+0x126>
        			   state = AUDIO_MODE_RECORDING_3;
 8001518:	4b46      	ldr	r3, [pc, #280]	; (8001634 <main+0x23c>)
 800151a:	2203      	movs	r2, #3
 800151c:	701a      	strb	r2, [r3, #0]
        	   //}

                //HAL_Delay(2);

        	   //Playback check:
        	   if((button1 == Pressed)  && (Record_button ==  Released)){
 800151e:	4b46      	ldr	r3, [pc, #280]	; (8001638 <main+0x240>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	b2db      	uxtb	r3, r3
 8001524:	2b01      	cmp	r3, #1
 8001526:	d10b      	bne.n	8001540 <main+0x148>
 8001528:	4b44      	ldr	r3, [pc, #272]	; (800163c <main+0x244>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d106      	bne.n	8001540 <main+0x148>

        		   buttn = 1;
 8001532:	4b45      	ldr	r3, [pc, #276]	; (8001648 <main+0x250>)
 8001534:	2201      	movs	r2, #1
 8001536:	701a      	strb	r2, [r3, #0]
        		   state = AUDIO_MODE_PLAYING_1;
 8001538:	4b3e      	ldr	r3, [pc, #248]	; (8001634 <main+0x23c>)
 800153a:	2204      	movs	r2, #4
 800153c:	701a      	strb	r2, [r3, #0]
 800153e:	e021      	b.n	8001584 <main+0x18c>

        	   }

        	   else if((button2 == Pressed)  && (Record_button ==  Released)){
 8001540:	4b3f      	ldr	r3, [pc, #252]	; (8001640 <main+0x248>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b01      	cmp	r3, #1
 8001548:	d10b      	bne.n	8001562 <main+0x16a>
 800154a:	4b3c      	ldr	r3, [pc, #240]	; (800163c <main+0x244>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2b00      	cmp	r3, #0
 8001552:	d106      	bne.n	8001562 <main+0x16a>

        		   buttn = 2;
 8001554:	4b3c      	ldr	r3, [pc, #240]	; (8001648 <main+0x250>)
 8001556:	2202      	movs	r2, #2
 8001558:	701a      	strb	r2, [r3, #0]
        		   state = AUDIO_MODE_PLAYING_2;
 800155a:	4b36      	ldr	r3, [pc, #216]	; (8001634 <main+0x23c>)
 800155c:	2205      	movs	r2, #5
 800155e:	701a      	strb	r2, [r3, #0]
 8001560:	e010      	b.n	8001584 <main+0x18c>

        	   }

        	   else if((button3 == Pressed)  && (Record_button ==  Released)){
 8001562:	4b38      	ldr	r3, [pc, #224]	; (8001644 <main+0x24c>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b01      	cmp	r3, #1
 800156a:	d14e      	bne.n	800160a <main+0x212>
 800156c:	4b33      	ldr	r3, [pc, #204]	; (800163c <main+0x244>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b00      	cmp	r3, #0
 8001574:	d149      	bne.n	800160a <main+0x212>

        		   buttn = 3;
 8001576:	4b34      	ldr	r3, [pc, #208]	; (8001648 <main+0x250>)
 8001578:	2203      	movs	r2, #3
 800157a:	701a      	strb	r2, [r3, #0]
        		   state = AUDIO_MODE_PLAYING_3;
 800157c:	4b2d      	ldr	r3, [pc, #180]	; (8001634 <main+0x23c>)
 800157e:	2206      	movs	r2, #6
 8001580:	701a      	strb	r2, [r3, #0]

        	   }

		       break;
 8001582:	e042      	b.n	800160a <main+0x212>
 8001584:	e041      	b.n	800160a <main+0x212>

           case AUDIO_MODE_RECORDING_1:

        	   uart_transmit_record(1);
 8001586:	2001      	movs	r0, #1
 8001588:	f7ff fc0c 	bl	8000da4 <uart_transmit_record>
        	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800158c:	2201      	movs	r2, #1
 800158e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001592:	482e      	ldr	r0, [pc, #184]	; (800164c <main+0x254>)
 8001594:	f002 fba2 	bl	8003cdc <HAL_GPIO_WritePin>
        	   led_flicker(GPIOA, GPIO_PIN_7);
 8001598:	2180      	movs	r1, #128	; 0x80
 800159a:	482c      	ldr	r0, [pc, #176]	; (800164c <main+0x254>)
 800159c:	f7ff fbd0 	bl	8000d40 <led_flicker>

		       break;
 80015a0:	e034      	b.n	800160c <main+0x214>

           case AUDIO_MODE_RECORDING_2:

        	   uart_transmit_record(2);
 80015a2:	2002      	movs	r0, #2
 80015a4:	f7ff fbfe 	bl	8000da4 <uart_transmit_record>
        	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80015a8:	2201      	movs	r2, #1
 80015aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015ae:	4827      	ldr	r0, [pc, #156]	; (800164c <main+0x254>)
 80015b0:	f002 fb94 	bl	8003cdc <HAL_GPIO_WritePin>
        	   led_flicker(GPIOB, GPIO_PIN_6);
 80015b4:	2140      	movs	r1, #64	; 0x40
 80015b6:	4826      	ldr	r0, [pc, #152]	; (8001650 <main+0x258>)
 80015b8:	f7ff fbc2 	bl	8000d40 <led_flicker>

		       break;
 80015bc:	e026      	b.n	800160c <main+0x214>

           case AUDIO_MODE_RECORDING_3:

        	   uart_transmit_record(3);
 80015be:	2003      	movs	r0, #3
 80015c0:	f7ff fbf0 	bl	8000da4 <uart_transmit_record>
        	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80015c4:	2201      	movs	r2, #1
 80015c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015ca:	4820      	ldr	r0, [pc, #128]	; (800164c <main+0x254>)
 80015cc:	f002 fb86 	bl	8003cdc <HAL_GPIO_WritePin>
        	   led_flicker(GPIOC, GPIO_PIN_7);
 80015d0:	2180      	movs	r1, #128	; 0x80
 80015d2:	4820      	ldr	r0, [pc, #128]	; (8001654 <main+0x25c>)
 80015d4:	f7ff fbb4 	bl	8000d40 <led_flicker>

		       break;
 80015d8:	e018      	b.n	800160c <main+0x214>

           case AUDIO_MODE_PLAYING_1:

        	   uart_transmit_playback(1);
 80015da:	2001      	movs	r0, #1
 80015dc:	f7ff fc42 	bl	8000e64 <uart_transmit_playback>
        	   led_flicker(GPIOA, GPIO_PIN_7);
 80015e0:	2180      	movs	r1, #128	; 0x80
 80015e2:	481a      	ldr	r0, [pc, #104]	; (800164c <main+0x254>)
 80015e4:	f7ff fbac 	bl	8000d40 <led_flicker>

		       break;
 80015e8:	e010      	b.n	800160c <main+0x214>

           case AUDIO_MODE_PLAYING_2:

        	   uart_transmit_playback(2);
 80015ea:	2002      	movs	r0, #2
 80015ec:	f7ff fc3a 	bl	8000e64 <uart_transmit_playback>
        	   led_flicker(GPIOB, GPIO_PIN_6);
 80015f0:	2140      	movs	r1, #64	; 0x40
 80015f2:	4817      	ldr	r0, [pc, #92]	; (8001650 <main+0x258>)
 80015f4:	f7ff fba4 	bl	8000d40 <led_flicker>

		       break;
 80015f8:	e008      	b.n	800160c <main+0x214>

           case AUDIO_MODE_PLAYING_3:

        	   uart_transmit_playback(3);
 80015fa:	2003      	movs	r0, #3
 80015fc:	f7ff fc32 	bl	8000e64 <uart_transmit_playback>
        	   led_flicker(GPIOC, GPIO_PIN_7);
 8001600:	2180      	movs	r1, #128	; 0x80
 8001602:	4814      	ldr	r0, [pc, #80]	; (8001654 <main+0x25c>)
 8001604:	f7ff fb9c 	bl	8000d40 <led_flicker>

		       break;
 8001608:	e000      	b.n	800160c <main+0x214>
		       break;
 800160a:	bf00      	nop
           switch(state){
 800160c:	e748      	b.n	80014a0 <main+0xa8>
 800160e:	bf00      	nop
 8001610:	08007118 	.word	0x08007118
 8001614:	20000880 	.word	0x20000880
 8001618:	20001518 	.word	0x20001518
 800161c:	200010d8 	.word	0x200010d8
 8001620:	20001e80 	.word	0x20001e80
 8001624:	200008c0 	.word	0x200008c0
 8001628:	20000038 	.word	0x20000038
 800162c:	2000155c 	.word	0x2000155c
 8001630:	20000cc0 	.word	0x20000cc0
 8001634:	20000033 	.word	0x20000033
 8001638:	2000002c 	.word	0x2000002c
 800163c:	20001558 	.word	0x20001558
 8001640:	2000002d 	.word	0x2000002d
 8001644:	2000002e 	.word	0x2000002e
 8001648:	20000032 	.word	0x20000032
 800164c:	40020000 	.word	0x40020000
 8001650:	40020400 	.word	0x40020400
 8001654:	40020800 	.word	0x40020800

08001658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b094      	sub	sp, #80	; 0x50
 800165c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800165e:	f107 031c 	add.w	r3, r7, #28
 8001662:	2234      	movs	r2, #52	; 0x34
 8001664:	2100      	movs	r1, #0
 8001666:	4618      	mov	r0, r3
 8001668:	f004 ffcc 	bl	8006604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800166c:	f107 0308 	add.w	r3, r7, #8
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800167c:	2300      	movs	r3, #0
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	4b2a      	ldr	r3, [pc, #168]	; (800172c <SystemClock_Config+0xd4>)
 8001682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001684:	4a29      	ldr	r2, [pc, #164]	; (800172c <SystemClock_Config+0xd4>)
 8001686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800168a:	6413      	str	r3, [r2, #64]	; 0x40
 800168c:	4b27      	ldr	r3, [pc, #156]	; (800172c <SystemClock_Config+0xd4>)
 800168e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001694:	607b      	str	r3, [r7, #4]
 8001696:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001698:	2300      	movs	r3, #0
 800169a:	603b      	str	r3, [r7, #0]
 800169c:	4b24      	ldr	r3, [pc, #144]	; (8001730 <SystemClock_Config+0xd8>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80016a4:	4a22      	ldr	r2, [pc, #136]	; (8001730 <SystemClock_Config+0xd8>)
 80016a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016aa:	6013      	str	r3, [r2, #0]
 80016ac:	4b20      	ldr	r3, [pc, #128]	; (8001730 <SystemClock_Config+0xd8>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016b4:	603b      	str	r3, [r7, #0]
 80016b6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016b8:	2302      	movs	r3, #2
 80016ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016bc:	2301      	movs	r3, #1
 80016be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016c0:	2310      	movs	r3, #16
 80016c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c4:	2302      	movs	r3, #2
 80016c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016c8:	2300      	movs	r3, #0
 80016ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016cc:	2308      	movs	r3, #8
 80016ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80016d0:	2355      	movs	r3, #85	; 0x55
 80016d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016d4:	2302      	movs	r3, #2
 80016d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80016d8:	2302      	movs	r3, #2
 80016da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016dc:	2302      	movs	r3, #2
 80016de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016e0:	f107 031c 	add.w	r3, r7, #28
 80016e4:	4618      	mov	r0, r3
 80016e6:	f002 fde5 	bl	80042b4 <HAL_RCC_OscConfig>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80016f0:	f000 fb22 	bl	8001d38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016f4:	230f      	movs	r3, #15
 80016f6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f8:	2302      	movs	r3, #2
 80016fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016fc:	2300      	movs	r3, #0
 80016fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001704:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001706:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800170a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800170c:	f107 0308 	add.w	r3, r7, #8
 8001710:	2102      	movs	r1, #2
 8001712:	4618      	mov	r0, r3
 8001714:	f002 fb14 	bl	8003d40 <HAL_RCC_ClockConfig>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800171e:	f000 fb0b 	bl	8001d38 <Error_Handler>
  }
}
 8001722:	bf00      	nop
 8001724:	3750      	adds	r7, #80	; 0x50
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40023800 	.word	0x40023800
 8001730:	40007000 	.word	0x40007000

08001734 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800173a:	463b      	mov	r3, r7
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001746:	4b22      	ldr	r3, [pc, #136]	; (80017d0 <MX_ADC2_Init+0x9c>)
 8001748:	4a22      	ldr	r2, [pc, #136]	; (80017d4 <MX_ADC2_Init+0xa0>)
 800174a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800174c:	4b20      	ldr	r3, [pc, #128]	; (80017d0 <MX_ADC2_Init+0x9c>)
 800174e:	2200      	movs	r2, #0
 8001750:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 8001752:	4b1f      	ldr	r3, [pc, #124]	; (80017d0 <MX_ADC2_Init+0x9c>)
 8001754:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001758:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800175a:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <MX_ADC2_Init+0x9c>)
 800175c:	2200      	movs	r2, #0
 800175e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001760:	4b1b      	ldr	r3, [pc, #108]	; (80017d0 <MX_ADC2_Init+0x9c>)
 8001762:	2200      	movs	r2, #0
 8001764:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001766:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <MX_ADC2_Init+0x9c>)
 8001768:	2200      	movs	r2, #0
 800176a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800176e:	4b18      	ldr	r3, [pc, #96]	; (80017d0 <MX_ADC2_Init+0x9c>)
 8001770:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001774:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001776:	4b16      	ldr	r3, [pc, #88]	; (80017d0 <MX_ADC2_Init+0x9c>)
 8001778:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800177c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800177e:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <MX_ADC2_Init+0x9c>)
 8001780:	2200      	movs	r2, #0
 8001782:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <MX_ADC2_Init+0x9c>)
 8001786:	2201      	movs	r2, #1
 8001788:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800178a:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <MX_ADC2_Init+0x9c>)
 800178c:	2201      	movs	r2, #1
 800178e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001792:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <MX_ADC2_Init+0x9c>)
 8001794:	2201      	movs	r2, #1
 8001796:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001798:	480d      	ldr	r0, [pc, #52]	; (80017d0 <MX_ADC2_Init+0x9c>)
 800179a:	f000 feb1 	bl	8002500 <HAL_ADC_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 80017a4:	f000 fac8 	bl	8001d38 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80017a8:	230f      	movs	r3, #15
 80017aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80017ac:	2301      	movs	r3, #1
 80017ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017b4:	463b      	mov	r3, r7
 80017b6:	4619      	mov	r1, r3
 80017b8:	4805      	ldr	r0, [pc, #20]	; (80017d0 <MX_ADC2_Init+0x9c>)
 80017ba:	f000 ffe1 	bl	8002780 <HAL_ADC_ConfigChannel>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 80017c4:	f000 fab8 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80017c8:	bf00      	nop
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20000038 	.word	0x20000038
 80017d4:	40012100 	.word	0x40012100

080017d8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80017de:	463b      	mov	r3, r7
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80017e6:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <MX_DAC_Init+0x4c>)
 80017e8:	4a0f      	ldr	r2, [pc, #60]	; (8001828 <MX_DAC_Init+0x50>)
 80017ea:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80017ec:	480d      	ldr	r0, [pc, #52]	; (8001824 <MX_DAC_Init+0x4c>)
 80017ee:	f001 fb88 	bl	8002f02 <HAL_DAC_Init>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80017f8:	f000 fa9e 	bl	8001d38 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80017fc:	2304      	movs	r3, #4
 80017fe:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001800:	2300      	movs	r3, #0
 8001802:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001804:	463b      	mov	r3, r7
 8001806:	2200      	movs	r2, #0
 8001808:	4619      	mov	r1, r3
 800180a:	4806      	ldr	r0, [pc, #24]	; (8001824 <MX_DAC_Init+0x4c>)
 800180c:	f001 fc54 	bl	80030b8 <HAL_DAC_ConfigChannel>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001816:	f000 fa8f 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000cc0 	.word	0x20000cc0
 8001828:	40007400 	.word	0x40007400

0800182c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001830:	4b17      	ldr	r3, [pc, #92]	; (8001890 <MX_SPI1_Init+0x64>)
 8001832:	4a18      	ldr	r2, [pc, #96]	; (8001894 <MX_SPI1_Init+0x68>)
 8001834:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001836:	4b16      	ldr	r3, [pc, #88]	; (8001890 <MX_SPI1_Init+0x64>)
 8001838:	f44f 7282 	mov.w	r2, #260	; 0x104
 800183c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800183e:	4b14      	ldr	r3, [pc, #80]	; (8001890 <MX_SPI1_Init+0x64>)
 8001840:	2200      	movs	r2, #0
 8001842:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <MX_SPI1_Init+0x64>)
 8001846:	2200      	movs	r2, #0
 8001848:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800184a:	4b11      	ldr	r3, [pc, #68]	; (8001890 <MX_SPI1_Init+0x64>)
 800184c:	2200      	movs	r2, #0
 800184e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001850:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <MX_SPI1_Init+0x64>)
 8001852:	2200      	movs	r2, #0
 8001854:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001856:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <MX_SPI1_Init+0x64>)
 8001858:	f44f 7200 	mov.w	r2, #512	; 0x200
 800185c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800185e:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <MX_SPI1_Init+0x64>)
 8001860:	2200      	movs	r2, #0
 8001862:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001864:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <MX_SPI1_Init+0x64>)
 8001866:	2200      	movs	r2, #0
 8001868:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800186a:	4b09      	ldr	r3, [pc, #36]	; (8001890 <MX_SPI1_Init+0x64>)
 800186c:	2200      	movs	r2, #0
 800186e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001870:	4b07      	ldr	r3, [pc, #28]	; (8001890 <MX_SPI1_Init+0x64>)
 8001872:	2200      	movs	r2, #0
 8001874:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001876:	4b06      	ldr	r3, [pc, #24]	; (8001890 <MX_SPI1_Init+0x64>)
 8001878:	220a      	movs	r2, #10
 800187a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800187c:	4804      	ldr	r0, [pc, #16]	; (8001890 <MX_SPI1_Init+0x64>)
 800187e:	f002 ff73 	bl	8004768 <HAL_SPI_Init>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001888:	f000 fa56 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20001e28 	.word	0x20001e28
 8001894:	40013000 	.word	0x40013000

08001898 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08a      	sub	sp, #40	; 0x28
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800189e:	f107 0318 	add.w	r3, r7, #24
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	609a      	str	r2, [r3, #8]
 80018aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ac:	f107 0310 	add.w	r3, r7, #16
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80018b6:	463b      	mov	r3, r7
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018c2:	4b31      	ldr	r3, [pc, #196]	; (8001988 <MX_TIM2_Init+0xf0>)
 80018c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80018ca:	4b2f      	ldr	r3, [pc, #188]	; (8001988 <MX_TIM2_Init+0xf0>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d0:	4b2d      	ldr	r3, [pc, #180]	; (8001988 <MX_TIM2_Init+0xf0>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1926;
 80018d6:	4b2c      	ldr	r3, [pc, #176]	; (8001988 <MX_TIM2_Init+0xf0>)
 80018d8:	f240 7286 	movw	r2, #1926	; 0x786
 80018dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018de:	4b2a      	ldr	r3, [pc, #168]	; (8001988 <MX_TIM2_Init+0xf0>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e4:	4b28      	ldr	r3, [pc, #160]	; (8001988 <MX_TIM2_Init+0xf0>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018ea:	4827      	ldr	r0, [pc, #156]	; (8001988 <MX_TIM2_Init+0xf0>)
 80018ec:	f002 ffa0 	bl	8004830 <HAL_TIM_Base_Init>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80018f6:	f000 fa1f 	bl	8001d38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018fe:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001900:	f107 0318 	add.w	r3, r7, #24
 8001904:	4619      	mov	r1, r3
 8001906:	4820      	ldr	r0, [pc, #128]	; (8001988 <MX_TIM2_Init+0xf0>)
 8001908:	f003 f9ba 	bl	8004c80 <HAL_TIM_ConfigClockSource>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001912:	f000 fa11 	bl	8001d38 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001916:	481c      	ldr	r0, [pc, #112]	; (8001988 <MX_TIM2_Init+0xf0>)
 8001918:	f002 ffd9 	bl	80048ce <HAL_TIM_IC_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001922:	f000 fa09 	bl	8001d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001926:	2320      	movs	r3, #32
 8001928:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800192e:	f107 0310 	add.w	r3, r7, #16
 8001932:	4619      	mov	r1, r3
 8001934:	4814      	ldr	r0, [pc, #80]	; (8001988 <MX_TIM2_Init+0xf0>)
 8001936:	f003 fdb9 	bl	80054ac <HAL_TIMEx_MasterConfigSynchronization>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001940:	f000 f9fa 	bl	8001d38 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001944:	2300      	movs	r3, #0
 8001946:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001948:	2301      	movs	r3, #1
 800194a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800194c:	2300      	movs	r3, #0
 800194e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001950:	2300      	movs	r3, #0
 8001952:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001954:	463b      	mov	r3, r7
 8001956:	2200      	movs	r2, #0
 8001958:	4619      	mov	r1, r3
 800195a:	480b      	ldr	r0, [pc, #44]	; (8001988 <MX_TIM2_Init+0xf0>)
 800195c:	f003 f8f4 	bl	8004b48 <HAL_TIM_IC_ConfigChannel>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001966:	f000 f9e7 	bl	8001d38 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800196a:	463b      	mov	r3, r7
 800196c:	2204      	movs	r2, #4
 800196e:	4619      	mov	r1, r3
 8001970:	4805      	ldr	r0, [pc, #20]	; (8001988 <MX_TIM2_Init+0xf0>)
 8001972:	f003 f8e9 	bl	8004b48 <HAL_TIM_IC_ConfigChannel>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 800197c:	f000 f9dc 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001980:	bf00      	nop
 8001982:	3728      	adds	r7, #40	; 0x28
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20001e80 	.word	0x20001e80

0800198c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08c      	sub	sp, #48	; 0x30
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001992:	f107 0320 	add.w	r3, r7, #32
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	609a      	str	r2, [r3, #8]
 800199e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80019a0:	f107 030c 	add.w	r3, r7, #12
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b0:	1d3b      	adds	r3, r7, #4
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019b8:	4b25      	ldr	r3, [pc, #148]	; (8001a50 <MX_TIM3_Init+0xc4>)
 80019ba:	4a26      	ldr	r2, [pc, #152]	; (8001a54 <MX_TIM3_Init+0xc8>)
 80019bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4968;
 80019be:	4b24      	ldr	r3, [pc, #144]	; (8001a50 <MX_TIM3_Init+0xc4>)
 80019c0:	f241 3268 	movw	r2, #4968	; 0x1368
 80019c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019c6:	4b22      	ldr	r3, [pc, #136]	; (8001a50 <MX_TIM3_Init+0xc4>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4277;
 80019cc:	4b20      	ldr	r3, [pc, #128]	; (8001a50 <MX_TIM3_Init+0xc4>)
 80019ce:	f241 02b5 	movw	r2, #4277	; 0x10b5
 80019d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019d4:	4b1e      	ldr	r3, [pc, #120]	; (8001a50 <MX_TIM3_Init+0xc4>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019da:	4b1d      	ldr	r3, [pc, #116]	; (8001a50 <MX_TIM3_Init+0xc4>)
 80019dc:	2200      	movs	r2, #0
 80019de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019e0:	481b      	ldr	r0, [pc, #108]	; (8001a50 <MX_TIM3_Init+0xc4>)
 80019e2:	f002 ff25 	bl	8004830 <HAL_TIM_Base_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80019ec:	f000 f9a4 	bl	8001d38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019f4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019f6:	f107 0320 	add.w	r3, r7, #32
 80019fa:	4619      	mov	r1, r3
 80019fc:	4814      	ldr	r0, [pc, #80]	; (8001a50 <MX_TIM3_Init+0xc4>)
 80019fe:	f003 f93f 	bl	8004c80 <HAL_TIM_ConfigClockSource>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001a08:	f000 f996 	bl	8001d38 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001a14:	f107 030c 	add.w	r3, r7, #12
 8001a18:	4619      	mov	r1, r3
 8001a1a:	480d      	ldr	r0, [pc, #52]	; (8001a50 <MX_TIM3_Init+0xc4>)
 8001a1c:	f003 f9e7 	bl	8004dee <HAL_TIM_SlaveConfigSynchro>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001a26:	f000 f987 	bl	8001d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a2a:	2320      	movs	r3, #32
 8001a2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a32:	1d3b      	adds	r3, r7, #4
 8001a34:	4619      	mov	r1, r3
 8001a36:	4806      	ldr	r0, [pc, #24]	; (8001a50 <MX_TIM3_Init+0xc4>)
 8001a38:	f003 fd38 	bl	80054ac <HAL_TIMEx_MasterConfigSynchronization>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8001a42:	f000 f979 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a46:	bf00      	nop
 8001a48:	3730      	adds	r7, #48	; 0x30
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000880 	.word	0x20000880
 8001a54:	40000400 	.word	0x40000400

08001a58 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a5e:	463b      	mov	r3, r7
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001a66:	4b15      	ldr	r3, [pc, #84]	; (8001abc <MX_TIM6_Init+0x64>)
 8001a68:	4a15      	ldr	r2, [pc, #84]	; (8001ac0 <MX_TIM6_Init+0x68>)
 8001a6a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001a6c:	4b13      	ldr	r3, [pc, #76]	; (8001abc <MX_TIM6_Init+0x64>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a72:	4b12      	ldr	r3, [pc, #72]	; (8001abc <MX_TIM6_Init+0x64>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1926;
 8001a78:	4b10      	ldr	r3, [pc, #64]	; (8001abc <MX_TIM6_Init+0x64>)
 8001a7a:	f240 7286 	movw	r2, #1926	; 0x786
 8001a7e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a80:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <MX_TIM6_Init+0x64>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001a86:	480d      	ldr	r0, [pc, #52]	; (8001abc <MX_TIM6_Init+0x64>)
 8001a88:	f002 fed2 	bl	8004830 <HAL_TIM_Base_Init>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001a92:	f000 f951 	bl	8001d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a96:	2320      	movs	r3, #32
 8001a98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001a9e:	463b      	mov	r3, r7
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4806      	ldr	r0, [pc, #24]	; (8001abc <MX_TIM6_Init+0x64>)
 8001aa4:	f003 fd02 	bl	80054ac <HAL_TIMEx_MasterConfigSynchronization>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001aae:	f000 f943 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	200010d8 	.word	0x200010d8
 8001ac0:	40001000 	.word	0x40001000

08001ac4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ac8:	4b10      	ldr	r3, [pc, #64]	; (8001b0c <MX_USART2_UART_Init+0x48>)
 8001aca:	4a11      	ldr	r2, [pc, #68]	; (8001b10 <MX_USART2_UART_Init+0x4c>)
 8001acc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 500000;
 8001ace:	4b0f      	ldr	r3, [pc, #60]	; (8001b0c <MX_USART2_UART_Init+0x48>)
 8001ad0:	4a10      	ldr	r2, [pc, #64]	; (8001b14 <MX_USART2_UART_Init+0x50>)
 8001ad2:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ad4:	4b0d      	ldr	r3, [pc, #52]	; (8001b0c <MX_USART2_UART_Init+0x48>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ada:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <MX_USART2_UART_Init+0x48>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ae0:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <MX_USART2_UART_Init+0x48>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ae6:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <MX_USART2_UART_Init+0x48>)
 8001ae8:	220c      	movs	r2, #12
 8001aea:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aec:	4b07      	ldr	r3, [pc, #28]	; (8001b0c <MX_USART2_UART_Init+0x48>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001af2:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <MX_USART2_UART_Init+0x48>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001af8:	4804      	ldr	r0, [pc, #16]	; (8001b0c <MX_USART2_UART_Init+0x48>)
 8001afa:	f003 fd67 	bl	80055cc <HAL_UART_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8001b04:	f000 f918 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b08:	bf00      	nop
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20001518 	.word	0x20001518
 8001b10:	40004400 	.word	0x40004400
 8001b14:	0007a120 	.word	0x0007a120

08001b18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	607b      	str	r3, [r7, #4]
 8001b22:	4b1b      	ldr	r3, [pc, #108]	; (8001b90 <MX_DMA_Init+0x78>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	4a1a      	ldr	r2, [pc, #104]	; (8001b90 <MX_DMA_Init+0x78>)
 8001b28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2e:	4b18      	ldr	r3, [pc, #96]	; (8001b90 <MX_DMA_Init+0x78>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b36:	607b      	str	r3, [r7, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	603b      	str	r3, [r7, #0]
 8001b3e:	4b14      	ldr	r3, [pc, #80]	; (8001b90 <MX_DMA_Init+0x78>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	4a13      	ldr	r2, [pc, #76]	; (8001b90 <MX_DMA_Init+0x78>)
 8001b44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b48:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4a:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <MX_DMA_Init+0x78>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b52:	603b      	str	r3, [r7, #0]
 8001b54:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001b56:	2200      	movs	r2, #0
 8001b58:	2100      	movs	r1, #0
 8001b5a:	2010      	movs	r0, #16
 8001b5c:	f001 f99b 	bl	8002e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001b60:	2010      	movs	r0, #16
 8001b62:	f001 f9b4 	bl	8002ece <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001b66:	2200      	movs	r2, #0
 8001b68:	2100      	movs	r1, #0
 8001b6a:	2011      	movs	r0, #17
 8001b6c:	f001 f993 	bl	8002e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001b70:	2011      	movs	r0, #17
 8001b72:	f001 f9ac 	bl	8002ece <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001b76:	2200      	movs	r2, #0
 8001b78:	2100      	movs	r1, #0
 8001b7a:	203a      	movs	r0, #58	; 0x3a
 8001b7c:	f001 f98b 	bl	8002e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001b80:	203a      	movs	r0, #58	; 0x3a
 8001b82:	f001 f9a4 	bl	8002ece <HAL_NVIC_EnableIRQ>

}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40023800 	.word	0x40023800

08001b94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08a      	sub	sp, #40	; 0x28
 8001b98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9a:	f107 0314 	add.w	r3, r7, #20
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	605a      	str	r2, [r3, #4]
 8001ba4:	609a      	str	r2, [r3, #8]
 8001ba6:	60da      	str	r2, [r3, #12]
 8001ba8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	613b      	str	r3, [r7, #16]
 8001bae:	4b5c      	ldr	r3, [pc, #368]	; (8001d20 <MX_GPIO_Init+0x18c>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	4a5b      	ldr	r2, [pc, #364]	; (8001d20 <MX_GPIO_Init+0x18c>)
 8001bb4:	f043 0304 	orr.w	r3, r3, #4
 8001bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bba:	4b59      	ldr	r3, [pc, #356]	; (8001d20 <MX_GPIO_Init+0x18c>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	f003 0304 	and.w	r3, r3, #4
 8001bc2:	613b      	str	r3, [r7, #16]
 8001bc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	4b55      	ldr	r3, [pc, #340]	; (8001d20 <MX_GPIO_Init+0x18c>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	4a54      	ldr	r2, [pc, #336]	; (8001d20 <MX_GPIO_Init+0x18c>)
 8001bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd6:	4b52      	ldr	r3, [pc, #328]	; (8001d20 <MX_GPIO_Init+0x18c>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	4b4e      	ldr	r3, [pc, #312]	; (8001d20 <MX_GPIO_Init+0x18c>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	4a4d      	ldr	r2, [pc, #308]	; (8001d20 <MX_GPIO_Init+0x18c>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf2:	4b4b      	ldr	r3, [pc, #300]	; (8001d20 <MX_GPIO_Init+0x18c>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	607b      	str	r3, [r7, #4]
 8001c02:	4b47      	ldr	r3, [pc, #284]	; (8001d20 <MX_GPIO_Init+0x18c>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a46      	ldr	r2, [pc, #280]	; (8001d20 <MX_GPIO_Init+0x18c>)
 8001c08:	f043 0302 	orr.w	r3, r3, #2
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b44      	ldr	r3, [pc, #272]	; (8001d20 <MX_GPIO_Init+0x18c>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	607b      	str	r3, [r7, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8001c20:	4840      	ldr	r0, [pc, #256]	; (8001d24 <MX_GPIO_Init+0x190>)
 8001c22:	f002 f85b 	bl	8003cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_6, GPIO_PIN_RESET);
 8001c26:	2200      	movs	r2, #0
 8001c28:	2141      	movs	r1, #65	; 0x41
 8001c2a:	483f      	ldr	r0, [pc, #252]	; (8001d28 <MX_GPIO_Init+0x194>)
 8001c2c:	f002 f856 	bl	8003cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001c30:	2200      	movs	r2, #0
 8001c32:	2180      	movs	r1, #128	; 0x80
 8001c34:	483d      	ldr	r0, [pc, #244]	; (8001d2c <MX_GPIO_Init+0x198>)
 8001c36:	f002 f851 	bl	8003cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c40:	4b3b      	ldr	r3, [pc, #236]	; (8001d30 <MX_GPIO_Init+0x19c>)
 8001c42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4837      	ldr	r0, [pc, #220]	; (8001d2c <MX_GPIO_Init+0x198>)
 8001c50:	f001 fe9a 	bl	8003988 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_3_Pin Button_2_Pin */
  GPIO_InitStruct.Pin = Button_3_Pin|Button_2_Pin;
 8001c54:	2360      	movs	r3, #96	; 0x60
 8001c56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c58:	4b35      	ldr	r3, [pc, #212]	; (8001d30 <MX_GPIO_Init+0x19c>)
 8001c5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	4619      	mov	r1, r3
 8001c66:	482f      	ldr	r0, [pc, #188]	; (8001d24 <MX_GPIO_Init+0x190>)
 8001c68:	f001 fe8e 	bl	8003988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001c6c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001c70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c72:	2301      	movs	r3, #1
 8001c74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7e:	f107 0314 	add.w	r3, r7, #20
 8001c82:	4619      	mov	r1, r3
 8001c84:	4827      	ldr	r0, [pc, #156]	; (8001d24 <MX_GPIO_Init+0x190>)
 8001c86:	f001 fe7f 	bl	8003988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6;
 8001c8a:	2341      	movs	r3, #65	; 0x41
 8001c8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c96:	2300      	movs	r3, #0
 8001c98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c9a:	f107 0314 	add.w	r3, r7, #20
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4821      	ldr	r0, [pc, #132]	; (8001d28 <MX_GPIO_Init+0x194>)
 8001ca2:	f001 fe71 	bl	8003988 <HAL_GPIO_Init>

  /*Configure GPIO pin : Record_button_Pin */
  GPIO_InitStruct.Pin = Record_button_Pin;
 8001ca6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001caa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001cac:	4b21      	ldr	r3, [pc, #132]	; (8001d34 <MX_GPIO_Init+0x1a0>)
 8001cae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Record_button_GPIO_Port, &GPIO_InitStruct);
 8001cb4:	f107 0314 	add.w	r3, r7, #20
 8001cb8:	4619      	mov	r1, r3
 8001cba:	481b      	ldr	r0, [pc, #108]	; (8001d28 <MX_GPIO_Init+0x194>)
 8001cbc:	f001 fe64 	bl	8003988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001cc0:	2380      	movs	r3, #128	; 0x80
 8001cc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4815      	ldr	r0, [pc, #84]	; (8001d2c <MX_GPIO_Init+0x198>)
 8001cd8:	f001 fe56 	bl	8003988 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_1_Pin Stop_button_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin|Stop_button_Pin;
 8001cdc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ce0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ce2:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <MX_GPIO_Init+0x19c>)
 8001ce4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cea:	f107 0314 	add.w	r3, r7, #20
 8001cee:	4619      	mov	r1, r3
 8001cf0:	480d      	ldr	r0, [pc, #52]	; (8001d28 <MX_GPIO_Init+0x194>)
 8001cf2:	f001 fe49 	bl	8003988 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	2017      	movs	r0, #23
 8001cfc:	f001 f8cb 	bl	8002e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d00:	2017      	movs	r0, #23
 8001d02:	f001 f8e4 	bl	8002ece <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d06:	2200      	movs	r2, #0
 8001d08:	2100      	movs	r1, #0
 8001d0a:	2028      	movs	r0, #40	; 0x28
 8001d0c:	f001 f8c3 	bl	8002e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d10:	2028      	movs	r0, #40	; 0x28
 8001d12:	f001 f8dc 	bl	8002ece <HAL_NVIC_EnableIRQ>

}
 8001d16:	bf00      	nop
 8001d18:	3728      	adds	r7, #40	; 0x28
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40020000 	.word	0x40020000
 8001d28:	40020400 	.word	0x40020400
 8001d2c:	40020800 	.word	0x40020800
 8001d30:	10210000 	.word	0x10210000
 8001d34:	10310000 	.word	0x10310000

08001d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
	...

08001d48 <wave_init>:
int16_t sintab[256];
uint16_t offset_440hz;
uint16_t offset_523hz;

void wave_init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 256; i++)
 8001d4e:	2300      	movs	r3, #0
 8001d50:	607b      	str	r3, [r7, #4]
 8001d52:	e01e      	b.n	8001d92 <wave_init+0x4a>
		sintab[i] = (int) (700.0f * sinf(i * 0.02454369261f));
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	ee07 3a90 	vmov	s15, r3
 8001d5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d5e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001dac <wave_init+0x64>
 8001d62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d66:	eeb0 0a67 	vmov.f32	s0, s15
 8001d6a:	f004 fc53 	bl	8006614 <sinf>
 8001d6e:	eeb0 7a40 	vmov.f32	s14, s0
 8001d72:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8001db0 <wave_init+0x68>
 8001d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d7e:	ee17 3a90 	vmov	r3, s15
 8001d82:	b219      	sxth	r1, r3
 8001d84:	4a0b      	ldr	r2, [pc, #44]	; (8001db4 <wave_init+0x6c>)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 256; i++)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	607b      	str	r3, [r7, #4]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2bff      	cmp	r3, #255	; 0xff
 8001d96:	dddd      	ble.n	8001d54 <wave_init+0xc>

	offset_440hz = 0;
 8001d98:	4b07      	ldr	r3, [pc, #28]	; (8001db8 <wave_init+0x70>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	801a      	strh	r2, [r3, #0]
	offset_523hz = 0;
 8001d9e:	4b07      	ldr	r3, [pc, #28]	; (8001dbc <wave_init+0x74>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	801a      	strh	r2, [r3, #0]
}
 8001da4:	bf00      	nop
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	3cc90fdb 	.word	0x3cc90fdb
 8001db0:	442f0000 	.word	0x442f0000
 8001db4:	20001f28 	.word	0x20001f28
 8001db8:	20001f26 	.word	0x20001f26
 8001dbc:	20001f24 	.word	0x20001f24

08001dc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	607b      	str	r3, [r7, #4]
 8001dca:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <HAL_MspInit+0x4c>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	4a0f      	ldr	r2, [pc, #60]	; (8001e0c <HAL_MspInit+0x4c>)
 8001dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001dd6:	4b0d      	ldr	r3, [pc, #52]	; (8001e0c <HAL_MspInit+0x4c>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dde:	607b      	str	r3, [r7, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	603b      	str	r3, [r7, #0]
 8001de6:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <HAL_MspInit+0x4c>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	4a08      	ldr	r2, [pc, #32]	; (8001e0c <HAL_MspInit+0x4c>)
 8001dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df0:	6413      	str	r3, [r2, #64]	; 0x40
 8001df2:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <HAL_MspInit+0x4c>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	603b      	str	r3, [r7, #0]
 8001dfc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001dfe:	2007      	movs	r0, #7
 8001e00:	f001 f83e 	bl	8002e80 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e04:	bf00      	nop
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40023800 	.word	0x40023800

08001e10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08a      	sub	sp, #40	; 0x28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	60da      	str	r2, [r3, #12]
 8001e26:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a2e      	ldr	r2, [pc, #184]	; (8001ee8 <HAL_ADC_MspInit+0xd8>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d156      	bne.n	8001ee0 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	613b      	str	r3, [r7, #16]
 8001e36:	4b2d      	ldr	r3, [pc, #180]	; (8001eec <HAL_ADC_MspInit+0xdc>)
 8001e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3a:	4a2c      	ldr	r2, [pc, #176]	; (8001eec <HAL_ADC_MspInit+0xdc>)
 8001e3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e40:	6453      	str	r3, [r2, #68]	; 0x44
 8001e42:	4b2a      	ldr	r3, [pc, #168]	; (8001eec <HAL_ADC_MspInit+0xdc>)
 8001e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e4a:	613b      	str	r3, [r7, #16]
 8001e4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	4b26      	ldr	r3, [pc, #152]	; (8001eec <HAL_ADC_MspInit+0xdc>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	4a25      	ldr	r2, [pc, #148]	; (8001eec <HAL_ADC_MspInit+0xdc>)
 8001e58:	f043 0304 	orr.w	r3, r3, #4
 8001e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5e:	4b23      	ldr	r3, [pc, #140]	; (8001eec <HAL_ADC_MspInit+0xdc>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PC5     ------> ADC2_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e6a:	2320      	movs	r3, #32
 8001e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e76:	f107 0314 	add.w	r3, r7, #20
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	481c      	ldr	r0, [pc, #112]	; (8001ef0 <HAL_ADC_MspInit+0xe0>)
 8001e7e:	f001 fd83 	bl	8003988 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8001e82:	4b1c      	ldr	r3, [pc, #112]	; (8001ef4 <HAL_ADC_MspInit+0xe4>)
 8001e84:	4a1c      	ldr	r2, [pc, #112]	; (8001ef8 <HAL_ADC_MspInit+0xe8>)
 8001e86:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8001e88:	4b1a      	ldr	r3, [pc, #104]	; (8001ef4 <HAL_ADC_MspInit+0xe4>)
 8001e8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e8e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e90:	4b18      	ldr	r3, [pc, #96]	; (8001ef4 <HAL_ADC_MspInit+0xe4>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e96:	4b17      	ldr	r3, [pc, #92]	; (8001ef4 <HAL_ADC_MspInit+0xe4>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001e9c:	4b15      	ldr	r3, [pc, #84]	; (8001ef4 <HAL_ADC_MspInit+0xe4>)
 8001e9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ea2:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ea4:	4b13      	ldr	r3, [pc, #76]	; (8001ef4 <HAL_ADC_MspInit+0xe4>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001eaa:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <HAL_ADC_MspInit+0xe4>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001eb0:	4b10      	ldr	r3, [pc, #64]	; (8001ef4 <HAL_ADC_MspInit+0xe4>)
 8001eb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eb6:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001eb8:	4b0e      	ldr	r3, [pc, #56]	; (8001ef4 <HAL_ADC_MspInit+0xe4>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ebe:	4b0d      	ldr	r3, [pc, #52]	; (8001ef4 <HAL_ADC_MspInit+0xe4>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001ec4:	480b      	ldr	r0, [pc, #44]	; (8001ef4 <HAL_ADC_MspInit+0xe4>)
 8001ec6:	f001 f9cf 	bl	8003268 <HAL_DMA_Init>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001ed0:	f7ff ff32 	bl	8001d38 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a07      	ldr	r2, [pc, #28]	; (8001ef4 <HAL_ADC_MspInit+0xe4>)
 8001ed8:	639a      	str	r2, [r3, #56]	; 0x38
 8001eda:	4a06      	ldr	r2, [pc, #24]	; (8001ef4 <HAL_ADC_MspInit+0xe4>)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001ee0:	bf00      	nop
 8001ee2:	3728      	adds	r7, #40	; 0x28
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40012100 	.word	0x40012100
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40020800 	.word	0x40020800
 8001ef4:	20001ec0 	.word	0x20001ec0
 8001ef8:	40026440 	.word	0x40026440

08001efc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08a      	sub	sp, #40	; 0x28
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f04:	f107 0314 	add.w	r3, r7, #20
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	60da      	str	r2, [r3, #12]
 8001f12:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a2f      	ldr	r2, [pc, #188]	; (8001fd8 <HAL_DAC_MspInit+0xdc>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d158      	bne.n	8001fd0 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	4b2e      	ldr	r3, [pc, #184]	; (8001fdc <HAL_DAC_MspInit+0xe0>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	4a2d      	ldr	r2, [pc, #180]	; (8001fdc <HAL_DAC_MspInit+0xe0>)
 8001f28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f2e:	4b2b      	ldr	r3, [pc, #172]	; (8001fdc <HAL_DAC_MspInit+0xe0>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f36:	613b      	str	r3, [r7, #16]
 8001f38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	4b27      	ldr	r3, [pc, #156]	; (8001fdc <HAL_DAC_MspInit+0xe0>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	4a26      	ldr	r2, [pc, #152]	; (8001fdc <HAL_DAC_MspInit+0xe0>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4a:	4b24      	ldr	r3, [pc, #144]	; (8001fdc <HAL_DAC_MspInit+0xe0>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f56:	2310      	movs	r3, #16
 8001f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f62:	f107 0314 	add.w	r3, r7, #20
 8001f66:	4619      	mov	r1, r3
 8001f68:	481d      	ldr	r0, [pc, #116]	; (8001fe0 <HAL_DAC_MspInit+0xe4>)
 8001f6a:	f001 fd0d 	bl	8003988 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001f6e:	4b1d      	ldr	r3, [pc, #116]	; (8001fe4 <HAL_DAC_MspInit+0xe8>)
 8001f70:	4a1d      	ldr	r2, [pc, #116]	; (8001fe8 <HAL_DAC_MspInit+0xec>)
 8001f72:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001f74:	4b1b      	ldr	r3, [pc, #108]	; (8001fe4 <HAL_DAC_MspInit+0xe8>)
 8001f76:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001f7a:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f7c:	4b19      	ldr	r3, [pc, #100]	; (8001fe4 <HAL_DAC_MspInit+0xe8>)
 8001f7e:	2240      	movs	r2, #64	; 0x40
 8001f80:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f82:	4b18      	ldr	r3, [pc, #96]	; (8001fe4 <HAL_DAC_MspInit+0xe8>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001f88:	4b16      	ldr	r3, [pc, #88]	; (8001fe4 <HAL_DAC_MspInit+0xe8>)
 8001f8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f8e:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f90:	4b14      	ldr	r3, [pc, #80]	; (8001fe4 <HAL_DAC_MspInit+0xe8>)
 8001f92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f96:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f98:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <HAL_DAC_MspInit+0xe8>)
 8001f9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f9e:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 8001fa0:	4b10      	ldr	r3, [pc, #64]	; (8001fe4 <HAL_DAC_MspInit+0xe8>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001fa6:	4b0f      	ldr	r3, [pc, #60]	; (8001fe4 <HAL_DAC_MspInit+0xe8>)
 8001fa8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001fac:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fae:	4b0d      	ldr	r3, [pc, #52]	; (8001fe4 <HAL_DAC_MspInit+0xe8>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001fb4:	480b      	ldr	r0, [pc, #44]	; (8001fe4 <HAL_DAC_MspInit+0xe8>)
 8001fb6:	f001 f957 	bl	8003268 <HAL_DMA_Init>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8001fc0:	f7ff feba 	bl	8001d38 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a07      	ldr	r2, [pc, #28]	; (8001fe4 <HAL_DAC_MspInit+0xe8>)
 8001fc8:	609a      	str	r2, [r3, #8]
 8001fca:	4a06      	ldr	r2, [pc, #24]	; (8001fe4 <HAL_DAC_MspInit+0xe8>)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001fd0:	bf00      	nop
 8001fd2:	3728      	adds	r7, #40	; 0x28
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40007400 	.word	0x40007400
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40020000 	.word	0x40020000
 8001fe4:	20001964 	.word	0x20001964
 8001fe8:	40026088 	.word	0x40026088

08001fec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08a      	sub	sp, #40	; 0x28
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a19      	ldr	r2, [pc, #100]	; (8002070 <HAL_SPI_MspInit+0x84>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d12b      	bne.n	8002066 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
 8002012:	4b18      	ldr	r3, [pc, #96]	; (8002074 <HAL_SPI_MspInit+0x88>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	4a17      	ldr	r2, [pc, #92]	; (8002074 <HAL_SPI_MspInit+0x88>)
 8002018:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800201c:	6453      	str	r3, [r2, #68]	; 0x44
 800201e:	4b15      	ldr	r3, [pc, #84]	; (8002074 <HAL_SPI_MspInit+0x88>)
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002026:	613b      	str	r3, [r7, #16]
 8002028:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	4b11      	ldr	r3, [pc, #68]	; (8002074 <HAL_SPI_MspInit+0x88>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	4a10      	ldr	r2, [pc, #64]	; (8002074 <HAL_SPI_MspInit+0x88>)
 8002034:	f043 0302 	orr.w	r3, r3, #2
 8002038:	6313      	str	r3, [r2, #48]	; 0x30
 800203a:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <HAL_SPI_MspInit+0x88>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002046:	2338      	movs	r3, #56	; 0x38
 8002048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204a:	2302      	movs	r3, #2
 800204c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002052:	2303      	movs	r3, #3
 8002054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002056:	2305      	movs	r3, #5
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800205a:	f107 0314 	add.w	r3, r7, #20
 800205e:	4619      	mov	r1, r3
 8002060:	4805      	ldr	r0, [pc, #20]	; (8002078 <HAL_SPI_MspInit+0x8c>)
 8002062:	f001 fc91 	bl	8003988 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002066:	bf00      	nop
 8002068:	3728      	adds	r7, #40	; 0x28
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40013000 	.word	0x40013000
 8002074:	40023800 	.word	0x40023800
 8002078:	40020400 	.word	0x40020400

0800207c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08c      	sub	sp, #48	; 0x30
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002084:	f107 031c 	add.w	r3, r7, #28
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800209c:	d12c      	bne.n	80020f8 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	61bb      	str	r3, [r7, #24]
 80020a2:	4b2f      	ldr	r3, [pc, #188]	; (8002160 <HAL_TIM_Base_MspInit+0xe4>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	4a2e      	ldr	r2, [pc, #184]	; (8002160 <HAL_TIM_Base_MspInit+0xe4>)
 80020a8:	f043 0301 	orr.w	r3, r3, #1
 80020ac:	6413      	str	r3, [r2, #64]	; 0x40
 80020ae:	4b2c      	ldr	r3, [pc, #176]	; (8002160 <HAL_TIM_Base_MspInit+0xe4>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	61bb      	str	r3, [r7, #24]
 80020b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	4b28      	ldr	r3, [pc, #160]	; (8002160 <HAL_TIM_Base_MspInit+0xe4>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	4a27      	ldr	r2, [pc, #156]	; (8002160 <HAL_TIM_Base_MspInit+0xe4>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ca:	4b25      	ldr	r3, [pc, #148]	; (8002160 <HAL_TIM_Base_MspInit+0xe4>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020d6:	2303      	movs	r3, #3
 80020d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020da:	2302      	movs	r3, #2
 80020dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e2:	2300      	movs	r3, #0
 80020e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020e6:	2301      	movs	r3, #1
 80020e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ea:	f107 031c 	add.w	r3, r7, #28
 80020ee:	4619      	mov	r1, r3
 80020f0:	481c      	ldr	r0, [pc, #112]	; (8002164 <HAL_TIM_Base_MspInit+0xe8>)
 80020f2:	f001 fc49 	bl	8003988 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80020f6:	e02e      	b.n	8002156 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM3)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a1a      	ldr	r2, [pc, #104]	; (8002168 <HAL_TIM_Base_MspInit+0xec>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d116      	bne.n	8002130 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	4b16      	ldr	r3, [pc, #88]	; (8002160 <HAL_TIM_Base_MspInit+0xe4>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	4a15      	ldr	r2, [pc, #84]	; (8002160 <HAL_TIM_Base_MspInit+0xe4>)
 800210c:	f043 0302 	orr.w	r3, r3, #2
 8002110:	6413      	str	r3, [r2, #64]	; 0x40
 8002112:	4b13      	ldr	r3, [pc, #76]	; (8002160 <HAL_TIM_Base_MspInit+0xe4>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800211e:	2200      	movs	r2, #0
 8002120:	2100      	movs	r1, #0
 8002122:	201d      	movs	r0, #29
 8002124:	f000 feb7 	bl	8002e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002128:	201d      	movs	r0, #29
 800212a:	f000 fed0 	bl	8002ece <HAL_NVIC_EnableIRQ>
}
 800212e:	e012      	b.n	8002156 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM6)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a0d      	ldr	r2, [pc, #52]	; (800216c <HAL_TIM_Base_MspInit+0xf0>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d10d      	bne.n	8002156 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	4b08      	ldr	r3, [pc, #32]	; (8002160 <HAL_TIM_Base_MspInit+0xe4>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	4a07      	ldr	r2, [pc, #28]	; (8002160 <HAL_TIM_Base_MspInit+0xe4>)
 8002144:	f043 0310 	orr.w	r3, r3, #16
 8002148:	6413      	str	r3, [r2, #64]	; 0x40
 800214a:	4b05      	ldr	r3, [pc, #20]	; (8002160 <HAL_TIM_Base_MspInit+0xe4>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	f003 0310 	and.w	r3, r3, #16
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]
}
 8002156:	bf00      	nop
 8002158:	3730      	adds	r7, #48	; 0x30
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40023800 	.word	0x40023800
 8002164:	40020000 	.word	0x40020000
 8002168:	40000400 	.word	0x40000400
 800216c:	40001000 	.word	0x40001000

08002170 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08a      	sub	sp, #40	; 0x28
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002178:	f107 0314 	add.w	r3, r7, #20
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a34      	ldr	r2, [pc, #208]	; (8002260 <HAL_UART_MspInit+0xf0>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d162      	bne.n	8002258 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	613b      	str	r3, [r7, #16]
 8002196:	4b33      	ldr	r3, [pc, #204]	; (8002264 <HAL_UART_MspInit+0xf4>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	4a32      	ldr	r2, [pc, #200]	; (8002264 <HAL_UART_MspInit+0xf4>)
 800219c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021a0:	6413      	str	r3, [r2, #64]	; 0x40
 80021a2:	4b30      	ldr	r3, [pc, #192]	; (8002264 <HAL_UART_MspInit+0xf4>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021aa:	613b      	str	r3, [r7, #16]
 80021ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	4b2c      	ldr	r3, [pc, #176]	; (8002264 <HAL_UART_MspInit+0xf4>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	4a2b      	ldr	r2, [pc, #172]	; (8002264 <HAL_UART_MspInit+0xf4>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	6313      	str	r3, [r2, #48]	; 0x30
 80021be:	4b29      	ldr	r3, [pc, #164]	; (8002264 <HAL_UART_MspInit+0xf4>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80021ca:	230c      	movs	r3, #12
 80021cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ce:	2302      	movs	r3, #2
 80021d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d6:	2303      	movs	r3, #3
 80021d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021da:	2307      	movs	r3, #7
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021de:	f107 0314 	add.w	r3, r7, #20
 80021e2:	4619      	mov	r1, r3
 80021e4:	4820      	ldr	r0, [pc, #128]	; (8002268 <HAL_UART_MspInit+0xf8>)
 80021e6:	f001 fbcf 	bl	8003988 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80021ea:	4b20      	ldr	r3, [pc, #128]	; (800226c <HAL_UART_MspInit+0xfc>)
 80021ec:	4a20      	ldr	r2, [pc, #128]	; (8002270 <HAL_UART_MspInit+0x100>)
 80021ee:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80021f0:	4b1e      	ldr	r3, [pc, #120]	; (800226c <HAL_UART_MspInit+0xfc>)
 80021f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021f6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021f8:	4b1c      	ldr	r3, [pc, #112]	; (800226c <HAL_UART_MspInit+0xfc>)
 80021fa:	2240      	movs	r2, #64	; 0x40
 80021fc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021fe:	4b1b      	ldr	r3, [pc, #108]	; (800226c <HAL_UART_MspInit+0xfc>)
 8002200:	2200      	movs	r2, #0
 8002202:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002204:	4b19      	ldr	r3, [pc, #100]	; (800226c <HAL_UART_MspInit+0xfc>)
 8002206:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800220a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800220c:	4b17      	ldr	r3, [pc, #92]	; (800226c <HAL_UART_MspInit+0xfc>)
 800220e:	2200      	movs	r2, #0
 8002210:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002212:	4b16      	ldr	r3, [pc, #88]	; (800226c <HAL_UART_MspInit+0xfc>)
 8002214:	2200      	movs	r2, #0
 8002216:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002218:	4b14      	ldr	r3, [pc, #80]	; (800226c <HAL_UART_MspInit+0xfc>)
 800221a:	2200      	movs	r2, #0
 800221c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800221e:	4b13      	ldr	r3, [pc, #76]	; (800226c <HAL_UART_MspInit+0xfc>)
 8002220:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002224:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002226:	4b11      	ldr	r3, [pc, #68]	; (800226c <HAL_UART_MspInit+0xfc>)
 8002228:	2200      	movs	r2, #0
 800222a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800222c:	480f      	ldr	r0, [pc, #60]	; (800226c <HAL_UART_MspInit+0xfc>)
 800222e:	f001 f81b 	bl	8003268 <HAL_DMA_Init>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002238:	f7ff fd7e 	bl	8001d38 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a0b      	ldr	r2, [pc, #44]	; (800226c <HAL_UART_MspInit+0xfc>)
 8002240:	631a      	str	r2, [r3, #48]	; 0x30
 8002242:	4a0a      	ldr	r2, [pc, #40]	; (800226c <HAL_UART_MspInit+0xfc>)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002248:	2200      	movs	r2, #0
 800224a:	2100      	movs	r1, #0
 800224c:	2026      	movs	r0, #38	; 0x26
 800224e:	f000 fe22 	bl	8002e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002252:	2026      	movs	r0, #38	; 0x26
 8002254:	f000 fe3b 	bl	8002ece <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002258:	bf00      	nop
 800225a:	3728      	adds	r7, #40	; 0x28
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40004400 	.word	0x40004400
 8002264:	40023800 	.word	0x40023800
 8002268:	40020000 	.word	0x40020000
 800226c:	20001dc4 	.word	0x20001dc4
 8002270:	400260a0 	.word	0x400260a0

08002274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002282:	b480      	push	{r7}
 8002284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002286:	e7fe      	b.n	8002286 <HardFault_Handler+0x4>

08002288 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800228c:	e7fe      	b.n	800228c <MemManage_Handler+0x4>

0800228e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800228e:	b480      	push	{r7}
 8002290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002292:	e7fe      	b.n	8002292 <BusFault_Handler+0x4>

08002294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002298:	e7fe      	b.n	8002298 <UsageFault_Handler+0x4>

0800229a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800229a:	b480      	push	{r7}
 800229c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022ac:	bf00      	nop
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022b6:	b480      	push	{r7}
 80022b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022c8:	f000 f8fa 	bl	80024c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Callback();
 80022cc:	f7fe fee6 	bl	800109c <HAL_SYSTICK_Callback>
  CurrentTick++;
 80022d0:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <SysTick_Handler+0x24>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	3301      	adds	r3, #1
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <SysTick_Handler+0x24>)
 80022dc:	701a      	strb	r2, [r3, #0]
  rec_bttncb(); //Record button callback to check every 1ms if record is 'ON PRESS and HOLD'
 80022de:	f7fe fef1 	bl	80010c4 <rec_bttncb>
  /* USER CODE END SysTick_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20000030 	.word	0x20000030

080022ec <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80022f0:	4802      	ldr	r0, [pc, #8]	; (80022fc <DMA1_Stream5_IRQHandler+0x10>)
 80022f2:	f001 f8e1 	bl	80034b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20001964 	.word	0x20001964

08002300 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002304:	4802      	ldr	r0, [pc, #8]	; (8002310 <DMA1_Stream6_IRQHandler+0x10>)
 8002306:	f001 f8d7 	bl	80034b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20001dc4 	.word	0x20001dc4

08002314 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002318:	2020      	movs	r0, #32
 800231a:	f001 fcf9 	bl	8003d10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800231e:	2040      	movs	r0, #64	; 0x40
 8002320:	f001 fcf6 	bl	8003d10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002324:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002328:	f001 fcf2 	bl	8003d10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800232c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002330:	f001 fcee 	bl	8003d10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002334:	bf00      	nop
 8002336:	bd80      	pop	{r7, pc}

08002338 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */


	counter++;
 800233c:	4b05      	ldr	r3, [pc, #20]	; (8002354 <TIM3_IRQHandler+0x1c>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	b2db      	uxtb	r3, r3
 8002342:	3301      	adds	r3, #1
 8002344:	b2da      	uxtb	r2, r3
 8002346:	4b03      	ldr	r3, [pc, #12]	; (8002354 <TIM3_IRQHandler+0x1c>)
 8002348:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800234a:	4803      	ldr	r0, [pc, #12]	; (8002358 <TIM3_IRQHandler+0x20>)
 800234c:	f002 faf4 	bl	8004938 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002350:	bf00      	nop
 8002352:	bd80      	pop	{r7, pc}
 8002354:	200010d4 	.word	0x200010d4
 8002358:	20000880 	.word	0x20000880

0800235c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002360:	4802      	ldr	r0, [pc, #8]	; (800236c <USART2_IRQHandler+0x10>)
 8002362:	f003 fa85 	bl	8005870 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20001518 	.word	0x20001518

08002370 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002374:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002378:	f001 fcca 	bl	8003d10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800237c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002380:	f001 fcc6 	bl	8003d10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002384:	bf00      	nop
 8002386:	bd80      	pop	{r7, pc}

08002388 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800238c:	4802      	ldr	r0, [pc, #8]	; (8002398 <DMA2_Stream2_IRQHandler+0x10>)
 800238e:	f001 f893 	bl	80034b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	20001ec0 	.word	0x20001ec0

0800239c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023a0:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <SystemInit+0x28>)
 80023a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a6:	4a07      	ldr	r2, [pc, #28]	; (80023c4 <SystemInit+0x28>)
 80023a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80023b0:	4b04      	ldr	r3, [pc, #16]	; (80023c4 <SystemInit+0x28>)
 80023b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023b6:	609a      	str	r2, [r3, #8]
#endif
}
 80023b8:	bf00      	nop
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002400 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80023cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80023ce:	e003      	b.n	80023d8 <LoopCopyDataInit>

080023d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80023d0:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80023d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80023d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80023d6:	3104      	adds	r1, #4

080023d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80023d8:	480b      	ldr	r0, [pc, #44]	; (8002408 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80023da:	4b0c      	ldr	r3, [pc, #48]	; (800240c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80023dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80023de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80023e0:	d3f6      	bcc.n	80023d0 <CopyDataInit>
  ldr  r2, =_sbss
 80023e2:	4a0b      	ldr	r2, [pc, #44]	; (8002410 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80023e4:	e002      	b.n	80023ec <LoopFillZerobss>

080023e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80023e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80023e8:	f842 3b04 	str.w	r3, [r2], #4

080023ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80023ec:	4b09      	ldr	r3, [pc, #36]	; (8002414 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80023ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80023f0:	d3f9      	bcc.n	80023e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80023f2:	f7ff ffd3 	bl	800239c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023f6:	f004 f8e1 	bl	80065bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023fa:	f7fe fffd 	bl	80013f8 <main>
  bx  lr    
 80023fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002400:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002404:	08007524 	.word	0x08007524
  ldr  r0, =_sdata
 8002408:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800240c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8002410:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8002414:	2000212c 	.word	0x2000212c

08002418 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002418:	e7fe      	b.n	8002418 <ADC_IRQHandler>
	...

0800241c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002420:	4b0e      	ldr	r3, [pc, #56]	; (800245c <HAL_Init+0x40>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a0d      	ldr	r2, [pc, #52]	; (800245c <HAL_Init+0x40>)
 8002426:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800242a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800242c:	4b0b      	ldr	r3, [pc, #44]	; (800245c <HAL_Init+0x40>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a0a      	ldr	r2, [pc, #40]	; (800245c <HAL_Init+0x40>)
 8002432:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002436:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002438:	4b08      	ldr	r3, [pc, #32]	; (800245c <HAL_Init+0x40>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a07      	ldr	r2, [pc, #28]	; (800245c <HAL_Init+0x40>)
 800243e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002442:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002444:	2003      	movs	r0, #3
 8002446:	f000 fd1b 	bl	8002e80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800244a:	2000      	movs	r0, #0
 800244c:	f000 f808 	bl	8002460 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002450:	f7ff fcb6 	bl	8001dc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40023c00 	.word	0x40023c00

08002460 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002468:	4b12      	ldr	r3, [pc, #72]	; (80024b4 <HAL_InitTick+0x54>)
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	4b12      	ldr	r3, [pc, #72]	; (80024b8 <HAL_InitTick+0x58>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	4619      	mov	r1, r3
 8002472:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002476:	fbb3 f3f1 	udiv	r3, r3, r1
 800247a:	fbb2 f3f3 	udiv	r3, r2, r3
 800247e:	4618      	mov	r0, r3
 8002480:	f000 fd33 	bl	8002eea <HAL_SYSTICK_Config>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e00e      	b.n	80024ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b0f      	cmp	r3, #15
 8002492:	d80a      	bhi.n	80024aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002494:	2200      	movs	r2, #0
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	f04f 30ff 	mov.w	r0, #4294967295
 800249c:	f000 fcfb 	bl	8002e96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024a0:	4a06      	ldr	r2, [pc, #24]	; (80024bc <HAL_InitTick+0x5c>)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
 80024a8:	e000      	b.n	80024ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	20000004 	.word	0x20000004
 80024b8:	2000000c 	.word	0x2000000c
 80024bc:	20000008 	.word	0x20000008

080024c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024c4:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <HAL_IncTick+0x20>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	461a      	mov	r2, r3
 80024ca:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <HAL_IncTick+0x24>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4413      	add	r3, r2
 80024d0:	4a04      	ldr	r2, [pc, #16]	; (80024e4 <HAL_IncTick+0x24>)
 80024d2:	6013      	str	r3, [r2, #0]
}
 80024d4:	bf00      	nop
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	2000000c 	.word	0x2000000c
 80024e4:	20002128 	.word	0x20002128

080024e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  return uwTick;
 80024ec:	4b03      	ldr	r3, [pc, #12]	; (80024fc <HAL_GetTick+0x14>)
 80024ee:	681b      	ldr	r3, [r3, #0]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	20002128 	.word	0x20002128

08002500 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002508:	2300      	movs	r3, #0
 800250a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e033      	b.n	800257e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	2b00      	cmp	r3, #0
 800251c:	d109      	bne.n	8002532 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff fc76 	bl	8001e10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	f003 0310 	and.w	r3, r3, #16
 800253a:	2b00      	cmp	r3, #0
 800253c:	d118      	bne.n	8002570 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002546:	f023 0302 	bic.w	r3, r3, #2
 800254a:	f043 0202 	orr.w	r2, r3, #2
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 fa46 	bl	80029e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	f023 0303 	bic.w	r3, r3, #3
 8002566:	f043 0201 	orr.w	r2, r3, #1
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	641a      	str	r2, [r3, #64]	; 0x40
 800256e:	e001      	b.n	8002574 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800257c:	7bfb      	ldrb	r3, [r7, #15]
}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002594:	2300      	movs	r3, #0
 8002596:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d101      	bne.n	80025a6 <HAL_ADC_Start_DMA+0x1e>
 80025a2:	2302      	movs	r3, #2
 80025a4:	e0cc      	b.n	8002740 <HAL_ADC_Start_DMA+0x1b8>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d018      	beq.n	80025ee <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 0201 	orr.w	r2, r2, #1
 80025ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025cc:	4b5e      	ldr	r3, [pc, #376]	; (8002748 <HAL_ADC_Start_DMA+0x1c0>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a5e      	ldr	r2, [pc, #376]	; (800274c <HAL_ADC_Start_DMA+0x1c4>)
 80025d2:	fba2 2303 	umull	r2, r3, r2, r3
 80025d6:	0c9a      	lsrs	r2, r3, #18
 80025d8:	4613      	mov	r3, r2
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	4413      	add	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80025e0:	e002      	b.n	80025e8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	3b01      	subs	r3, #1
 80025e6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f9      	bne.n	80025e2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	f040 80a0 	bne.w	800273e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002606:	f023 0301 	bic.w	r3, r3, #1
 800260a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800261c:	2b00      	cmp	r3, #0
 800261e:	d007      	beq.n	8002630 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002624:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002628:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002634:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800263c:	d106      	bne.n	800264c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002642:	f023 0206 	bic.w	r2, r3, #6
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	645a      	str	r2, [r3, #68]	; 0x44
 800264a:	e002      	b.n	8002652 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800265a:	4b3d      	ldr	r3, [pc, #244]	; (8002750 <HAL_ADC_Start_DMA+0x1c8>)
 800265c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002662:	4a3c      	ldr	r2, [pc, #240]	; (8002754 <HAL_ADC_Start_DMA+0x1cc>)
 8002664:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266a:	4a3b      	ldr	r2, [pc, #236]	; (8002758 <HAL_ADC_Start_DMA+0x1d0>)
 800266c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002672:	4a3a      	ldr	r2, [pc, #232]	; (800275c <HAL_ADC_Start_DMA+0x1d4>)
 8002674:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800267e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800268e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689a      	ldr	r2, [r3, #8]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800269e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	334c      	adds	r3, #76	; 0x4c
 80026aa:	4619      	mov	r1, r3
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f000 fe88 	bl	80033c4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 031f 	and.w	r3, r3, #31
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d12a      	bne.n	8002716 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a26      	ldr	r2, [pc, #152]	; (8002760 <HAL_ADC_Start_DMA+0x1d8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d015      	beq.n	80026f6 <HAL_ADC_Start_DMA+0x16e>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a25      	ldr	r2, [pc, #148]	; (8002764 <HAL_ADC_Start_DMA+0x1dc>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d105      	bne.n	80026e0 <HAL_ADC_Start_DMA+0x158>
 80026d4:	4b1e      	ldr	r3, [pc, #120]	; (8002750 <HAL_ADC_Start_DMA+0x1c8>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 031f 	and.w	r3, r3, #31
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00a      	beq.n	80026f6 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a20      	ldr	r2, [pc, #128]	; (8002768 <HAL_ADC_Start_DMA+0x1e0>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d129      	bne.n	800273e <HAL_ADC_Start_DMA+0x1b6>
 80026ea:	4b19      	ldr	r3, [pc, #100]	; (8002750 <HAL_ADC_Start_DMA+0x1c8>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f003 031f 	and.w	r3, r3, #31
 80026f2:	2b0f      	cmp	r3, #15
 80026f4:	d823      	bhi.n	800273e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d11c      	bne.n	800273e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689a      	ldr	r2, [r3, #8]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	e013      	b.n	800273e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a11      	ldr	r2, [pc, #68]	; (8002760 <HAL_ADC_Start_DMA+0x1d8>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d10e      	bne.n	800273e <HAL_ADC_Start_DMA+0x1b6>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d107      	bne.n	800273e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800273c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	20000004 	.word	0x20000004
 800274c:	431bde83 	.word	0x431bde83
 8002750:	40012300 	.word	0x40012300
 8002754:	08002bdd 	.word	0x08002bdd
 8002758:	08002c97 	.word	0x08002c97
 800275c:	08002cb3 	.word	0x08002cb3
 8002760:	40012000 	.word	0x40012000
 8002764:	40012100 	.word	0x40012100
 8002768:	40012200 	.word	0x40012200

0800276c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800278a:	2300      	movs	r3, #0
 800278c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002794:	2b01      	cmp	r3, #1
 8002796:	d101      	bne.n	800279c <HAL_ADC_ConfigChannel+0x1c>
 8002798:	2302      	movs	r3, #2
 800279a:	e113      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x244>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2b09      	cmp	r3, #9
 80027aa:	d925      	bls.n	80027f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68d9      	ldr	r1, [r3, #12]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	461a      	mov	r2, r3
 80027ba:	4613      	mov	r3, r2
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	4413      	add	r3, r2
 80027c0:	3b1e      	subs	r3, #30
 80027c2:	2207      	movs	r2, #7
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	43da      	mvns	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	400a      	ands	r2, r1
 80027d0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68d9      	ldr	r1, [r3, #12]
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	4618      	mov	r0, r3
 80027e4:	4603      	mov	r3, r0
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	4403      	add	r3, r0
 80027ea:	3b1e      	subs	r3, #30
 80027ec:	409a      	lsls	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	60da      	str	r2, [r3, #12]
 80027f6:	e022      	b.n	800283e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6919      	ldr	r1, [r3, #16]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	b29b      	uxth	r3, r3
 8002804:	461a      	mov	r2, r3
 8002806:	4613      	mov	r3, r2
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	4413      	add	r3, r2
 800280c:	2207      	movs	r2, #7
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	43da      	mvns	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	400a      	ands	r2, r1
 800281a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6919      	ldr	r1, [r3, #16]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	b29b      	uxth	r3, r3
 800282c:	4618      	mov	r0, r3
 800282e:	4603      	mov	r3, r0
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	4403      	add	r3, r0
 8002834:	409a      	lsls	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	430a      	orrs	r2, r1
 800283c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b06      	cmp	r3, #6
 8002844:	d824      	bhi.n	8002890 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685a      	ldr	r2, [r3, #4]
 8002850:	4613      	mov	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	3b05      	subs	r3, #5
 8002858:	221f      	movs	r2, #31
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43da      	mvns	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	400a      	ands	r2, r1
 8002866:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	b29b      	uxth	r3, r3
 8002874:	4618      	mov	r0, r3
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	4613      	mov	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	4413      	add	r3, r2
 8002880:	3b05      	subs	r3, #5
 8002882:	fa00 f203 	lsl.w	r2, r0, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	430a      	orrs	r2, r1
 800288c:	635a      	str	r2, [r3, #52]	; 0x34
 800288e:	e04c      	b.n	800292a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b0c      	cmp	r3, #12
 8002896:	d824      	bhi.n	80028e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	4613      	mov	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	3b23      	subs	r3, #35	; 0x23
 80028aa:	221f      	movs	r2, #31
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	43da      	mvns	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	400a      	ands	r2, r1
 80028b8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	4618      	mov	r0, r3
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	4613      	mov	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	3b23      	subs	r3, #35	; 0x23
 80028d4:	fa00 f203 	lsl.w	r2, r0, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	430a      	orrs	r2, r1
 80028de:	631a      	str	r2, [r3, #48]	; 0x30
 80028e0:	e023      	b.n	800292a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	3b41      	subs	r3, #65	; 0x41
 80028f4:	221f      	movs	r2, #31
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43da      	mvns	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	400a      	ands	r2, r1
 8002902:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	b29b      	uxth	r3, r3
 8002910:	4618      	mov	r0, r3
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	4613      	mov	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	3b41      	subs	r3, #65	; 0x41
 800291e:	fa00 f203 	lsl.w	r2, r0, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800292a:	4b29      	ldr	r3, [pc, #164]	; (80029d0 <HAL_ADC_ConfigChannel+0x250>)
 800292c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a28      	ldr	r2, [pc, #160]	; (80029d4 <HAL_ADC_ConfigChannel+0x254>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d10f      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x1d8>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b12      	cmp	r3, #18
 800293e:	d10b      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a1d      	ldr	r2, [pc, #116]	; (80029d4 <HAL_ADC_ConfigChannel+0x254>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d12b      	bne.n	80029ba <HAL_ADC_ConfigChannel+0x23a>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a1c      	ldr	r2, [pc, #112]	; (80029d8 <HAL_ADC_ConfigChannel+0x258>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d003      	beq.n	8002974 <HAL_ADC_ConfigChannel+0x1f4>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b11      	cmp	r3, #17
 8002972:	d122      	bne.n	80029ba <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a11      	ldr	r2, [pc, #68]	; (80029d8 <HAL_ADC_ConfigChannel+0x258>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d111      	bne.n	80029ba <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002996:	4b11      	ldr	r3, [pc, #68]	; (80029dc <HAL_ADC_ConfigChannel+0x25c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a11      	ldr	r2, [pc, #68]	; (80029e0 <HAL_ADC_ConfigChannel+0x260>)
 800299c:	fba2 2303 	umull	r2, r3, r2, r3
 80029a0:	0c9a      	lsrs	r2, r3, #18
 80029a2:	4613      	mov	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029ac:	e002      	b.n	80029b4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	3b01      	subs	r3, #1
 80029b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f9      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	40012300 	.word	0x40012300
 80029d4:	40012000 	.word	0x40012000
 80029d8:	10000012 	.word	0x10000012
 80029dc:	20000004 	.word	0x20000004
 80029e0:	431bde83 	.word	0x431bde83

080029e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029ec:	4b79      	ldr	r3, [pc, #484]	; (8002bd4 <ADC_Init+0x1f0>)
 80029ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	431a      	orrs	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	685a      	ldr	r2, [r3, #4]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6859      	ldr	r1, [r3, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	021a      	lsls	r2, r3, #8
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	685a      	ldr	r2, [r3, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6859      	ldr	r1, [r3, #4]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6899      	ldr	r1, [r3, #8]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a76:	4a58      	ldr	r2, [pc, #352]	; (8002bd8 <ADC_Init+0x1f4>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d022      	beq.n	8002ac2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a8a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6899      	ldr	r1, [r3, #8]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002aac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6899      	ldr	r1, [r3, #8]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	609a      	str	r2, [r3, #8]
 8002ac0:	e00f      	b.n	8002ae2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ad0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ae0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 0202 	bic.w	r2, r2, #2
 8002af0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6899      	ldr	r1, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	7e1b      	ldrb	r3, [r3, #24]
 8002afc:	005a      	lsls	r2, r3, #1
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d01b      	beq.n	8002b48 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b1e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6859      	ldr	r1, [r3, #4]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	035a      	lsls	r2, r3, #13
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	605a      	str	r2, [r3, #4]
 8002b46:	e007      	b.n	8002b58 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b56:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	051a      	lsls	r2, r3, #20
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6899      	ldr	r1, [r3, #8]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b9a:	025a      	lsls	r2, r3, #9
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689a      	ldr	r2, [r3, #8]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6899      	ldr	r1, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	029a      	lsls	r2, r3, #10
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	609a      	str	r2, [r3, #8]
}
 8002bc8:	bf00      	nop
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	40012300 	.word	0x40012300
 8002bd8:	0f000001 	.word	0x0f000001

08002bdc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d13c      	bne.n	8002c70 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d12b      	bne.n	8002c68 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d127      	bne.n	8002c68 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d006      	beq.n	8002c34 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d119      	bne.n	8002c68 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 0220 	bic.w	r2, r2, #32
 8002c42:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d105      	bne.n	8002c68 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c60:	f043 0201 	orr.w	r2, r3, #1
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f7fe fa4b 	bl	8001104 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c6e:	e00e      	b.n	8002c8e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	f003 0310 	and.w	r3, r3, #16
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f7ff fd75 	bl	800276c <HAL_ADC_ErrorCallback>
}
 8002c82:	e004      	b.n	8002c8e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	4798      	blx	r3
}
 8002c8e:	bf00      	nop
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b084      	sub	sp, #16
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f7fe fad7 	bl	8001258 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002caa:	bf00      	nop
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b084      	sub	sp, #16
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cbe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2240      	movs	r2, #64	; 0x40
 8002cc4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cca:	f043 0204 	orr.w	r2, r3, #4
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f7ff fd4a 	bl	800276c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cd8:	bf00      	nop
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cf0:	4b0c      	ldr	r3, [pc, #48]	; (8002d24 <__NVIC_SetPriorityGrouping+0x44>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d12:	4a04      	ldr	r2, [pc, #16]	; (8002d24 <__NVIC_SetPriorityGrouping+0x44>)
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	60d3      	str	r3, [r2, #12]
}
 8002d18:	bf00      	nop
 8002d1a:	3714      	adds	r7, #20
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	e000ed00 	.word	0xe000ed00

08002d28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d2c:	4b04      	ldr	r3, [pc, #16]	; (8002d40 <__NVIC_GetPriorityGrouping+0x18>)
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	0a1b      	lsrs	r3, r3, #8
 8002d32:	f003 0307 	and.w	r3, r3, #7
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	e000ed00 	.word	0xe000ed00

08002d44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	db0b      	blt.n	8002d6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d56:	79fb      	ldrb	r3, [r7, #7]
 8002d58:	f003 021f 	and.w	r2, r3, #31
 8002d5c:	4907      	ldr	r1, [pc, #28]	; (8002d7c <__NVIC_EnableIRQ+0x38>)
 8002d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d62:	095b      	lsrs	r3, r3, #5
 8002d64:	2001      	movs	r0, #1
 8002d66:	fa00 f202 	lsl.w	r2, r0, r2
 8002d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	e000e100 	.word	0xe000e100

08002d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	6039      	str	r1, [r7, #0]
 8002d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	db0a      	blt.n	8002daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	490c      	ldr	r1, [pc, #48]	; (8002dcc <__NVIC_SetPriority+0x4c>)
 8002d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9e:	0112      	lsls	r2, r2, #4
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	440b      	add	r3, r1
 8002da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002da8:	e00a      	b.n	8002dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	4908      	ldr	r1, [pc, #32]	; (8002dd0 <__NVIC_SetPriority+0x50>)
 8002db0:	79fb      	ldrb	r3, [r7, #7]
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	3b04      	subs	r3, #4
 8002db8:	0112      	lsls	r2, r2, #4
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	761a      	strb	r2, [r3, #24]
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	e000e100 	.word	0xe000e100
 8002dd0:	e000ed00 	.word	0xe000ed00

08002dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b089      	sub	sp, #36	; 0x24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	f1c3 0307 	rsb	r3, r3, #7
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	bf28      	it	cs
 8002df2:	2304      	movcs	r3, #4
 8002df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	3304      	adds	r3, #4
 8002dfa:	2b06      	cmp	r3, #6
 8002dfc:	d902      	bls.n	8002e04 <NVIC_EncodePriority+0x30>
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	3b03      	subs	r3, #3
 8002e02:	e000      	b.n	8002e06 <NVIC_EncodePriority+0x32>
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e08:	f04f 32ff 	mov.w	r2, #4294967295
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	43da      	mvns	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	401a      	ands	r2, r3
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	fa01 f303 	lsl.w	r3, r1, r3
 8002e26:	43d9      	mvns	r1, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e2c:	4313      	orrs	r3, r2
         );
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3724      	adds	r7, #36	; 0x24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
	...

08002e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3b01      	subs	r3, #1
 8002e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e4c:	d301      	bcc.n	8002e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e00f      	b.n	8002e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e52:	4a0a      	ldr	r2, [pc, #40]	; (8002e7c <SysTick_Config+0x40>)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3b01      	subs	r3, #1
 8002e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e5a:	210f      	movs	r1, #15
 8002e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e60:	f7ff ff8e 	bl	8002d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e64:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <SysTick_Config+0x40>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e6a:	4b04      	ldr	r3, [pc, #16]	; (8002e7c <SysTick_Config+0x40>)
 8002e6c:	2207      	movs	r2, #7
 8002e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	e000e010 	.word	0xe000e010

08002e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f7ff ff29 	bl	8002ce0 <__NVIC_SetPriorityGrouping>
}
 8002e8e:	bf00      	nop
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b086      	sub	sp, #24
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	60b9      	str	r1, [r7, #8]
 8002ea0:	607a      	str	r2, [r7, #4]
 8002ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ea8:	f7ff ff3e 	bl	8002d28 <__NVIC_GetPriorityGrouping>
 8002eac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	68b9      	ldr	r1, [r7, #8]
 8002eb2:	6978      	ldr	r0, [r7, #20]
 8002eb4:	f7ff ff8e 	bl	8002dd4 <NVIC_EncodePriority>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff ff5d 	bl	8002d80 <__NVIC_SetPriority>
}
 8002ec6:	bf00      	nop
 8002ec8:	3718      	adds	r7, #24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b082      	sub	sp, #8
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff ff31 	bl	8002d44 <__NVIC_EnableIRQ>
}
 8002ee2:	bf00      	nop
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b082      	sub	sp, #8
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7ff ffa2 	bl	8002e3c <SysTick_Config>
 8002ef8:	4603      	mov	r3, r0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b082      	sub	sp, #8
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e014      	b.n	8002f3e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	791b      	ldrb	r3, [r3, #4]
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d105      	bne.n	8002f2a <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f7fe ffe9 	bl	8001efc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
	...

08002f48 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
 8002f54:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	795b      	ldrb	r3, [r3, #5]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d101      	bne.n	8002f66 <HAL_DAC_Start_DMA+0x1e>
 8002f62:	2302      	movs	r3, #2
 8002f64:	e08e      	b.n	8003084 <HAL_DAC_Start_DMA+0x13c>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2202      	movs	r2, #2
 8002f70:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d12a      	bne.n	8002fce <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	4a43      	ldr	r2, [pc, #268]	; (800308c <HAL_DAC_Start_DMA+0x144>)
 8002f7e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	4a42      	ldr	r2, [pc, #264]	; (8003090 <HAL_DAC_Start_DMA+0x148>)
 8002f86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	4a41      	ldr	r2, [pc, #260]	; (8003094 <HAL_DAC_Start_DMA+0x14c>)
 8002f8e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f9e:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8002fa0:	6a3b      	ldr	r3, [r7, #32]
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d009      	beq.n	8002fba <HAL_DAC_Start_DMA+0x72>
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d00c      	beq.n	8002fc4 <HAL_DAC_Start_DMA+0x7c>
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d000      	beq.n	8002fb0 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002fae:	e039      	b.n	8003024 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	3308      	adds	r3, #8
 8002fb6:	617b      	str	r3, [r7, #20]
        break;
 8002fb8:	e034      	b.n	8003024 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	330c      	adds	r3, #12
 8002fc0:	617b      	str	r3, [r7, #20]
        break;
 8002fc2:	e02f      	b.n	8003024 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	3310      	adds	r3, #16
 8002fca:	617b      	str	r3, [r7, #20]
        break;
 8002fcc:	e02a      	b.n	8003024 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	4a31      	ldr	r2, [pc, #196]	; (8003098 <HAL_DAC_Start_DMA+0x150>)
 8002fd4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	4a30      	ldr	r2, [pc, #192]	; (800309c <HAL_DAC_Start_DMA+0x154>)
 8002fdc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	4a2f      	ldr	r2, [pc, #188]	; (80030a0 <HAL_DAC_Start_DMA+0x158>)
 8002fe4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ff4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 8002ff6:	6a3b      	ldr	r3, [r7, #32]
 8002ff8:	2b04      	cmp	r3, #4
 8002ffa:	d009      	beq.n	8003010 <HAL_DAC_Start_DMA+0xc8>
 8002ffc:	2b08      	cmp	r3, #8
 8002ffe:	d00c      	beq.n	800301a <HAL_DAC_Start_DMA+0xd2>
 8003000:	2b00      	cmp	r3, #0
 8003002:	d000      	beq.n	8003006 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003004:	e00e      	b.n	8003024 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	3314      	adds	r3, #20
 800300c:	617b      	str	r3, [r7, #20]
        break;
 800300e:	e009      	b.n	8003024 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	3318      	adds	r3, #24
 8003016:	617b      	str	r3, [r7, #20]
        break;
 8003018:	e004      	b.n	8003024 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	331c      	adds	r3, #28
 8003020:	617b      	str	r3, [r7, #20]
        break;
 8003022:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d10f      	bne.n	800304a <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003038:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6898      	ldr	r0, [r3, #8]
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	f000 f9be 	bl	80033c4 <HAL_DMA_Start_IT>
 8003048:	e00e      	b.n	8003068 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003058:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	68d8      	ldr	r0, [r3, #12]
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	f000 f9ae 	bl	80033c4 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6819      	ldr	r1, [r3, #0]
 800306e:	2201      	movs	r2, #1
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	409a      	lsls	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3718      	adds	r7, #24
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	08003153 	.word	0x08003153
 8003090:	08003175 	.word	0x08003175
 8003094:	08003191 	.word	0x08003191
 8003098:	080031fb 	.word	0x080031fb
 800309c:	0800321d 	.word	0x0800321d
 80030a0:	08003239 	.word	0x08003239

080030a4 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b087      	sub	sp, #28
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80030c4:	2300      	movs	r3, #0
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	2300      	movs	r3, #0
 80030ca:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	795b      	ldrb	r3, [r3, #5]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d101      	bne.n	80030d8 <HAL_DAC_ConfigChannel+0x20>
 80030d4:	2302      	movs	r3, #2
 80030d6:	e036      	b.n	8003146 <HAL_DAC_ConfigChannel+0x8e>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2201      	movs	r2, #1
 80030dc:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2202      	movs	r2, #2
 80030e2:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80030ec:	f640 72fe 	movw	r2, #4094	; 0xffe
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	fa02 f303 	lsl.w	r3, r2, r3
 80030f6:	43db      	mvns	r3, r3
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	4013      	ands	r3, r2
 80030fc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	4313      	orrs	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	4313      	orrs	r3, r2
 8003116:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6819      	ldr	r1, [r3, #0]
 8003126:	22c0      	movs	r2, #192	; 0xc0
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	43da      	mvns	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	400a      	ands	r2, r1
 8003136:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2201      	movs	r2, #1
 800313c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	371c      	adds	r7, #28
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr

08003152 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b084      	sub	sp, #16
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315e:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f7fe f921 	bl	80013a8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2201      	movs	r2, #1
 800316a:	711a      	strb	r2, [r3, #4]
}
 800316c:	bf00      	nop
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003180:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f7fe f924 	bl	80013d0 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003188:	bf00      	nop
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319c:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	f043 0204 	orr.w	r2, r3, #4
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f7ff ff7a 	bl	80030a4 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2201      	movs	r2, #1
 80031b4:	711a      	strb	r2, [r3, #4]
}
 80031b6:	bf00      	nop
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr

080031d2 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b083      	sub	sp, #12
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80031da:	bf00      	nop
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 80031ee:	bf00      	nop
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b084      	sub	sp, #16
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003206:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f7ff ffd8 	bl	80031be <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2201      	movs	r2, #1
 8003212:	711a      	strb	r2, [r3, #4]
}
 8003214:	bf00      	nop
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003228:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f7ff ffd1 	bl	80031d2 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003230:	bf00      	nop
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003244:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	f043 0204 	orr.w	r2, r3, #4
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f7ff ffc7 	bl	80031e6 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2201      	movs	r2, #1
 800325c:	711a      	strb	r2, [r3, #4]
}
 800325e:	bf00      	nop
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
	...

08003268 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003270:	2300      	movs	r3, #0
 8003272:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003274:	f7ff f938 	bl	80024e8 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e099      	b.n	80033b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2202      	movs	r2, #2
 8003290:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0201 	bic.w	r2, r2, #1
 80032a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032a4:	e00f      	b.n	80032c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032a6:	f7ff f91f 	bl	80024e8 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b05      	cmp	r3, #5
 80032b2:	d908      	bls.n	80032c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2220      	movs	r2, #32
 80032b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2203      	movs	r2, #3
 80032be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e078      	b.n	80033b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1e8      	bne.n	80032a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	4b38      	ldr	r3, [pc, #224]	; (80033c0 <HAL_DMA_Init+0x158>)
 80032e0:	4013      	ands	r3, r2
 80032e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800330a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	4313      	orrs	r3, r2
 8003316:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	2b04      	cmp	r3, #4
 800331e:	d107      	bne.n	8003330 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003328:	4313      	orrs	r3, r2
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	4313      	orrs	r3, r2
 800332e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f023 0307 	bic.w	r3, r3, #7
 8003346:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	4313      	orrs	r3, r2
 8003350:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	2b04      	cmp	r3, #4
 8003358:	d117      	bne.n	800338a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	4313      	orrs	r3, r2
 8003362:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00e      	beq.n	800338a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 fa91 	bl	8003894 <DMA_CheckFifoParam>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d008      	beq.n	800338a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2240      	movs	r2, #64	; 0x40
 800337c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003386:	2301      	movs	r3, #1
 8003388:	e016      	b.n	80033b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 fa48 	bl	8003828 <DMA_CalcBaseAndBitshift>
 8003398:	4603      	mov	r3, r0
 800339a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a0:	223f      	movs	r2, #63	; 0x3f
 80033a2:	409a      	lsls	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	f010803f 	.word	0xf010803f

080033c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
 80033d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033d2:	2300      	movs	r3, #0
 80033d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d101      	bne.n	80033ea <HAL_DMA_Start_IT+0x26>
 80033e6:	2302      	movs	r3, #2
 80033e8:	e040      	b.n	800346c <HAL_DMA_Start_IT+0xa8>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d12f      	bne.n	800345e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2202      	movs	r2, #2
 8003402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	68b9      	ldr	r1, [r7, #8]
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 f9da 	bl	80037cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341c:	223f      	movs	r2, #63	; 0x3f
 800341e:	409a      	lsls	r2, r3
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0216 	orr.w	r2, r2, #22
 8003432:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003438:	2b00      	cmp	r3, #0
 800343a:	d007      	beq.n	800344c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 0208 	orr.w	r2, r2, #8
 800344a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 0201 	orr.w	r2, r2, #1
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	e005      	b.n	800346a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003466:	2302      	movs	r3, #2
 8003468:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800346a:	7dfb      	ldrb	r3, [r7, #23]
}
 800346c:	4618      	mov	r0, r3
 800346e:	3718      	adds	r7, #24
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d004      	beq.n	8003492 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2280      	movs	r2, #128	; 0x80
 800348c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e00c      	b.n	80034ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2205      	movs	r2, #5
 8003496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 0201 	bic.w	r2, r2, #1
 80034a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80034c0:	2300      	movs	r3, #0
 80034c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80034c4:	4b92      	ldr	r3, [pc, #584]	; (8003710 <HAL_DMA_IRQHandler+0x258>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a92      	ldr	r2, [pc, #584]	; (8003714 <HAL_DMA_IRQHandler+0x25c>)
 80034ca:	fba2 2303 	umull	r2, r3, r2, r3
 80034ce:	0a9b      	lsrs	r3, r3, #10
 80034d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e2:	2208      	movs	r2, #8
 80034e4:	409a      	lsls	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	4013      	ands	r3, r2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d01a      	beq.n	8003524 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d013      	beq.n	8003524 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 0204 	bic.w	r2, r2, #4
 800350a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003510:	2208      	movs	r2, #8
 8003512:	409a      	lsls	r2, r3
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351c:	f043 0201 	orr.w	r2, r3, #1
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003528:	2201      	movs	r2, #1
 800352a:	409a      	lsls	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4013      	ands	r3, r2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d012      	beq.n	800355a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00b      	beq.n	800355a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003546:	2201      	movs	r2, #1
 8003548:	409a      	lsls	r2, r3
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003552:	f043 0202 	orr.w	r2, r3, #2
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355e:	2204      	movs	r2, #4
 8003560:	409a      	lsls	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	4013      	ands	r3, r2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d012      	beq.n	8003590 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00b      	beq.n	8003590 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357c:	2204      	movs	r2, #4
 800357e:	409a      	lsls	r2, r3
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003588:	f043 0204 	orr.w	r2, r3, #4
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003594:	2210      	movs	r2, #16
 8003596:	409a      	lsls	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4013      	ands	r3, r2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d043      	beq.n	8003628 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0308 	and.w	r3, r3, #8
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d03c      	beq.n	8003628 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b2:	2210      	movs	r2, #16
 80035b4:	409a      	lsls	r2, r3
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d018      	beq.n	80035fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d108      	bne.n	80035e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d024      	beq.n	8003628 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	4798      	blx	r3
 80035e6:	e01f      	b.n	8003628 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d01b      	beq.n	8003628 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	4798      	blx	r3
 80035f8:	e016      	b.n	8003628 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003604:	2b00      	cmp	r3, #0
 8003606:	d107      	bne.n	8003618 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0208 	bic.w	r2, r2, #8
 8003616:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361c:	2b00      	cmp	r3, #0
 800361e:	d003      	beq.n	8003628 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800362c:	2220      	movs	r2, #32
 800362e:	409a      	lsls	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4013      	ands	r3, r2
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 808e 	beq.w	8003756 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0310 	and.w	r3, r3, #16
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 8086 	beq.w	8003756 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800364e:	2220      	movs	r2, #32
 8003650:	409a      	lsls	r2, r3
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b05      	cmp	r3, #5
 8003660:	d136      	bne.n	80036d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0216 	bic.w	r2, r2, #22
 8003670:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	695a      	ldr	r2, [r3, #20]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003680:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	2b00      	cmp	r3, #0
 8003688:	d103      	bne.n	8003692 <HAL_DMA_IRQHandler+0x1da>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800368e:	2b00      	cmp	r3, #0
 8003690:	d007      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0208 	bic.w	r2, r2, #8
 80036a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a6:	223f      	movs	r2, #63	; 0x3f
 80036a8:	409a      	lsls	r2, r3
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d07d      	beq.n	80037c2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	4798      	blx	r3
        }
        return;
 80036ce:	e078      	b.n	80037c2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d01c      	beq.n	8003718 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d108      	bne.n	80036fe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d030      	beq.n	8003756 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	4798      	blx	r3
 80036fc:	e02b      	b.n	8003756 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003702:	2b00      	cmp	r3, #0
 8003704:	d027      	beq.n	8003756 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	4798      	blx	r3
 800370e:	e022      	b.n	8003756 <HAL_DMA_IRQHandler+0x29e>
 8003710:	20000004 	.word	0x20000004
 8003714:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10f      	bne.n	8003746 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0210 	bic.w	r2, r2, #16
 8003734:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375a:	2b00      	cmp	r3, #0
 800375c:	d032      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b00      	cmp	r3, #0
 8003768:	d022      	beq.n	80037b0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2205      	movs	r2, #5
 800376e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 0201 	bic.w	r2, r2, #1
 8003780:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	3301      	adds	r3, #1
 8003786:	60bb      	str	r3, [r7, #8]
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	429a      	cmp	r2, r3
 800378c:	d307      	bcc.n	800379e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1f2      	bne.n	8003782 <HAL_DMA_IRQHandler+0x2ca>
 800379c:	e000      	b.n	80037a0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800379e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d005      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	4798      	blx	r3
 80037c0:	e000      	b.n	80037c4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80037c2:	bf00      	nop
    }
  }
}
 80037c4:	3718      	adds	r7, #24
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop

080037cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
 80037d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	2b40      	cmp	r3, #64	; 0x40
 80037f8:	d108      	bne.n	800380c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800380a:	e007      	b.n	800381c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	60da      	str	r2, [r3, #12]
}
 800381c:	bf00      	nop
 800381e:	3714      	adds	r7, #20
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	b2db      	uxtb	r3, r3
 8003836:	3b10      	subs	r3, #16
 8003838:	4a14      	ldr	r2, [pc, #80]	; (800388c <DMA_CalcBaseAndBitshift+0x64>)
 800383a:	fba2 2303 	umull	r2, r3, r2, r3
 800383e:	091b      	lsrs	r3, r3, #4
 8003840:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003842:	4a13      	ldr	r2, [pc, #76]	; (8003890 <DMA_CalcBaseAndBitshift+0x68>)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	4413      	add	r3, r2
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	461a      	mov	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2b03      	cmp	r3, #3
 8003854:	d909      	bls.n	800386a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800385e:	f023 0303 	bic.w	r3, r3, #3
 8003862:	1d1a      	adds	r2, r3, #4
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	659a      	str	r2, [r3, #88]	; 0x58
 8003868:	e007      	b.n	800387a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003872:	f023 0303 	bic.w	r3, r3, #3
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800387e:	4618      	mov	r0, r3
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	aaaaaaab 	.word	0xaaaaaaab
 8003890:	0800713c 	.word	0x0800713c

08003894 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800389c:	2300      	movs	r3, #0
 800389e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d11f      	bne.n	80038ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2b03      	cmp	r3, #3
 80038b2:	d855      	bhi.n	8003960 <DMA_CheckFifoParam+0xcc>
 80038b4:	a201      	add	r2, pc, #4	; (adr r2, 80038bc <DMA_CheckFifoParam+0x28>)
 80038b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ba:	bf00      	nop
 80038bc:	080038cd 	.word	0x080038cd
 80038c0:	080038df 	.word	0x080038df
 80038c4:	080038cd 	.word	0x080038cd
 80038c8:	08003961 	.word	0x08003961
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d045      	beq.n	8003964 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038dc:	e042      	b.n	8003964 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038e6:	d13f      	bne.n	8003968 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038ec:	e03c      	b.n	8003968 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038f6:	d121      	bne.n	800393c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	2b03      	cmp	r3, #3
 80038fc:	d836      	bhi.n	800396c <DMA_CheckFifoParam+0xd8>
 80038fe:	a201      	add	r2, pc, #4	; (adr r2, 8003904 <DMA_CheckFifoParam+0x70>)
 8003900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003904:	08003915 	.word	0x08003915
 8003908:	0800391b 	.word	0x0800391b
 800390c:	08003915 	.word	0x08003915
 8003910:	0800392d 	.word	0x0800392d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	73fb      	strb	r3, [r7, #15]
      break;
 8003918:	e02f      	b.n	800397a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d024      	beq.n	8003970 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800392a:	e021      	b.n	8003970 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003930:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003934:	d11e      	bne.n	8003974 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800393a:	e01b      	b.n	8003974 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	2b02      	cmp	r3, #2
 8003940:	d902      	bls.n	8003948 <DMA_CheckFifoParam+0xb4>
 8003942:	2b03      	cmp	r3, #3
 8003944:	d003      	beq.n	800394e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003946:	e018      	b.n	800397a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	73fb      	strb	r3, [r7, #15]
      break;
 800394c:	e015      	b.n	800397a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003952:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00e      	beq.n	8003978 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	73fb      	strb	r3, [r7, #15]
      break;
 800395e:	e00b      	b.n	8003978 <DMA_CheckFifoParam+0xe4>
      break;
 8003960:	bf00      	nop
 8003962:	e00a      	b.n	800397a <DMA_CheckFifoParam+0xe6>
      break;
 8003964:	bf00      	nop
 8003966:	e008      	b.n	800397a <DMA_CheckFifoParam+0xe6>
      break;
 8003968:	bf00      	nop
 800396a:	e006      	b.n	800397a <DMA_CheckFifoParam+0xe6>
      break;
 800396c:	bf00      	nop
 800396e:	e004      	b.n	800397a <DMA_CheckFifoParam+0xe6>
      break;
 8003970:	bf00      	nop
 8003972:	e002      	b.n	800397a <DMA_CheckFifoParam+0xe6>
      break;   
 8003974:	bf00      	nop
 8003976:	e000      	b.n	800397a <DMA_CheckFifoParam+0xe6>
      break;
 8003978:	bf00      	nop
    }
  } 
  
  return status; 
 800397a:	7bfb      	ldrb	r3, [r7, #15]
}
 800397c:	4618      	mov	r0, r3
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003988:	b480      	push	{r7}
 800398a:	b089      	sub	sp, #36	; 0x24
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003992:	2300      	movs	r3, #0
 8003994:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003996:	2300      	movs	r3, #0
 8003998:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800399a:	2300      	movs	r3, #0
 800399c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800399e:	2300      	movs	r3, #0
 80039a0:	61fb      	str	r3, [r7, #28]
 80039a2:	e165      	b.n	8003c70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039a4:	2201      	movs	r2, #1
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	4013      	ands	r3, r2
 80039b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	429a      	cmp	r2, r3
 80039be:	f040 8154 	bne.w	8003c6a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d00b      	beq.n	80039e2 <HAL_GPIO_Init+0x5a>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d007      	beq.n	80039e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039d6:	2b11      	cmp	r3, #17
 80039d8:	d003      	beq.n	80039e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	2b12      	cmp	r3, #18
 80039e0:	d130      	bne.n	8003a44 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	2203      	movs	r2, #3
 80039ee:	fa02 f303 	lsl.w	r3, r2, r3
 80039f2:	43db      	mvns	r3, r3
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	4013      	ands	r3, r2
 80039f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	68da      	ldr	r2, [r3, #12]
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	fa02 f303 	lsl.w	r3, r2, r3
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a18:	2201      	movs	r2, #1
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a20:	43db      	mvns	r3, r3
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	4013      	ands	r3, r2
 8003a26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	091b      	lsrs	r3, r3, #4
 8003a2e:	f003 0201 	and.w	r2, r3, #1
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	2203      	movs	r2, #3
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	43db      	mvns	r3, r3
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d003      	beq.n	8003a84 <HAL_GPIO_Init+0xfc>
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	2b12      	cmp	r3, #18
 8003a82:	d123      	bne.n	8003acc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	08da      	lsrs	r2, r3, #3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3208      	adds	r2, #8
 8003a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	220f      	movs	r2, #15
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	43db      	mvns	r3, r3
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	691a      	ldr	r2, [r3, #16]
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	f003 0307 	and.w	r3, r3, #7
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	08da      	lsrs	r2, r3, #3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	3208      	adds	r2, #8
 8003ac6:	69b9      	ldr	r1, [r7, #24]
 8003ac8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	2203      	movs	r2, #3
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	43db      	mvns	r3, r3
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f003 0203 	and.w	r2, r3, #3
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 80ae 	beq.w	8003c6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b0e:	2300      	movs	r3, #0
 8003b10:	60fb      	str	r3, [r7, #12]
 8003b12:	4b5c      	ldr	r3, [pc, #368]	; (8003c84 <HAL_GPIO_Init+0x2fc>)
 8003b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b16:	4a5b      	ldr	r2, [pc, #364]	; (8003c84 <HAL_GPIO_Init+0x2fc>)
 8003b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b1e:	4b59      	ldr	r3, [pc, #356]	; (8003c84 <HAL_GPIO_Init+0x2fc>)
 8003b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b26:	60fb      	str	r3, [r7, #12]
 8003b28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b2a:	4a57      	ldr	r2, [pc, #348]	; (8003c88 <HAL_GPIO_Init+0x300>)
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	089b      	lsrs	r3, r3, #2
 8003b30:	3302      	adds	r3, #2
 8003b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	220f      	movs	r2, #15
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	43db      	mvns	r3, r3
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a4e      	ldr	r2, [pc, #312]	; (8003c8c <HAL_GPIO_Init+0x304>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d025      	beq.n	8003ba2 <HAL_GPIO_Init+0x21a>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a4d      	ldr	r2, [pc, #308]	; (8003c90 <HAL_GPIO_Init+0x308>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d01f      	beq.n	8003b9e <HAL_GPIO_Init+0x216>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a4c      	ldr	r2, [pc, #304]	; (8003c94 <HAL_GPIO_Init+0x30c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d019      	beq.n	8003b9a <HAL_GPIO_Init+0x212>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a4b      	ldr	r2, [pc, #300]	; (8003c98 <HAL_GPIO_Init+0x310>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d013      	beq.n	8003b96 <HAL_GPIO_Init+0x20e>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a4a      	ldr	r2, [pc, #296]	; (8003c9c <HAL_GPIO_Init+0x314>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d00d      	beq.n	8003b92 <HAL_GPIO_Init+0x20a>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a49      	ldr	r2, [pc, #292]	; (8003ca0 <HAL_GPIO_Init+0x318>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d007      	beq.n	8003b8e <HAL_GPIO_Init+0x206>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a48      	ldr	r2, [pc, #288]	; (8003ca4 <HAL_GPIO_Init+0x31c>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d101      	bne.n	8003b8a <HAL_GPIO_Init+0x202>
 8003b86:	2306      	movs	r3, #6
 8003b88:	e00c      	b.n	8003ba4 <HAL_GPIO_Init+0x21c>
 8003b8a:	2307      	movs	r3, #7
 8003b8c:	e00a      	b.n	8003ba4 <HAL_GPIO_Init+0x21c>
 8003b8e:	2305      	movs	r3, #5
 8003b90:	e008      	b.n	8003ba4 <HAL_GPIO_Init+0x21c>
 8003b92:	2304      	movs	r3, #4
 8003b94:	e006      	b.n	8003ba4 <HAL_GPIO_Init+0x21c>
 8003b96:	2303      	movs	r3, #3
 8003b98:	e004      	b.n	8003ba4 <HAL_GPIO_Init+0x21c>
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	e002      	b.n	8003ba4 <HAL_GPIO_Init+0x21c>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e000      	b.n	8003ba4 <HAL_GPIO_Init+0x21c>
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	69fa      	ldr	r2, [r7, #28]
 8003ba6:	f002 0203 	and.w	r2, r2, #3
 8003baa:	0092      	lsls	r2, r2, #2
 8003bac:	4093      	lsls	r3, r2
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bb4:	4934      	ldr	r1, [pc, #208]	; (8003c88 <HAL_GPIO_Init+0x300>)
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	089b      	lsrs	r3, r3, #2
 8003bba:	3302      	adds	r3, #2
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bc2:	4b39      	ldr	r3, [pc, #228]	; (8003ca8 <HAL_GPIO_Init+0x320>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	43db      	mvns	r3, r3
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003be6:	4a30      	ldr	r2, [pc, #192]	; (8003ca8 <HAL_GPIO_Init+0x320>)
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003bec:	4b2e      	ldr	r3, [pc, #184]	; (8003ca8 <HAL_GPIO_Init+0x320>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	43db      	mvns	r3, r3
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d003      	beq.n	8003c10 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c10:	4a25      	ldr	r2, [pc, #148]	; (8003ca8 <HAL_GPIO_Init+0x320>)
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c16:	4b24      	ldr	r3, [pc, #144]	; (8003ca8 <HAL_GPIO_Init+0x320>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	43db      	mvns	r3, r3
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	4013      	ands	r3, r2
 8003c24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c3a:	4a1b      	ldr	r2, [pc, #108]	; (8003ca8 <HAL_GPIO_Init+0x320>)
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c40:	4b19      	ldr	r3, [pc, #100]	; (8003ca8 <HAL_GPIO_Init+0x320>)
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	43db      	mvns	r3, r3
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c64:	4a10      	ldr	r2, [pc, #64]	; (8003ca8 <HAL_GPIO_Init+0x320>)
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	61fb      	str	r3, [r7, #28]
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	2b0f      	cmp	r3, #15
 8003c74:	f67f ae96 	bls.w	80039a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c78:	bf00      	nop
 8003c7a:	3724      	adds	r7, #36	; 0x24
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	40023800 	.word	0x40023800
 8003c88:	40013800 	.word	0x40013800
 8003c8c:	40020000 	.word	0x40020000
 8003c90:	40020400 	.word	0x40020400
 8003c94:	40020800 	.word	0x40020800
 8003c98:	40020c00 	.word	0x40020c00
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	40021400 	.word	0x40021400
 8003ca4:	40021800 	.word	0x40021800
 8003ca8:	40013c00 	.word	0x40013c00

08003cac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	691a      	ldr	r2, [r3, #16]
 8003cbc:	887b      	ldrh	r3, [r7, #2]
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d002      	beq.n	8003cca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	73fb      	strb	r3, [r7, #15]
 8003cc8:	e001      	b.n	8003cce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3714      	adds	r7, #20
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	807b      	strh	r3, [r7, #2]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cec:	787b      	ldrb	r3, [r7, #1]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cf2:	887a      	ldrh	r2, [r7, #2]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003cf8:	e003      	b.n	8003d02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003cfa:	887b      	ldrh	r3, [r7, #2]
 8003cfc:	041a      	lsls	r2, r3, #16
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	619a      	str	r2, [r3, #24]
}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
	...

08003d10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	4603      	mov	r3, r0
 8003d18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d1a:	4b08      	ldr	r3, [pc, #32]	; (8003d3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d1c:	695a      	ldr	r2, [r3, #20]
 8003d1e:	88fb      	ldrh	r3, [r7, #6]
 8003d20:	4013      	ands	r3, r2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d006      	beq.n	8003d34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d26:	4a05      	ldr	r2, [pc, #20]	; (8003d3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d28:	88fb      	ldrh	r3, [r7, #6]
 8003d2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d2c:	88fb      	ldrh	r3, [r7, #6]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fd f952 	bl	8000fd8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d34:	bf00      	nop
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	40013c00 	.word	0x40013c00

08003d40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e0cc      	b.n	8003eee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d54:	4b68      	ldr	r3, [pc, #416]	; (8003ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 030f 	and.w	r3, r3, #15
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d90c      	bls.n	8003d7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d62:	4b65      	ldr	r3, [pc, #404]	; (8003ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	b2d2      	uxtb	r2, r2
 8003d68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d6a:	4b63      	ldr	r3, [pc, #396]	; (8003ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 030f 	and.w	r3, r3, #15
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d001      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e0b8      	b.n	8003eee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d020      	beq.n	8003dca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0304 	and.w	r3, r3, #4
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d005      	beq.n	8003da0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d94:	4b59      	ldr	r3, [pc, #356]	; (8003efc <HAL_RCC_ClockConfig+0x1bc>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	4a58      	ldr	r2, [pc, #352]	; (8003efc <HAL_RCC_ClockConfig+0x1bc>)
 8003d9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0308 	and.w	r3, r3, #8
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d005      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dac:	4b53      	ldr	r3, [pc, #332]	; (8003efc <HAL_RCC_ClockConfig+0x1bc>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	4a52      	ldr	r2, [pc, #328]	; (8003efc <HAL_RCC_ClockConfig+0x1bc>)
 8003db2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003db6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003db8:	4b50      	ldr	r3, [pc, #320]	; (8003efc <HAL_RCC_ClockConfig+0x1bc>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	494d      	ldr	r1, [pc, #308]	; (8003efc <HAL_RCC_ClockConfig+0x1bc>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d044      	beq.n	8003e60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d107      	bne.n	8003dee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dde:	4b47      	ldr	r3, [pc, #284]	; (8003efc <HAL_RCC_ClockConfig+0x1bc>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d119      	bne.n	8003e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e07f      	b.n	8003eee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d003      	beq.n	8003dfe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dfa:	2b03      	cmp	r3, #3
 8003dfc:	d107      	bne.n	8003e0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dfe:	4b3f      	ldr	r3, [pc, #252]	; (8003efc <HAL_RCC_ClockConfig+0x1bc>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d109      	bne.n	8003e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e06f      	b.n	8003eee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e0e:	4b3b      	ldr	r3, [pc, #236]	; (8003efc <HAL_RCC_ClockConfig+0x1bc>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e067      	b.n	8003eee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e1e:	4b37      	ldr	r3, [pc, #220]	; (8003efc <HAL_RCC_ClockConfig+0x1bc>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f023 0203 	bic.w	r2, r3, #3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	4934      	ldr	r1, [pc, #208]	; (8003efc <HAL_RCC_ClockConfig+0x1bc>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e30:	f7fe fb5a 	bl	80024e8 <HAL_GetTick>
 8003e34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e36:	e00a      	b.n	8003e4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e38:	f7fe fb56 	bl	80024e8 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e04f      	b.n	8003eee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e4e:	4b2b      	ldr	r3, [pc, #172]	; (8003efc <HAL_RCC_ClockConfig+0x1bc>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f003 020c 	and.w	r2, r3, #12
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d1eb      	bne.n	8003e38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e60:	4b25      	ldr	r3, [pc, #148]	; (8003ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 030f 	and.w	r3, r3, #15
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d20c      	bcs.n	8003e88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e6e:	4b22      	ldr	r3, [pc, #136]	; (8003ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	b2d2      	uxtb	r2, r2
 8003e74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e76:	4b20      	ldr	r3, [pc, #128]	; (8003ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 030f 	and.w	r3, r3, #15
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d001      	beq.n	8003e88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e032      	b.n	8003eee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d008      	beq.n	8003ea6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e94:	4b19      	ldr	r3, [pc, #100]	; (8003efc <HAL_RCC_ClockConfig+0x1bc>)
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	4916      	ldr	r1, [pc, #88]	; (8003efc <HAL_RCC_ClockConfig+0x1bc>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0308 	and.w	r3, r3, #8
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d009      	beq.n	8003ec6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003eb2:	4b12      	ldr	r3, [pc, #72]	; (8003efc <HAL_RCC_ClockConfig+0x1bc>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	490e      	ldr	r1, [pc, #56]	; (8003efc <HAL_RCC_ClockConfig+0x1bc>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ec6:	f000 f855 	bl	8003f74 <HAL_RCC_GetSysClockFreq>
 8003eca:	4601      	mov	r1, r0
 8003ecc:	4b0b      	ldr	r3, [pc, #44]	; (8003efc <HAL_RCC_ClockConfig+0x1bc>)
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	091b      	lsrs	r3, r3, #4
 8003ed2:	f003 030f 	and.w	r3, r3, #15
 8003ed6:	4a0a      	ldr	r2, [pc, #40]	; (8003f00 <HAL_RCC_ClockConfig+0x1c0>)
 8003ed8:	5cd3      	ldrb	r3, [r2, r3]
 8003eda:	fa21 f303 	lsr.w	r3, r1, r3
 8003ede:	4a09      	ldr	r2, [pc, #36]	; (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ee2:	4b09      	ldr	r3, [pc, #36]	; (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7fe faba 	bl	8002460 <HAL_InitTick>

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	40023c00 	.word	0x40023c00
 8003efc:	40023800 	.word	0x40023800
 8003f00:	08007124 	.word	0x08007124
 8003f04:	20000004 	.word	0x20000004
 8003f08:	20000008 	.word	0x20000008

08003f0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f10:	4b03      	ldr	r3, [pc, #12]	; (8003f20 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f12:	681b      	ldr	r3, [r3, #0]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	20000004 	.word	0x20000004

08003f24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f28:	f7ff fff0 	bl	8003f0c <HAL_RCC_GetHCLKFreq>
 8003f2c:	4601      	mov	r1, r0
 8003f2e:	4b05      	ldr	r3, [pc, #20]	; (8003f44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	0a9b      	lsrs	r3, r3, #10
 8003f34:	f003 0307 	and.w	r3, r3, #7
 8003f38:	4a03      	ldr	r2, [pc, #12]	; (8003f48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f3a:	5cd3      	ldrb	r3, [r2, r3]
 8003f3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	40023800 	.word	0x40023800
 8003f48:	08007134 	.word	0x08007134

08003f4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f50:	f7ff ffdc 	bl	8003f0c <HAL_RCC_GetHCLKFreq>
 8003f54:	4601      	mov	r1, r0
 8003f56:	4b05      	ldr	r3, [pc, #20]	; (8003f6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	0b5b      	lsrs	r3, r3, #13
 8003f5c:	f003 0307 	and.w	r3, r3, #7
 8003f60:	4a03      	ldr	r2, [pc, #12]	; (8003f70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f62:	5cd3      	ldrb	r3, [r2, r3]
 8003f64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	40023800 	.word	0x40023800
 8003f70:	08007134 	.word	0x08007134

08003f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f76:	b087      	sub	sp, #28
 8003f78:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8003f82:	2300      	movs	r3, #0
 8003f84:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8003f86:	2300      	movs	r3, #0
 8003f88:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f8e:	4bc6      	ldr	r3, [pc, #792]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x334>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 030c 	and.w	r3, r3, #12
 8003f96:	2b0c      	cmp	r3, #12
 8003f98:	f200 817e 	bhi.w	8004298 <HAL_RCC_GetSysClockFreq+0x324>
 8003f9c:	a201      	add	r2, pc, #4	; (adr r2, 8003fa4 <HAL_RCC_GetSysClockFreq+0x30>)
 8003f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa2:	bf00      	nop
 8003fa4:	08003fd9 	.word	0x08003fd9
 8003fa8:	08004299 	.word	0x08004299
 8003fac:	08004299 	.word	0x08004299
 8003fb0:	08004299 	.word	0x08004299
 8003fb4:	08003fdf 	.word	0x08003fdf
 8003fb8:	08004299 	.word	0x08004299
 8003fbc:	08004299 	.word	0x08004299
 8003fc0:	08004299 	.word	0x08004299
 8003fc4:	08003fe5 	.word	0x08003fe5
 8003fc8:	08004299 	.word	0x08004299
 8003fcc:	08004299 	.word	0x08004299
 8003fd0:	08004299 	.word	0x08004299
 8003fd4:	08004141 	.word	0x08004141
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fd8:	4bb4      	ldr	r3, [pc, #720]	; (80042ac <HAL_RCC_GetSysClockFreq+0x338>)
 8003fda:	613b      	str	r3, [r7, #16]
       break;
 8003fdc:	e15f      	b.n	800429e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fde:	4bb4      	ldr	r3, [pc, #720]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x33c>)
 8003fe0:	613b      	str	r3, [r7, #16]
      break;
 8003fe2:	e15c      	b.n	800429e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fe4:	4bb0      	ldr	r3, [pc, #704]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x334>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fec:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fee:	4bae      	ldr	r3, [pc, #696]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x334>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d04a      	beq.n	8004090 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ffa:	4bab      	ldr	r3, [pc, #684]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x334>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	099b      	lsrs	r3, r3, #6
 8004000:	f04f 0400 	mov.w	r4, #0
 8004004:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004008:	f04f 0200 	mov.w	r2, #0
 800400c:	ea03 0501 	and.w	r5, r3, r1
 8004010:	ea04 0602 	and.w	r6, r4, r2
 8004014:	4629      	mov	r1, r5
 8004016:	4632      	mov	r2, r6
 8004018:	f04f 0300 	mov.w	r3, #0
 800401c:	f04f 0400 	mov.w	r4, #0
 8004020:	0154      	lsls	r4, r2, #5
 8004022:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004026:	014b      	lsls	r3, r1, #5
 8004028:	4619      	mov	r1, r3
 800402a:	4622      	mov	r2, r4
 800402c:	1b49      	subs	r1, r1, r5
 800402e:	eb62 0206 	sbc.w	r2, r2, r6
 8004032:	f04f 0300 	mov.w	r3, #0
 8004036:	f04f 0400 	mov.w	r4, #0
 800403a:	0194      	lsls	r4, r2, #6
 800403c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004040:	018b      	lsls	r3, r1, #6
 8004042:	1a5b      	subs	r3, r3, r1
 8004044:	eb64 0402 	sbc.w	r4, r4, r2
 8004048:	f04f 0100 	mov.w	r1, #0
 800404c:	f04f 0200 	mov.w	r2, #0
 8004050:	00e2      	lsls	r2, r4, #3
 8004052:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004056:	00d9      	lsls	r1, r3, #3
 8004058:	460b      	mov	r3, r1
 800405a:	4614      	mov	r4, r2
 800405c:	195b      	adds	r3, r3, r5
 800405e:	eb44 0406 	adc.w	r4, r4, r6
 8004062:	f04f 0100 	mov.w	r1, #0
 8004066:	f04f 0200 	mov.w	r2, #0
 800406a:	0262      	lsls	r2, r4, #9
 800406c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004070:	0259      	lsls	r1, r3, #9
 8004072:	460b      	mov	r3, r1
 8004074:	4614      	mov	r4, r2
 8004076:	4618      	mov	r0, r3
 8004078:	4621      	mov	r1, r4
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f04f 0400 	mov.w	r4, #0
 8004080:	461a      	mov	r2, r3
 8004082:	4623      	mov	r3, r4
 8004084:	f7fc fcdc 	bl	8000a40 <__aeabi_uldivmod>
 8004088:	4603      	mov	r3, r0
 800408a:	460c      	mov	r4, r1
 800408c:	617b      	str	r3, [r7, #20]
 800408e:	e049      	b.n	8004124 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004090:	4b85      	ldr	r3, [pc, #532]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	099b      	lsrs	r3, r3, #6
 8004096:	f04f 0400 	mov.w	r4, #0
 800409a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800409e:	f04f 0200 	mov.w	r2, #0
 80040a2:	ea03 0501 	and.w	r5, r3, r1
 80040a6:	ea04 0602 	and.w	r6, r4, r2
 80040aa:	4629      	mov	r1, r5
 80040ac:	4632      	mov	r2, r6
 80040ae:	f04f 0300 	mov.w	r3, #0
 80040b2:	f04f 0400 	mov.w	r4, #0
 80040b6:	0154      	lsls	r4, r2, #5
 80040b8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80040bc:	014b      	lsls	r3, r1, #5
 80040be:	4619      	mov	r1, r3
 80040c0:	4622      	mov	r2, r4
 80040c2:	1b49      	subs	r1, r1, r5
 80040c4:	eb62 0206 	sbc.w	r2, r2, r6
 80040c8:	f04f 0300 	mov.w	r3, #0
 80040cc:	f04f 0400 	mov.w	r4, #0
 80040d0:	0194      	lsls	r4, r2, #6
 80040d2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80040d6:	018b      	lsls	r3, r1, #6
 80040d8:	1a5b      	subs	r3, r3, r1
 80040da:	eb64 0402 	sbc.w	r4, r4, r2
 80040de:	f04f 0100 	mov.w	r1, #0
 80040e2:	f04f 0200 	mov.w	r2, #0
 80040e6:	00e2      	lsls	r2, r4, #3
 80040e8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80040ec:	00d9      	lsls	r1, r3, #3
 80040ee:	460b      	mov	r3, r1
 80040f0:	4614      	mov	r4, r2
 80040f2:	195b      	adds	r3, r3, r5
 80040f4:	eb44 0406 	adc.w	r4, r4, r6
 80040f8:	f04f 0100 	mov.w	r1, #0
 80040fc:	f04f 0200 	mov.w	r2, #0
 8004100:	02a2      	lsls	r2, r4, #10
 8004102:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004106:	0299      	lsls	r1, r3, #10
 8004108:	460b      	mov	r3, r1
 800410a:	4614      	mov	r4, r2
 800410c:	4618      	mov	r0, r3
 800410e:	4621      	mov	r1, r4
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f04f 0400 	mov.w	r4, #0
 8004116:	461a      	mov	r2, r3
 8004118:	4623      	mov	r3, r4
 800411a:	f7fc fc91 	bl	8000a40 <__aeabi_uldivmod>
 800411e:	4603      	mov	r3, r0
 8004120:	460c      	mov	r4, r1
 8004122:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004124:	4b60      	ldr	r3, [pc, #384]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	0c1b      	lsrs	r3, r3, #16
 800412a:	f003 0303 	and.w	r3, r3, #3
 800412e:	3301      	adds	r3, #1
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	fbb2 f3f3 	udiv	r3, r2, r3
 800413c:	613b      	str	r3, [r7, #16]
      break;
 800413e:	e0ae      	b.n	800429e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004140:	4b59      	ldr	r3, [pc, #356]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004148:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800414a:	4b57      	ldr	r3, [pc, #348]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x334>)
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d04a      	beq.n	80041ec <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004156:	4b54      	ldr	r3, [pc, #336]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	099b      	lsrs	r3, r3, #6
 800415c:	f04f 0400 	mov.w	r4, #0
 8004160:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004164:	f04f 0200 	mov.w	r2, #0
 8004168:	ea03 0501 	and.w	r5, r3, r1
 800416c:	ea04 0602 	and.w	r6, r4, r2
 8004170:	4629      	mov	r1, r5
 8004172:	4632      	mov	r2, r6
 8004174:	f04f 0300 	mov.w	r3, #0
 8004178:	f04f 0400 	mov.w	r4, #0
 800417c:	0154      	lsls	r4, r2, #5
 800417e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004182:	014b      	lsls	r3, r1, #5
 8004184:	4619      	mov	r1, r3
 8004186:	4622      	mov	r2, r4
 8004188:	1b49      	subs	r1, r1, r5
 800418a:	eb62 0206 	sbc.w	r2, r2, r6
 800418e:	f04f 0300 	mov.w	r3, #0
 8004192:	f04f 0400 	mov.w	r4, #0
 8004196:	0194      	lsls	r4, r2, #6
 8004198:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800419c:	018b      	lsls	r3, r1, #6
 800419e:	1a5b      	subs	r3, r3, r1
 80041a0:	eb64 0402 	sbc.w	r4, r4, r2
 80041a4:	f04f 0100 	mov.w	r1, #0
 80041a8:	f04f 0200 	mov.w	r2, #0
 80041ac:	00e2      	lsls	r2, r4, #3
 80041ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80041b2:	00d9      	lsls	r1, r3, #3
 80041b4:	460b      	mov	r3, r1
 80041b6:	4614      	mov	r4, r2
 80041b8:	195b      	adds	r3, r3, r5
 80041ba:	eb44 0406 	adc.w	r4, r4, r6
 80041be:	f04f 0100 	mov.w	r1, #0
 80041c2:	f04f 0200 	mov.w	r2, #0
 80041c6:	0262      	lsls	r2, r4, #9
 80041c8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80041cc:	0259      	lsls	r1, r3, #9
 80041ce:	460b      	mov	r3, r1
 80041d0:	4614      	mov	r4, r2
 80041d2:	4618      	mov	r0, r3
 80041d4:	4621      	mov	r1, r4
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f04f 0400 	mov.w	r4, #0
 80041dc:	461a      	mov	r2, r3
 80041de:	4623      	mov	r3, r4
 80041e0:	f7fc fc2e 	bl	8000a40 <__aeabi_uldivmod>
 80041e4:	4603      	mov	r3, r0
 80041e6:	460c      	mov	r4, r1
 80041e8:	617b      	str	r3, [r7, #20]
 80041ea:	e049      	b.n	8004280 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041ec:	4b2e      	ldr	r3, [pc, #184]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x334>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	099b      	lsrs	r3, r3, #6
 80041f2:	f04f 0400 	mov.w	r4, #0
 80041f6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80041fa:	f04f 0200 	mov.w	r2, #0
 80041fe:	ea03 0501 	and.w	r5, r3, r1
 8004202:	ea04 0602 	and.w	r6, r4, r2
 8004206:	4629      	mov	r1, r5
 8004208:	4632      	mov	r2, r6
 800420a:	f04f 0300 	mov.w	r3, #0
 800420e:	f04f 0400 	mov.w	r4, #0
 8004212:	0154      	lsls	r4, r2, #5
 8004214:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004218:	014b      	lsls	r3, r1, #5
 800421a:	4619      	mov	r1, r3
 800421c:	4622      	mov	r2, r4
 800421e:	1b49      	subs	r1, r1, r5
 8004220:	eb62 0206 	sbc.w	r2, r2, r6
 8004224:	f04f 0300 	mov.w	r3, #0
 8004228:	f04f 0400 	mov.w	r4, #0
 800422c:	0194      	lsls	r4, r2, #6
 800422e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004232:	018b      	lsls	r3, r1, #6
 8004234:	1a5b      	subs	r3, r3, r1
 8004236:	eb64 0402 	sbc.w	r4, r4, r2
 800423a:	f04f 0100 	mov.w	r1, #0
 800423e:	f04f 0200 	mov.w	r2, #0
 8004242:	00e2      	lsls	r2, r4, #3
 8004244:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004248:	00d9      	lsls	r1, r3, #3
 800424a:	460b      	mov	r3, r1
 800424c:	4614      	mov	r4, r2
 800424e:	195b      	adds	r3, r3, r5
 8004250:	eb44 0406 	adc.w	r4, r4, r6
 8004254:	f04f 0100 	mov.w	r1, #0
 8004258:	f04f 0200 	mov.w	r2, #0
 800425c:	02a2      	lsls	r2, r4, #10
 800425e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004262:	0299      	lsls	r1, r3, #10
 8004264:	460b      	mov	r3, r1
 8004266:	4614      	mov	r4, r2
 8004268:	4618      	mov	r0, r3
 800426a:	4621      	mov	r1, r4
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f04f 0400 	mov.w	r4, #0
 8004272:	461a      	mov	r2, r3
 8004274:	4623      	mov	r3, r4
 8004276:	f7fc fbe3 	bl	8000a40 <__aeabi_uldivmod>
 800427a:	4603      	mov	r3, r0
 800427c:	460c      	mov	r4, r1
 800427e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004280:	4b09      	ldr	r3, [pc, #36]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	0f1b      	lsrs	r3, r3, #28
 8004286:	f003 0307 	and.w	r3, r3, #7
 800428a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	fbb2 f3f3 	udiv	r3, r2, r3
 8004294:	613b      	str	r3, [r7, #16]
      break;
 8004296:	e002      	b.n	800429e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004298:	4b04      	ldr	r3, [pc, #16]	; (80042ac <HAL_RCC_GetSysClockFreq+0x338>)
 800429a:	613b      	str	r3, [r7, #16]
      break;
 800429c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800429e:	693b      	ldr	r3, [r7, #16]
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	371c      	adds	r7, #28
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042a8:	40023800 	.word	0x40023800
 80042ac:	00f42400 	.word	0x00f42400
 80042b0:	007a1200 	.word	0x007a1200

080042b4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042bc:	2300      	movs	r3, #0
 80042be:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 8083 	beq.w	80043d4 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80042ce:	4b95      	ldr	r3, [pc, #596]	; (8004524 <HAL_RCC_OscConfig+0x270>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f003 030c 	and.w	r3, r3, #12
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d019      	beq.n	800430e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80042da:	4b92      	ldr	r3, [pc, #584]	; (8004524 <HAL_RCC_OscConfig+0x270>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80042e2:	2b08      	cmp	r3, #8
 80042e4:	d106      	bne.n	80042f4 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80042e6:	4b8f      	ldr	r3, [pc, #572]	; (8004524 <HAL_RCC_OscConfig+0x270>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042f2:	d00c      	beq.n	800430e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042f4:	4b8b      	ldr	r3, [pc, #556]	; (8004524 <HAL_RCC_OscConfig+0x270>)
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80042fc:	2b0c      	cmp	r3, #12
 80042fe:	d112      	bne.n	8004326 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004300:	4b88      	ldr	r3, [pc, #544]	; (8004524 <HAL_RCC_OscConfig+0x270>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004308:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800430c:	d10b      	bne.n	8004326 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800430e:	4b85      	ldr	r3, [pc, #532]	; (8004524 <HAL_RCC_OscConfig+0x270>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d05b      	beq.n	80043d2 <HAL_RCC_OscConfig+0x11e>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d157      	bne.n	80043d2 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e216      	b.n	8004754 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800432e:	d106      	bne.n	800433e <HAL_RCC_OscConfig+0x8a>
 8004330:	4b7c      	ldr	r3, [pc, #496]	; (8004524 <HAL_RCC_OscConfig+0x270>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a7b      	ldr	r2, [pc, #492]	; (8004524 <HAL_RCC_OscConfig+0x270>)
 8004336:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800433a:	6013      	str	r3, [r2, #0]
 800433c:	e01d      	b.n	800437a <HAL_RCC_OscConfig+0xc6>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004346:	d10c      	bne.n	8004362 <HAL_RCC_OscConfig+0xae>
 8004348:	4b76      	ldr	r3, [pc, #472]	; (8004524 <HAL_RCC_OscConfig+0x270>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a75      	ldr	r2, [pc, #468]	; (8004524 <HAL_RCC_OscConfig+0x270>)
 800434e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004352:	6013      	str	r3, [r2, #0]
 8004354:	4b73      	ldr	r3, [pc, #460]	; (8004524 <HAL_RCC_OscConfig+0x270>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a72      	ldr	r2, [pc, #456]	; (8004524 <HAL_RCC_OscConfig+0x270>)
 800435a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800435e:	6013      	str	r3, [r2, #0]
 8004360:	e00b      	b.n	800437a <HAL_RCC_OscConfig+0xc6>
 8004362:	4b70      	ldr	r3, [pc, #448]	; (8004524 <HAL_RCC_OscConfig+0x270>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a6f      	ldr	r2, [pc, #444]	; (8004524 <HAL_RCC_OscConfig+0x270>)
 8004368:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	4b6d      	ldr	r3, [pc, #436]	; (8004524 <HAL_RCC_OscConfig+0x270>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a6c      	ldr	r2, [pc, #432]	; (8004524 <HAL_RCC_OscConfig+0x270>)
 8004374:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004378:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d013      	beq.n	80043aa <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004382:	f7fe f8b1 	bl	80024e8 <HAL_GetTick>
 8004386:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004388:	e008      	b.n	800439c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800438a:	f7fe f8ad 	bl	80024e8 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b64      	cmp	r3, #100	; 0x64
 8004396:	d901      	bls.n	800439c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e1db      	b.n	8004754 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800439c:	4b61      	ldr	r3, [pc, #388]	; (8004524 <HAL_RCC_OscConfig+0x270>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d0f0      	beq.n	800438a <HAL_RCC_OscConfig+0xd6>
 80043a8:	e014      	b.n	80043d4 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043aa:	f7fe f89d 	bl	80024e8 <HAL_GetTick>
 80043ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043b0:	e008      	b.n	80043c4 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043b2:	f7fe f899 	bl	80024e8 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b64      	cmp	r3, #100	; 0x64
 80043be:	d901      	bls.n	80043c4 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e1c7      	b.n	8004754 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043c4:	4b57      	ldr	r3, [pc, #348]	; (8004524 <HAL_RCC_OscConfig+0x270>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1f0      	bne.n	80043b2 <HAL_RCC_OscConfig+0xfe>
 80043d0:	e000      	b.n	80043d4 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d06f      	beq.n	80044c0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80043e0:	4b50      	ldr	r3, [pc, #320]	; (8004524 <HAL_RCC_OscConfig+0x270>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f003 030c 	and.w	r3, r3, #12
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d017      	beq.n	800441c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80043ec:	4b4d      	ldr	r3, [pc, #308]	; (8004524 <HAL_RCC_OscConfig+0x270>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d105      	bne.n	8004404 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80043f8:	4b4a      	ldr	r3, [pc, #296]	; (8004524 <HAL_RCC_OscConfig+0x270>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00b      	beq.n	800441c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004404:	4b47      	ldr	r3, [pc, #284]	; (8004524 <HAL_RCC_OscConfig+0x270>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800440c:	2b0c      	cmp	r3, #12
 800440e:	d11c      	bne.n	800444a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004410:	4b44      	ldr	r3, [pc, #272]	; (8004524 <HAL_RCC_OscConfig+0x270>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d116      	bne.n	800444a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800441c:	4b41      	ldr	r3, [pc, #260]	; (8004524 <HAL_RCC_OscConfig+0x270>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d005      	beq.n	8004434 <HAL_RCC_OscConfig+0x180>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d001      	beq.n	8004434 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e18f      	b.n	8004754 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004434:	4b3b      	ldr	r3, [pc, #236]	; (8004524 <HAL_RCC_OscConfig+0x270>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	00db      	lsls	r3, r3, #3
 8004442:	4938      	ldr	r1, [pc, #224]	; (8004524 <HAL_RCC_OscConfig+0x270>)
 8004444:	4313      	orrs	r3, r2
 8004446:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004448:	e03a      	b.n	80044c0 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d020      	beq.n	8004494 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004452:	4b35      	ldr	r3, [pc, #212]	; (8004528 <HAL_RCC_OscConfig+0x274>)
 8004454:	2201      	movs	r2, #1
 8004456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004458:	f7fe f846 	bl	80024e8 <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004460:	f7fe f842 	bl	80024e8 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b02      	cmp	r3, #2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e170      	b.n	8004754 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004472:	4b2c      	ldr	r3, [pc, #176]	; (8004524 <HAL_RCC_OscConfig+0x270>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d0f0      	beq.n	8004460 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800447e:	4b29      	ldr	r3, [pc, #164]	; (8004524 <HAL_RCC_OscConfig+0x270>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	4925      	ldr	r1, [pc, #148]	; (8004524 <HAL_RCC_OscConfig+0x270>)
 800448e:	4313      	orrs	r3, r2
 8004490:	600b      	str	r3, [r1, #0]
 8004492:	e015      	b.n	80044c0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004494:	4b24      	ldr	r3, [pc, #144]	; (8004528 <HAL_RCC_OscConfig+0x274>)
 8004496:	2200      	movs	r2, #0
 8004498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449a:	f7fe f825 	bl	80024e8 <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044a0:	e008      	b.n	80044b4 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044a2:	f7fe f821 	bl	80024e8 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e14f      	b.n	8004754 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044b4:	4b1b      	ldr	r3, [pc, #108]	; (8004524 <HAL_RCC_OscConfig+0x270>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1f0      	bne.n	80044a2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0308 	and.w	r3, r3, #8
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d037      	beq.n	800453c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d016      	beq.n	8004502 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044d4:	4b15      	ldr	r3, [pc, #84]	; (800452c <HAL_RCC_OscConfig+0x278>)
 80044d6:	2201      	movs	r2, #1
 80044d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044da:	f7fe f805 	bl	80024e8 <HAL_GetTick>
 80044de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044e0:	e008      	b.n	80044f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044e2:	f7fe f801 	bl	80024e8 <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d901      	bls.n	80044f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e12f      	b.n	8004754 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044f4:	4b0b      	ldr	r3, [pc, #44]	; (8004524 <HAL_RCC_OscConfig+0x270>)
 80044f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d0f0      	beq.n	80044e2 <HAL_RCC_OscConfig+0x22e>
 8004500:	e01c      	b.n	800453c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004502:	4b0a      	ldr	r3, [pc, #40]	; (800452c <HAL_RCC_OscConfig+0x278>)
 8004504:	2200      	movs	r2, #0
 8004506:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004508:	f7fd ffee 	bl	80024e8 <HAL_GetTick>
 800450c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800450e:	e00f      	b.n	8004530 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004510:	f7fd ffea 	bl	80024e8 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d908      	bls.n	8004530 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e118      	b.n	8004754 <HAL_RCC_OscConfig+0x4a0>
 8004522:	bf00      	nop
 8004524:	40023800 	.word	0x40023800
 8004528:	42470000 	.word	0x42470000
 800452c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004530:	4b8a      	ldr	r3, [pc, #552]	; (800475c <HAL_RCC_OscConfig+0x4a8>)
 8004532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1e9      	bne.n	8004510 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 8097 	beq.w	8004678 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800454a:	2300      	movs	r3, #0
 800454c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800454e:	4b83      	ldr	r3, [pc, #524]	; (800475c <HAL_RCC_OscConfig+0x4a8>)
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d10f      	bne.n	800457a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800455a:	2300      	movs	r3, #0
 800455c:	60fb      	str	r3, [r7, #12]
 800455e:	4b7f      	ldr	r3, [pc, #508]	; (800475c <HAL_RCC_OscConfig+0x4a8>)
 8004560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004562:	4a7e      	ldr	r2, [pc, #504]	; (800475c <HAL_RCC_OscConfig+0x4a8>)
 8004564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004568:	6413      	str	r3, [r2, #64]	; 0x40
 800456a:	4b7c      	ldr	r3, [pc, #496]	; (800475c <HAL_RCC_OscConfig+0x4a8>)
 800456c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004576:	2301      	movs	r3, #1
 8004578:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800457a:	4b79      	ldr	r3, [pc, #484]	; (8004760 <HAL_RCC_OscConfig+0x4ac>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004582:	2b00      	cmp	r3, #0
 8004584:	d118      	bne.n	80045b8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004586:	4b76      	ldr	r3, [pc, #472]	; (8004760 <HAL_RCC_OscConfig+0x4ac>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a75      	ldr	r2, [pc, #468]	; (8004760 <HAL_RCC_OscConfig+0x4ac>)
 800458c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004592:	f7fd ffa9 	bl	80024e8 <HAL_GetTick>
 8004596:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004598:	e008      	b.n	80045ac <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800459a:	f7fd ffa5 	bl	80024e8 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e0d3      	b.n	8004754 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ac:	4b6c      	ldr	r3, [pc, #432]	; (8004760 <HAL_RCC_OscConfig+0x4ac>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d0f0      	beq.n	800459a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d106      	bne.n	80045ce <HAL_RCC_OscConfig+0x31a>
 80045c0:	4b66      	ldr	r3, [pc, #408]	; (800475c <HAL_RCC_OscConfig+0x4a8>)
 80045c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c4:	4a65      	ldr	r2, [pc, #404]	; (800475c <HAL_RCC_OscConfig+0x4a8>)
 80045c6:	f043 0301 	orr.w	r3, r3, #1
 80045ca:	6713      	str	r3, [r2, #112]	; 0x70
 80045cc:	e01c      	b.n	8004608 <HAL_RCC_OscConfig+0x354>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	2b05      	cmp	r3, #5
 80045d4:	d10c      	bne.n	80045f0 <HAL_RCC_OscConfig+0x33c>
 80045d6:	4b61      	ldr	r3, [pc, #388]	; (800475c <HAL_RCC_OscConfig+0x4a8>)
 80045d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045da:	4a60      	ldr	r2, [pc, #384]	; (800475c <HAL_RCC_OscConfig+0x4a8>)
 80045dc:	f043 0304 	orr.w	r3, r3, #4
 80045e0:	6713      	str	r3, [r2, #112]	; 0x70
 80045e2:	4b5e      	ldr	r3, [pc, #376]	; (800475c <HAL_RCC_OscConfig+0x4a8>)
 80045e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e6:	4a5d      	ldr	r2, [pc, #372]	; (800475c <HAL_RCC_OscConfig+0x4a8>)
 80045e8:	f043 0301 	orr.w	r3, r3, #1
 80045ec:	6713      	str	r3, [r2, #112]	; 0x70
 80045ee:	e00b      	b.n	8004608 <HAL_RCC_OscConfig+0x354>
 80045f0:	4b5a      	ldr	r3, [pc, #360]	; (800475c <HAL_RCC_OscConfig+0x4a8>)
 80045f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f4:	4a59      	ldr	r2, [pc, #356]	; (800475c <HAL_RCC_OscConfig+0x4a8>)
 80045f6:	f023 0301 	bic.w	r3, r3, #1
 80045fa:	6713      	str	r3, [r2, #112]	; 0x70
 80045fc:	4b57      	ldr	r3, [pc, #348]	; (800475c <HAL_RCC_OscConfig+0x4a8>)
 80045fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004600:	4a56      	ldr	r2, [pc, #344]	; (800475c <HAL_RCC_OscConfig+0x4a8>)
 8004602:	f023 0304 	bic.w	r3, r3, #4
 8004606:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d015      	beq.n	800463c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004610:	f7fd ff6a 	bl	80024e8 <HAL_GetTick>
 8004614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004616:	e00a      	b.n	800462e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004618:	f7fd ff66 	bl	80024e8 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	f241 3288 	movw	r2, #5000	; 0x1388
 8004626:	4293      	cmp	r3, r2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e092      	b.n	8004754 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800462e:	4b4b      	ldr	r3, [pc, #300]	; (800475c <HAL_RCC_OscConfig+0x4a8>)
 8004630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d0ee      	beq.n	8004618 <HAL_RCC_OscConfig+0x364>
 800463a:	e014      	b.n	8004666 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800463c:	f7fd ff54 	bl	80024e8 <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004642:	e00a      	b.n	800465a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004644:	f7fd ff50 	bl	80024e8 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004652:	4293      	cmp	r3, r2
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e07c      	b.n	8004754 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800465a:	4b40      	ldr	r3, [pc, #256]	; (800475c <HAL_RCC_OscConfig+0x4a8>)
 800465c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1ee      	bne.n	8004644 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004666:	7dfb      	ldrb	r3, [r7, #23]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d105      	bne.n	8004678 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800466c:	4b3b      	ldr	r3, [pc, #236]	; (800475c <HAL_RCC_OscConfig+0x4a8>)
 800466e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004670:	4a3a      	ldr	r2, [pc, #232]	; (800475c <HAL_RCC_OscConfig+0x4a8>)
 8004672:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004676:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d068      	beq.n	8004752 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004680:	4b36      	ldr	r3, [pc, #216]	; (800475c <HAL_RCC_OscConfig+0x4a8>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f003 030c 	and.w	r3, r3, #12
 8004688:	2b08      	cmp	r3, #8
 800468a:	d060      	beq.n	800474e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	2b02      	cmp	r3, #2
 8004692:	d145      	bne.n	8004720 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004694:	4b33      	ldr	r3, [pc, #204]	; (8004764 <HAL_RCC_OscConfig+0x4b0>)
 8004696:	2200      	movs	r2, #0
 8004698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800469a:	f7fd ff25 	bl	80024e8 <HAL_GetTick>
 800469e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046a0:	e008      	b.n	80046b4 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046a2:	f7fd ff21 	bl	80024e8 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e04f      	b.n	8004754 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046b4:	4b29      	ldr	r3, [pc, #164]	; (800475c <HAL_RCC_OscConfig+0x4a8>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1f0      	bne.n	80046a2 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	69da      	ldr	r2, [r3, #28]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	431a      	orrs	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ce:	019b      	lsls	r3, r3, #6
 80046d0:	431a      	orrs	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d6:	085b      	lsrs	r3, r3, #1
 80046d8:	3b01      	subs	r3, #1
 80046da:	041b      	lsls	r3, r3, #16
 80046dc:	431a      	orrs	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e2:	061b      	lsls	r3, r3, #24
 80046e4:	431a      	orrs	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ea:	071b      	lsls	r3, r3, #28
 80046ec:	491b      	ldr	r1, [pc, #108]	; (800475c <HAL_RCC_OscConfig+0x4a8>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046f2:	4b1c      	ldr	r3, [pc, #112]	; (8004764 <HAL_RCC_OscConfig+0x4b0>)
 80046f4:	2201      	movs	r2, #1
 80046f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f8:	f7fd fef6 	bl	80024e8 <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004700:	f7fd fef2 	bl	80024e8 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e020      	b.n	8004754 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004712:	4b12      	ldr	r3, [pc, #72]	; (800475c <HAL_RCC_OscConfig+0x4a8>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d0f0      	beq.n	8004700 <HAL_RCC_OscConfig+0x44c>
 800471e:	e018      	b.n	8004752 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004720:	4b10      	ldr	r3, [pc, #64]	; (8004764 <HAL_RCC_OscConfig+0x4b0>)
 8004722:	2200      	movs	r2, #0
 8004724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004726:	f7fd fedf 	bl	80024e8 <HAL_GetTick>
 800472a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800472c:	e008      	b.n	8004740 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800472e:	f7fd fedb 	bl	80024e8 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b02      	cmp	r3, #2
 800473a:	d901      	bls.n	8004740 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e009      	b.n	8004754 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004740:	4b06      	ldr	r3, [pc, #24]	; (800475c <HAL_RCC_OscConfig+0x4a8>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1f0      	bne.n	800472e <HAL_RCC_OscConfig+0x47a>
 800474c:	e001      	b.n	8004752 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e000      	b.n	8004754 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3718      	adds	r7, #24
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	40023800 	.word	0x40023800
 8004760:	40007000 	.word	0x40007000
 8004764:	42470060 	.word	0x42470060

08004768 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e056      	b.n	8004828 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2b00      	cmp	r3, #0
 800478a:	d106      	bne.n	800479a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f7fd fc29 	bl	8001fec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2202      	movs	r2, #2
 800479e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047b0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685a      	ldr	r2, [r3, #4]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	431a      	orrs	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	431a      	orrs	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	431a      	orrs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	431a      	orrs	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047d6:	431a      	orrs	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	69db      	ldr	r3, [r3, #28]
 80047dc:	431a      	orrs	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	ea42 0103 	orr.w	r1, r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	430a      	orrs	r2, r1
 80047f0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	0c1b      	lsrs	r3, r3, #16
 80047f8:	f003 0104 	and.w	r1, r3, #4
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	69da      	ldr	r2, [r3, #28]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004816:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3708      	adds	r7, #8
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e01d      	b.n	800487e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d106      	bne.n	800485c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f7fd fc10 	bl	800207c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2202      	movs	r2, #2
 8004860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	3304      	adds	r3, #4
 800486c:	4619      	mov	r1, r3
 800486e:	4610      	mov	r0, r2
 8004870:	f000 fb32 	bl	8004ed8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3708      	adds	r7, #8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004886:	b480      	push	{r7}
 8004888:	b085      	sub	sp, #20
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2202      	movs	r2, #2
 8004892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f003 0307 	and.w	r3, r3, #7
 80048a0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2b06      	cmp	r3, #6
 80048a6:	d007      	beq.n	80048b8 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f042 0201 	orr.w	r2, r2, #1
 80048b6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3714      	adds	r7, #20
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b082      	sub	sp, #8
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d101      	bne.n	80048e0 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e01d      	b.n	800491c <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d106      	bne.n	80048fa <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f815 	bl	8004924 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2202      	movs	r2, #2
 80048fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	3304      	adds	r3, #4
 800490a:	4619      	mov	r1, r3
 800490c:	4610      	mov	r0, r2
 800490e:	f000 fae3 	bl	8004ed8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	3708      	adds	r7, #8
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800492c:	bf00      	nop
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b02      	cmp	r3, #2
 800494c:	d122      	bne.n	8004994 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b02      	cmp	r3, #2
 800495a:	d11b      	bne.n	8004994 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f06f 0202 	mvn.w	r2, #2
 8004964:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	f003 0303 	and.w	r3, r3, #3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 fa8d 	bl	8004e9a <HAL_TIM_IC_CaptureCallback>
 8004980:	e005      	b.n	800498e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 fa7f 	bl	8004e86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 fa90 	bl	8004eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	f003 0304 	and.w	r3, r3, #4
 800499e:	2b04      	cmp	r3, #4
 80049a0:	d122      	bne.n	80049e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	f003 0304 	and.w	r3, r3, #4
 80049ac:	2b04      	cmp	r3, #4
 80049ae:	d11b      	bne.n	80049e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f06f 0204 	mvn.w	r2, #4
 80049b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2202      	movs	r2, #2
 80049be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 fa63 	bl	8004e9a <HAL_TIM_IC_CaptureCallback>
 80049d4:	e005      	b.n	80049e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 fa55 	bl	8004e86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 fa66 	bl	8004eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	f003 0308 	and.w	r3, r3, #8
 80049f2:	2b08      	cmp	r3, #8
 80049f4:	d122      	bne.n	8004a3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	f003 0308 	and.w	r3, r3, #8
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d11b      	bne.n	8004a3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f06f 0208 	mvn.w	r2, #8
 8004a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2204      	movs	r2, #4
 8004a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	f003 0303 	and.w	r3, r3, #3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d003      	beq.n	8004a2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 fa39 	bl	8004e9a <HAL_TIM_IC_CaptureCallback>
 8004a28:	e005      	b.n	8004a36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 fa2b 	bl	8004e86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 fa3c 	bl	8004eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	f003 0310 	and.w	r3, r3, #16
 8004a46:	2b10      	cmp	r3, #16
 8004a48:	d122      	bne.n	8004a90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f003 0310 	and.w	r3, r3, #16
 8004a54:	2b10      	cmp	r3, #16
 8004a56:	d11b      	bne.n	8004a90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f06f 0210 	mvn.w	r2, #16
 8004a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2208      	movs	r2, #8
 8004a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d003      	beq.n	8004a7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 fa0f 	bl	8004e9a <HAL_TIM_IC_CaptureCallback>
 8004a7c:	e005      	b.n	8004a8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 fa01 	bl	8004e86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 fa12 	bl	8004eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d10e      	bne.n	8004abc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d107      	bne.n	8004abc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f06f 0201 	mvn.w	r2, #1
 8004ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f9db 	bl	8004e72 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac6:	2b80      	cmp	r3, #128	; 0x80
 8004ac8:	d10e      	bne.n	8004ae8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad4:	2b80      	cmp	r3, #128	; 0x80
 8004ad6:	d107      	bne.n	8004ae8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 fd68 	bl	80055b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af2:	2b40      	cmp	r3, #64	; 0x40
 8004af4:	d10e      	bne.n	8004b14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b00:	2b40      	cmp	r3, #64	; 0x40
 8004b02:	d107      	bne.n	8004b14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f9d7 	bl	8004ec2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	f003 0320 	and.w	r3, r3, #32
 8004b1e:	2b20      	cmp	r3, #32
 8004b20:	d10e      	bne.n	8004b40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	f003 0320 	and.w	r3, r3, #32
 8004b2c:	2b20      	cmp	r3, #32
 8004b2e:	d107      	bne.n	8004b40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f06f 0220 	mvn.w	r2, #32
 8004b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 fd32 	bl	80055a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b40:	bf00      	nop
 8004b42:	3708      	adds	r7, #8
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d101      	bne.n	8004b62 <HAL_TIM_IC_ConfigChannel+0x1a>
 8004b5e:	2302      	movs	r3, #2
 8004b60:	e08a      	b.n	8004c78 <HAL_TIM_IC_ConfigChannel+0x130>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2202      	movs	r2, #2
 8004b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d11b      	bne.n	8004bb0 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6818      	ldr	r0, [r3, #0]
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	6819      	ldr	r1, [r3, #0]
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	f000 facc 	bl	8005124 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	699a      	ldr	r2, [r3, #24]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 020c 	bic.w	r2, r2, #12
 8004b9a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6999      	ldr	r1, [r3, #24]
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	689a      	ldr	r2, [r3, #8]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	619a      	str	r2, [r3, #24]
 8004bae:	e05a      	b.n	8004c66 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2b04      	cmp	r3, #4
 8004bb4:	d11c      	bne.n	8004bf0 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6818      	ldr	r0, [r3, #0]
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	6819      	ldr	r1, [r3, #0]
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f000 fb50 	bl	800526a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	699a      	ldr	r2, [r3, #24]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004bd8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	6999      	ldr	r1, [r3, #24]
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	021a      	lsls	r2, r3, #8
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	430a      	orrs	r2, r1
 8004bec:	619a      	str	r2, [r3, #24]
 8004bee:	e03a      	b.n	8004c66 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b08      	cmp	r3, #8
 8004bf4:	d11b      	bne.n	8004c2e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6818      	ldr	r0, [r3, #0]
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	6819      	ldr	r1, [r3, #0]
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	f000 fb9d 	bl	8005344 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	69da      	ldr	r2, [r3, #28]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 020c 	bic.w	r2, r2, #12
 8004c18:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	69d9      	ldr	r1, [r3, #28]
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	689a      	ldr	r2, [r3, #8]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	61da      	str	r2, [r3, #28]
 8004c2c:	e01b      	b.n	8004c66 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6818      	ldr	r0, [r3, #0]
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	6819      	ldr	r1, [r3, #0]
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	f000 fbbd 	bl	80053bc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	69da      	ldr	r2, [r3, #28]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004c50:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	69d9      	ldr	r1, [r3, #28]
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	021a      	lsls	r2, r3, #8
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	430a      	orrs	r2, r1
 8004c64:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d101      	bne.n	8004c98 <HAL_TIM_ConfigClockSource+0x18>
 8004c94:	2302      	movs	r3, #2
 8004c96:	e0a6      	b.n	8004de6 <HAL_TIM_ConfigClockSource+0x166>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004cb6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cbe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2b40      	cmp	r3, #64	; 0x40
 8004cce:	d067      	beq.n	8004da0 <HAL_TIM_ConfigClockSource+0x120>
 8004cd0:	2b40      	cmp	r3, #64	; 0x40
 8004cd2:	d80b      	bhi.n	8004cec <HAL_TIM_ConfigClockSource+0x6c>
 8004cd4:	2b10      	cmp	r3, #16
 8004cd6:	d073      	beq.n	8004dc0 <HAL_TIM_ConfigClockSource+0x140>
 8004cd8:	2b10      	cmp	r3, #16
 8004cda:	d802      	bhi.n	8004ce2 <HAL_TIM_ConfigClockSource+0x62>
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d06f      	beq.n	8004dc0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004ce0:	e078      	b.n	8004dd4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004ce2:	2b20      	cmp	r3, #32
 8004ce4:	d06c      	beq.n	8004dc0 <HAL_TIM_ConfigClockSource+0x140>
 8004ce6:	2b30      	cmp	r3, #48	; 0x30
 8004ce8:	d06a      	beq.n	8004dc0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004cea:	e073      	b.n	8004dd4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004cec:	2b70      	cmp	r3, #112	; 0x70
 8004cee:	d00d      	beq.n	8004d0c <HAL_TIM_ConfigClockSource+0x8c>
 8004cf0:	2b70      	cmp	r3, #112	; 0x70
 8004cf2:	d804      	bhi.n	8004cfe <HAL_TIM_ConfigClockSource+0x7e>
 8004cf4:	2b50      	cmp	r3, #80	; 0x50
 8004cf6:	d033      	beq.n	8004d60 <HAL_TIM_ConfigClockSource+0xe0>
 8004cf8:	2b60      	cmp	r3, #96	; 0x60
 8004cfa:	d041      	beq.n	8004d80 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004cfc:	e06a      	b.n	8004dd4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d02:	d066      	beq.n	8004dd2 <HAL_TIM_ConfigClockSource+0x152>
 8004d04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d08:	d017      	beq.n	8004d3a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004d0a:	e063      	b.n	8004dd4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6818      	ldr	r0, [r3, #0]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	6899      	ldr	r1, [r3, #8]
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685a      	ldr	r2, [r3, #4]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f000 fba6 	bl	800546c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d2e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	609a      	str	r2, [r3, #8]
      break;
 8004d38:	e04c      	b.n	8004dd4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6818      	ldr	r0, [r3, #0]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	6899      	ldr	r1, [r3, #8]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	f000 fb8f 	bl	800546c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689a      	ldr	r2, [r3, #8]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d5c:	609a      	str	r2, [r3, #8]
      break;
 8004d5e:	e039      	b.n	8004dd4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6818      	ldr	r0, [r3, #0]
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	6859      	ldr	r1, [r3, #4]
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	f000 fa4d 	bl	800520c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2150      	movs	r1, #80	; 0x50
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f000 fb5c 	bl	8005436 <TIM_ITRx_SetConfig>
      break;
 8004d7e:	e029      	b.n	8004dd4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6818      	ldr	r0, [r3, #0]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	6859      	ldr	r1, [r3, #4]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	f000 faa9 	bl	80052e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2160      	movs	r1, #96	; 0x60
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f000 fb4c 	bl	8005436 <TIM_ITRx_SetConfig>
      break;
 8004d9e:	e019      	b.n	8004dd4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6818      	ldr	r0, [r3, #0]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	6859      	ldr	r1, [r3, #4]
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	461a      	mov	r2, r3
 8004dae:	f000 fa2d 	bl	800520c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2140      	movs	r1, #64	; 0x40
 8004db8:	4618      	mov	r0, r3
 8004dba:	f000 fb3c 	bl	8005436 <TIM_ITRx_SetConfig>
      break;
 8004dbe:	e009      	b.n	8004dd4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4619      	mov	r1, r3
 8004dca:	4610      	mov	r0, r2
 8004dcc:	f000 fb33 	bl	8005436 <TIM_ITRx_SetConfig>
      break;
 8004dd0:	e000      	b.n	8004dd4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004dd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b082      	sub	sp, #8
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
 8004df6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d101      	bne.n	8004e06 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004e02:	2302      	movs	r3, #2
 8004e04:	e031      	b.n	8004e6a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2202      	movs	r2, #2
 8004e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004e16:	6839      	ldr	r1, [r7, #0]
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 f8fd 	bl	8005018 <TIM_SlaveTimer_SetConfig>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d009      	beq.n	8004e38 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e018      	b.n	8004e6a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68da      	ldr	r2, [r3, #12]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e46:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68da      	ldr	r2, [r3, #12]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e56:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3708      	adds	r7, #8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e72:	b480      	push	{r7}
 8004e74:	b083      	sub	sp, #12
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004e7a:	bf00      	nop
 8004e7c:	370c      	adds	r7, #12
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr

08004e86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e86:	b480      	push	{r7}
 8004e88:	b083      	sub	sp, #12
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e8e:	bf00      	nop
 8004e90:	370c      	adds	r7, #12
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr

08004e9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b083      	sub	sp, #12
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ea2:	bf00      	nop
 8004ea4:	370c      	adds	r7, #12
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b083      	sub	sp, #12
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004eb6:	bf00      	nop
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b083      	sub	sp, #12
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004eca:	bf00      	nop
 8004ecc:	370c      	adds	r7, #12
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
	...

08004ed8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a40      	ldr	r2, [pc, #256]	; (8004fec <TIM_Base_SetConfig+0x114>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d013      	beq.n	8004f18 <TIM_Base_SetConfig+0x40>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ef6:	d00f      	beq.n	8004f18 <TIM_Base_SetConfig+0x40>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a3d      	ldr	r2, [pc, #244]	; (8004ff0 <TIM_Base_SetConfig+0x118>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d00b      	beq.n	8004f18 <TIM_Base_SetConfig+0x40>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a3c      	ldr	r2, [pc, #240]	; (8004ff4 <TIM_Base_SetConfig+0x11c>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d007      	beq.n	8004f18 <TIM_Base_SetConfig+0x40>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a3b      	ldr	r2, [pc, #236]	; (8004ff8 <TIM_Base_SetConfig+0x120>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d003      	beq.n	8004f18 <TIM_Base_SetConfig+0x40>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a3a      	ldr	r2, [pc, #232]	; (8004ffc <TIM_Base_SetConfig+0x124>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d108      	bne.n	8004f2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a2f      	ldr	r2, [pc, #188]	; (8004fec <TIM_Base_SetConfig+0x114>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d02b      	beq.n	8004f8a <TIM_Base_SetConfig+0xb2>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f38:	d027      	beq.n	8004f8a <TIM_Base_SetConfig+0xb2>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a2c      	ldr	r2, [pc, #176]	; (8004ff0 <TIM_Base_SetConfig+0x118>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d023      	beq.n	8004f8a <TIM_Base_SetConfig+0xb2>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a2b      	ldr	r2, [pc, #172]	; (8004ff4 <TIM_Base_SetConfig+0x11c>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d01f      	beq.n	8004f8a <TIM_Base_SetConfig+0xb2>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a2a      	ldr	r2, [pc, #168]	; (8004ff8 <TIM_Base_SetConfig+0x120>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d01b      	beq.n	8004f8a <TIM_Base_SetConfig+0xb2>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a29      	ldr	r2, [pc, #164]	; (8004ffc <TIM_Base_SetConfig+0x124>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d017      	beq.n	8004f8a <TIM_Base_SetConfig+0xb2>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a28      	ldr	r2, [pc, #160]	; (8005000 <TIM_Base_SetConfig+0x128>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d013      	beq.n	8004f8a <TIM_Base_SetConfig+0xb2>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a27      	ldr	r2, [pc, #156]	; (8005004 <TIM_Base_SetConfig+0x12c>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d00f      	beq.n	8004f8a <TIM_Base_SetConfig+0xb2>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a26      	ldr	r2, [pc, #152]	; (8005008 <TIM_Base_SetConfig+0x130>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d00b      	beq.n	8004f8a <TIM_Base_SetConfig+0xb2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a25      	ldr	r2, [pc, #148]	; (800500c <TIM_Base_SetConfig+0x134>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d007      	beq.n	8004f8a <TIM_Base_SetConfig+0xb2>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a24      	ldr	r2, [pc, #144]	; (8005010 <TIM_Base_SetConfig+0x138>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d003      	beq.n	8004f8a <TIM_Base_SetConfig+0xb2>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a23      	ldr	r2, [pc, #140]	; (8005014 <TIM_Base_SetConfig+0x13c>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d108      	bne.n	8004f9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	689a      	ldr	r2, [r3, #8]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a0a      	ldr	r2, [pc, #40]	; (8004fec <TIM_Base_SetConfig+0x114>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d003      	beq.n	8004fd0 <TIM_Base_SetConfig+0xf8>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a0c      	ldr	r2, [pc, #48]	; (8004ffc <TIM_Base_SetConfig+0x124>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d103      	bne.n	8004fd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	691a      	ldr	r2, [r3, #16]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	615a      	str	r2, [r3, #20]
}
 8004fde:	bf00      	nop
 8004fe0:	3714      	adds	r7, #20
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	40010000 	.word	0x40010000
 8004ff0:	40000400 	.word	0x40000400
 8004ff4:	40000800 	.word	0x40000800
 8004ff8:	40000c00 	.word	0x40000c00
 8004ffc:	40010400 	.word	0x40010400
 8005000:	40014000 	.word	0x40014000
 8005004:	40014400 	.word	0x40014400
 8005008:	40014800 	.word	0x40014800
 800500c:	40001800 	.word	0x40001800
 8005010:	40001c00 	.word	0x40001c00
 8005014:	40002000 	.word	0x40002000

08005018 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b086      	sub	sp, #24
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005030:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	4313      	orrs	r3, r2
 800503a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	f023 0307 	bic.w	r3, r3, #7
 8005042:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	4313      	orrs	r3, r2
 800504c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	2b30      	cmp	r3, #48	; 0x30
 800505c:	d05c      	beq.n	8005118 <TIM_SlaveTimer_SetConfig+0x100>
 800505e:	2b30      	cmp	r3, #48	; 0x30
 8005060:	d806      	bhi.n	8005070 <TIM_SlaveTimer_SetConfig+0x58>
 8005062:	2b10      	cmp	r3, #16
 8005064:	d058      	beq.n	8005118 <TIM_SlaveTimer_SetConfig+0x100>
 8005066:	2b20      	cmp	r3, #32
 8005068:	d056      	beq.n	8005118 <TIM_SlaveTimer_SetConfig+0x100>
 800506a:	2b00      	cmp	r3, #0
 800506c:	d054      	beq.n	8005118 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800506e:	e054      	b.n	800511a <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8005070:	2b50      	cmp	r3, #80	; 0x50
 8005072:	d03d      	beq.n	80050f0 <TIM_SlaveTimer_SetConfig+0xd8>
 8005074:	2b50      	cmp	r3, #80	; 0x50
 8005076:	d802      	bhi.n	800507e <TIM_SlaveTimer_SetConfig+0x66>
 8005078:	2b40      	cmp	r3, #64	; 0x40
 800507a:	d010      	beq.n	800509e <TIM_SlaveTimer_SetConfig+0x86>
      break;
 800507c:	e04d      	b.n	800511a <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800507e:	2b60      	cmp	r3, #96	; 0x60
 8005080:	d040      	beq.n	8005104 <TIM_SlaveTimer_SetConfig+0xec>
 8005082:	2b70      	cmp	r3, #112	; 0x70
 8005084:	d000      	beq.n	8005088 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8005086:	e048      	b.n	800511a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6818      	ldr	r0, [r3, #0]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	68d9      	ldr	r1, [r3, #12]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	689a      	ldr	r2, [r3, #8]
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	f000 f9e8 	bl	800546c <TIM_ETR_SetConfig>
      break;
 800509c:	e03d      	b.n	800511a <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2b05      	cmp	r3, #5
 80050a4:	d101      	bne.n	80050aa <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e038      	b.n	800511c <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	6a1b      	ldr	r3, [r3, #32]
 80050b0:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6a1a      	ldr	r2, [r3, #32]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 0201 	bic.w	r2, r2, #1
 80050c0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050d0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	011b      	lsls	r3, r3, #4
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	4313      	orrs	r3, r2
 80050dc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	621a      	str	r2, [r3, #32]
      break;
 80050ee:	e014      	b.n	800511a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6818      	ldr	r0, [r3, #0]
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	6899      	ldr	r1, [r3, #8]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	461a      	mov	r2, r3
 80050fe:	f000 f885 	bl	800520c <TIM_TI1_ConfigInputStage>
      break;
 8005102:	e00a      	b.n	800511a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6818      	ldr	r0, [r3, #0]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	6899      	ldr	r1, [r3, #8]
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	461a      	mov	r2, r3
 8005112:	f000 f8e7 	bl	80052e4 <TIM_TI2_ConfigInputStage>
      break;
 8005116:	e000      	b.n	800511a <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8005118:	bf00      	nop
  }
  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3718      	adds	r7, #24
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005124:	b480      	push	{r7}
 8005126:	b087      	sub	sp, #28
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
 8005130:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	f023 0201 	bic.w	r2, r3, #1
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	4a28      	ldr	r2, [pc, #160]	; (80051f0 <TIM_TI1_SetConfig+0xcc>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d01b      	beq.n	800518a <TIM_TI1_SetConfig+0x66>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005158:	d017      	beq.n	800518a <TIM_TI1_SetConfig+0x66>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	4a25      	ldr	r2, [pc, #148]	; (80051f4 <TIM_TI1_SetConfig+0xd0>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d013      	beq.n	800518a <TIM_TI1_SetConfig+0x66>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4a24      	ldr	r2, [pc, #144]	; (80051f8 <TIM_TI1_SetConfig+0xd4>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d00f      	beq.n	800518a <TIM_TI1_SetConfig+0x66>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	4a23      	ldr	r2, [pc, #140]	; (80051fc <TIM_TI1_SetConfig+0xd8>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d00b      	beq.n	800518a <TIM_TI1_SetConfig+0x66>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	4a22      	ldr	r2, [pc, #136]	; (8005200 <TIM_TI1_SetConfig+0xdc>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d007      	beq.n	800518a <TIM_TI1_SetConfig+0x66>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	4a21      	ldr	r2, [pc, #132]	; (8005204 <TIM_TI1_SetConfig+0xe0>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d003      	beq.n	800518a <TIM_TI1_SetConfig+0x66>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	4a20      	ldr	r2, [pc, #128]	; (8005208 <TIM_TI1_SetConfig+0xe4>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d101      	bne.n	800518e <TIM_TI1_SetConfig+0x6a>
 800518a:	2301      	movs	r3, #1
 800518c:	e000      	b.n	8005190 <TIM_TI1_SetConfig+0x6c>
 800518e:	2300      	movs	r3, #0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d008      	beq.n	80051a6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	f023 0303 	bic.w	r3, r3, #3
 800519a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	617b      	str	r3, [r7, #20]
 80051a4:	e003      	b.n	80051ae <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	f043 0301 	orr.w	r3, r3, #1
 80051ac:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	011b      	lsls	r3, r3, #4
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	4313      	orrs	r3, r2
 80051c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	f023 030a 	bic.w	r3, r3, #10
 80051c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	f003 030a 	and.w	r3, r3, #10
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	693a      	ldr	r2, [r7, #16]
 80051e0:	621a      	str	r2, [r3, #32]
}
 80051e2:	bf00      	nop
 80051e4:	371c      	adds	r7, #28
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	40010000 	.word	0x40010000
 80051f4:	40000400 	.word	0x40000400
 80051f8:	40000800 	.word	0x40000800
 80051fc:	40000c00 	.word	0x40000c00
 8005200:	40010400 	.word	0x40010400
 8005204:	40014000 	.word	0x40014000
 8005208:	40001800 	.word	0x40001800

0800520c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800520c:	b480      	push	{r7}
 800520e:	b087      	sub	sp, #28
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	f023 0201 	bic.w	r2, r3, #1
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005236:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	011b      	lsls	r3, r3, #4
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	4313      	orrs	r3, r2
 8005240:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f023 030a 	bic.w	r3, r3, #10
 8005248:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	4313      	orrs	r3, r2
 8005250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	621a      	str	r2, [r3, #32]
}
 800525e:	bf00      	nop
 8005260:	371c      	adds	r7, #28
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800526a:	b480      	push	{r7}
 800526c:	b087      	sub	sp, #28
 800526e:	af00      	add	r7, sp, #0
 8005270:	60f8      	str	r0, [r7, #12]
 8005272:	60b9      	str	r1, [r7, #8]
 8005274:	607a      	str	r2, [r7, #4]
 8005276:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	f023 0210 	bic.w	r2, r3, #16
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005296:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	021b      	lsls	r3, r3, #8
 800529c:	697a      	ldr	r2, [r7, #20]
 800529e:	4313      	orrs	r3, r2
 80052a0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	031b      	lsls	r3, r3, #12
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052bc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	011b      	lsls	r3, r3, #4
 80052c2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	621a      	str	r2, [r3, #32]
}
 80052d8:	bf00      	nop
 80052da:	371c      	adds	r7, #28
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b087      	sub	sp, #28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6a1b      	ldr	r3, [r3, #32]
 80052f4:	f023 0210 	bic.w	r2, r3, #16
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800530e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	031b      	lsls	r3, r3, #12
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	4313      	orrs	r3, r2
 8005318:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005320:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	011b      	lsls	r3, r3, #4
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	4313      	orrs	r3, r2
 800532a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	621a      	str	r2, [r3, #32]
}
 8005338:	bf00      	nop
 800533a:	371c      	adds	r7, #28
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005344:	b480      	push	{r7}
 8005346:	b087      	sub	sp, #28
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
 8005350:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	69db      	ldr	r3, [r3, #28]
 8005362:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6a1b      	ldr	r3, [r3, #32]
 8005368:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f023 0303 	bic.w	r3, r3, #3
 8005370:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4313      	orrs	r3, r2
 8005378:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005380:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	011b      	lsls	r3, r3, #4
 8005386:	b2db      	uxtb	r3, r3
 8005388:	697a      	ldr	r2, [r7, #20]
 800538a:	4313      	orrs	r3, r2
 800538c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005394:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	021b      	lsls	r3, r3, #8
 800539a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	621a      	str	r2, [r3, #32]
}
 80053b0:	bf00      	nop
 80053b2:	371c      	adds	r7, #28
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80053bc:	b480      	push	{r7}
 80053be:	b087      	sub	sp, #28
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
 80053c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6a1b      	ldr	r3, [r3, #32]
 80053ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053e8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	021b      	lsls	r3, r3, #8
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053fa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	031b      	lsls	r3, r3, #12
 8005400:	b29b      	uxth	r3, r3
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	4313      	orrs	r3, r2
 8005406:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800540e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	031b      	lsls	r3, r3, #12
 8005414:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	4313      	orrs	r3, r2
 800541c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	621a      	str	r2, [r3, #32]
}
 800542a:	bf00      	nop
 800542c:	371c      	adds	r7, #28
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005436:	b480      	push	{r7}
 8005438:	b085      	sub	sp, #20
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
 800543e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800544c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800544e:	683a      	ldr	r2, [r7, #0]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	4313      	orrs	r3, r2
 8005454:	f043 0307 	orr.w	r3, r3, #7
 8005458:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	609a      	str	r2, [r3, #8]
}
 8005460:	bf00      	nop
 8005462:	3714      	adds	r7, #20
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800546c:	b480      	push	{r7}
 800546e:	b087      	sub	sp, #28
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
 8005478:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005486:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	021a      	lsls	r2, r3, #8
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	431a      	orrs	r2, r3
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	4313      	orrs	r3, r2
 8005494:	697a      	ldr	r2, [r7, #20]
 8005496:	4313      	orrs	r3, r2
 8005498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	609a      	str	r2, [r3, #8]
}
 80054a0:	bf00      	nop
 80054a2:	371c      	adds	r7, #28
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d101      	bne.n	80054c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054c0:	2302      	movs	r3, #2
 80054c2:	e05a      	b.n	800557a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2202      	movs	r2, #2
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a21      	ldr	r2, [pc, #132]	; (8005588 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d022      	beq.n	800554e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005510:	d01d      	beq.n	800554e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a1d      	ldr	r2, [pc, #116]	; (800558c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d018      	beq.n	800554e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a1b      	ldr	r2, [pc, #108]	; (8005590 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d013      	beq.n	800554e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a1a      	ldr	r2, [pc, #104]	; (8005594 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d00e      	beq.n	800554e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a18      	ldr	r2, [pc, #96]	; (8005598 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d009      	beq.n	800554e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a17      	ldr	r2, [pc, #92]	; (800559c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d004      	beq.n	800554e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a15      	ldr	r2, [pc, #84]	; (80055a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d10c      	bne.n	8005568 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005554:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	68ba      	ldr	r2, [r7, #8]
 800555c:	4313      	orrs	r3, r2
 800555e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3714      	adds	r7, #20
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	40010000 	.word	0x40010000
 800558c:	40000400 	.word	0x40000400
 8005590:	40000800 	.word	0x40000800
 8005594:	40000c00 	.word	0x40000c00
 8005598:	40010400 	.word	0x40010400
 800559c:	40014000 	.word	0x40014000
 80055a0:	40001800 	.word	0x40001800

080055a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e03f      	b.n	800565e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d106      	bne.n	80055f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f7fc fdbc 	bl	8002170 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2224      	movs	r2, #36	; 0x24
 80055fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68da      	ldr	r2, [r3, #12]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800560e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 fc57 	bl	8005ec4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	691a      	ldr	r2, [r3, #16]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005624:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	695a      	ldr	r2, [r3, #20]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005634:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68da      	ldr	r2, [r3, #12]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005644:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2220      	movs	r2, #32
 8005650:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2220      	movs	r2, #32
 8005658:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b088      	sub	sp, #32
 800566a:	af02      	add	r7, sp, #8
 800566c:	60f8      	str	r0, [r7, #12]
 800566e:	60b9      	str	r1, [r7, #8]
 8005670:	603b      	str	r3, [r7, #0]
 8005672:	4613      	mov	r3, r2
 8005674:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005676:	2300      	movs	r3, #0
 8005678:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b20      	cmp	r3, #32
 8005684:	f040 8083 	bne.w	800578e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d002      	beq.n	8005694 <HAL_UART_Transmit+0x2e>
 800568e:	88fb      	ldrh	r3, [r7, #6]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e07b      	b.n	8005790 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d101      	bne.n	80056a6 <HAL_UART_Transmit+0x40>
 80056a2:	2302      	movs	r3, #2
 80056a4:	e074      	b.n	8005790 <HAL_UART_Transmit+0x12a>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2221      	movs	r2, #33	; 0x21
 80056b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80056bc:	f7fc ff14 	bl	80024e8 <HAL_GetTick>
 80056c0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	88fa      	ldrh	r2, [r7, #6]
 80056c6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	88fa      	ldrh	r2, [r7, #6]
 80056cc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80056d6:	e042      	b.n	800575e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056dc:	b29b      	uxth	r3, r3
 80056de:	3b01      	subs	r3, #1
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ee:	d122      	bne.n	8005736 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	2200      	movs	r2, #0
 80056f8:	2180      	movs	r1, #128	; 0x80
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f000 fa61 	bl	8005bc2 <UART_WaitOnFlagUntilTimeout>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d001      	beq.n	800570a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e042      	b.n	8005790 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	881b      	ldrh	r3, [r3, #0]
 8005712:	461a      	mov	r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800571c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d103      	bne.n	800572e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	3302      	adds	r3, #2
 800572a:	60bb      	str	r3, [r7, #8]
 800572c:	e017      	b.n	800575e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	3301      	adds	r3, #1
 8005732:	60bb      	str	r3, [r7, #8]
 8005734:	e013      	b.n	800575e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	2200      	movs	r2, #0
 800573e:	2180      	movs	r1, #128	; 0x80
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f000 fa3e 	bl	8005bc2 <UART_WaitOnFlagUntilTimeout>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d001      	beq.n	8005750 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e01f      	b.n	8005790 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	1c5a      	adds	r2, r3, #1
 8005754:	60ba      	str	r2, [r7, #8]
 8005756:	781a      	ldrb	r2, [r3, #0]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005762:	b29b      	uxth	r3, r3
 8005764:	2b00      	cmp	r3, #0
 8005766:	d1b7      	bne.n	80056d8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	9300      	str	r3, [sp, #0]
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	2200      	movs	r2, #0
 8005770:	2140      	movs	r1, #64	; 0x40
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f000 fa25 	bl	8005bc2 <UART_WaitOnFlagUntilTimeout>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e006      	b.n	8005790 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2220      	movs	r2, #32
 8005786:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800578a:	2300      	movs	r3, #0
 800578c:	e000      	b.n	8005790 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800578e:	2302      	movs	r3, #2
  }
}
 8005790:	4618      	mov	r0, r3
 8005792:	3718      	adds	r7, #24
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	4613      	mov	r3, r2
 80057a4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b20      	cmp	r3, #32
 80057b0:	d153      	bne.n	800585a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d002      	beq.n	80057be <HAL_UART_Transmit_DMA+0x26>
 80057b8:	88fb      	ldrh	r3, [r7, #6]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d101      	bne.n	80057c2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e04c      	b.n	800585c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d101      	bne.n	80057d0 <HAL_UART_Transmit_DMA+0x38>
 80057cc:	2302      	movs	r3, #2
 80057ce:	e045      	b.n	800585c <HAL_UART_Transmit_DMA+0xc4>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80057d8:	68ba      	ldr	r2, [r7, #8]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	88fa      	ldrh	r2, [r7, #6]
 80057e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	88fa      	ldrh	r2, [r7, #6]
 80057e8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2221      	movs	r2, #33	; 0x21
 80057f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fc:	4a19      	ldr	r2, [pc, #100]	; (8005864 <HAL_UART_Transmit_DMA+0xcc>)
 80057fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005804:	4a18      	ldr	r2, [pc, #96]	; (8005868 <HAL_UART_Transmit_DMA+0xd0>)
 8005806:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580c:	4a17      	ldr	r2, [pc, #92]	; (800586c <HAL_UART_Transmit_DMA+0xd4>)
 800580e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005814:	2200      	movs	r2, #0
 8005816:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8005818:	f107 0308 	add.w	r3, r7, #8
 800581c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	6819      	ldr	r1, [r3, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	3304      	adds	r3, #4
 800582c:	461a      	mov	r2, r3
 800582e:	88fb      	ldrh	r3, [r7, #6]
 8005830:	f7fd fdc8 	bl	80033c4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800583c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	695a      	ldr	r2, [r3, #20]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005854:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005856:	2300      	movs	r3, #0
 8005858:	e000      	b.n	800585c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800585a:	2302      	movs	r3, #2
  }
}
 800585c:	4618      	mov	r0, r3
 800585e:	3718      	adds	r7, #24
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	08005ac1 	.word	0x08005ac1
 8005868:	08005b13 	.word	0x08005b13
 800586c:	08005b2f 	.word	0x08005b2f

08005870 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b088      	sub	sp, #32
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005890:	2300      	movs	r3, #0
 8005892:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005894:	2300      	movs	r3, #0
 8005896:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	f003 030f 	and.w	r3, r3, #15
 800589e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10d      	bne.n	80058c2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	f003 0320 	and.w	r3, r3, #32
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d008      	beq.n	80058c2 <HAL_UART_IRQHandler+0x52>
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	f003 0320 	and.w	r3, r3, #32
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d003      	beq.n	80058c2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 fa81 	bl	8005dc2 <UART_Receive_IT>
      return;
 80058c0:	e0d1      	b.n	8005a66 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f000 80b0 	beq.w	8005a2a <HAL_UART_IRQHandler+0x1ba>
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	f003 0301 	and.w	r3, r3, #1
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d105      	bne.n	80058e0 <HAL_UART_IRQHandler+0x70>
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f000 80a5 	beq.w	8005a2a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00a      	beq.n	8005900 <HAL_UART_IRQHandler+0x90>
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d005      	beq.n	8005900 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f8:	f043 0201 	orr.w	r2, r3, #1
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	f003 0304 	and.w	r3, r3, #4
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00a      	beq.n	8005920 <HAL_UART_IRQHandler+0xb0>
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	f003 0301 	and.w	r3, r3, #1
 8005910:	2b00      	cmp	r3, #0
 8005912:	d005      	beq.n	8005920 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005918:	f043 0202 	orr.w	r2, r3, #2
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	f003 0302 	and.w	r3, r3, #2
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00a      	beq.n	8005940 <HAL_UART_IRQHandler+0xd0>
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	f003 0301 	and.w	r3, r3, #1
 8005930:	2b00      	cmp	r3, #0
 8005932:	d005      	beq.n	8005940 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005938:	f043 0204 	orr.w	r2, r3, #4
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	f003 0308 	and.w	r3, r3, #8
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00f      	beq.n	800596a <HAL_UART_IRQHandler+0xfa>
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	f003 0320 	and.w	r3, r3, #32
 8005950:	2b00      	cmp	r3, #0
 8005952:	d104      	bne.n	800595e <HAL_UART_IRQHandler+0xee>
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	2b00      	cmp	r3, #0
 800595c:	d005      	beq.n	800596a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005962:	f043 0208 	orr.w	r2, r3, #8
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800596e:	2b00      	cmp	r3, #0
 8005970:	d078      	beq.n	8005a64 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	f003 0320 	and.w	r3, r3, #32
 8005978:	2b00      	cmp	r3, #0
 800597a:	d007      	beq.n	800598c <HAL_UART_IRQHandler+0x11c>
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	f003 0320 	and.w	r3, r3, #32
 8005982:	2b00      	cmp	r3, #0
 8005984:	d002      	beq.n	800598c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 fa1b 	bl	8005dc2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005996:	2b40      	cmp	r3, #64	; 0x40
 8005998:	bf0c      	ite	eq
 800599a:	2301      	moveq	r3, #1
 800599c:	2300      	movne	r3, #0
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059a6:	f003 0308 	and.w	r3, r3, #8
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d102      	bne.n	80059b4 <HAL_UART_IRQHandler+0x144>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d031      	beq.n	8005a18 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 f964 	bl	8005c82 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	695b      	ldr	r3, [r3, #20]
 80059c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c4:	2b40      	cmp	r3, #64	; 0x40
 80059c6:	d123      	bne.n	8005a10 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	695a      	ldr	r2, [r3, #20]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059d6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d013      	beq.n	8005a08 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e4:	4a21      	ldr	r2, [pc, #132]	; (8005a6c <HAL_UART_IRQHandler+0x1fc>)
 80059e6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ec:	4618      	mov	r0, r3
 80059ee:	f7fd fd41 	bl	8003474 <HAL_DMA_Abort_IT>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d016      	beq.n	8005a26 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a02:	4610      	mov	r0, r2
 8005a04:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a06:	e00e      	b.n	8005a26 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 f84f 	bl	8005aac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a0e:	e00a      	b.n	8005a26 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f84b 	bl	8005aac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a16:	e006      	b.n	8005a26 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 f847 	bl	8005aac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005a24:	e01e      	b.n	8005a64 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a26:	bf00      	nop
    return;
 8005a28:	e01c      	b.n	8005a64 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d008      	beq.n	8005a46 <HAL_UART_IRQHandler+0x1d6>
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d003      	beq.n	8005a46 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f951 	bl	8005ce6 <UART_Transmit_IT>
    return;
 8005a44:	e00f      	b.n	8005a66 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00a      	beq.n	8005a66 <HAL_UART_IRQHandler+0x1f6>
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d005      	beq.n	8005a66 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f999 	bl	8005d92 <UART_EndTransmit_IT>
    return;
 8005a60:	bf00      	nop
 8005a62:	e000      	b.n	8005a66 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005a64:	bf00      	nop
  }
}
 8005a66:	3720      	adds	r7, #32
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	08005cbf 	.word	0x08005cbf

08005a70 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a78:	bf00      	nop
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005a8c:	bf00      	nop
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005aa0:	bf00      	nop
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ab4:	bf00      	nop
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005acc:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d113      	bne.n	8005b04 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	695a      	ldr	r2, [r3, #20]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005af0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68da      	ldr	r2, [r3, #12]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b00:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b02:	e002      	b.n	8005b0a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f7ff ffb3 	bl	8005a70 <HAL_UART_TxCpltCallback>
}
 8005b0a:	bf00      	nop
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b084      	sub	sp, #16
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f7ff ffaf 	bl	8005a84 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b26:	bf00      	nop
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b084      	sub	sp, #16
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005b36:	2300      	movs	r3, #0
 8005b38:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b4a:	2b80      	cmp	r3, #128	; 0x80
 8005b4c:	bf0c      	ite	eq
 8005b4e:	2301      	moveq	r3, #1
 8005b50:	2300      	movne	r3, #0
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2b21      	cmp	r3, #33	; 0x21
 8005b60:	d108      	bne.n	8005b74 <UART_DMAError+0x46>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d005      	beq.n	8005b74 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005b6e:	68b8      	ldr	r0, [r7, #8]
 8005b70:	f000 f871 	bl	8005c56 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b7e:	2b40      	cmp	r3, #64	; 0x40
 8005b80:	bf0c      	ite	eq
 8005b82:	2301      	moveq	r3, #1
 8005b84:	2300      	movne	r3, #0
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b22      	cmp	r3, #34	; 0x22
 8005b94:	d108      	bne.n	8005ba8 <UART_DMAError+0x7a>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d005      	beq.n	8005ba8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005ba2:	68b8      	ldr	r0, [r7, #8]
 8005ba4:	f000 f86d 	bl	8005c82 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bac:	f043 0210 	orr.w	r2, r3, #16
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bb4:	68b8      	ldr	r0, [r7, #8]
 8005bb6:	f7ff ff79 	bl	8005aac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bba:	bf00      	nop
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b084      	sub	sp, #16
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	60f8      	str	r0, [r7, #12]
 8005bca:	60b9      	str	r1, [r7, #8]
 8005bcc:	603b      	str	r3, [r7, #0]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bd2:	e02c      	b.n	8005c2e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bda:	d028      	beq.n	8005c2e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d007      	beq.n	8005bf2 <UART_WaitOnFlagUntilTimeout+0x30>
 8005be2:	f7fc fc81 	bl	80024e8 <HAL_GetTick>
 8005be6:	4602      	mov	r2, r0
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	69ba      	ldr	r2, [r7, #24]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d21d      	bcs.n	8005c2e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68da      	ldr	r2, [r3, #12]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c00:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	695a      	ldr	r2, [r3, #20]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f022 0201 	bic.w	r2, r2, #1
 8005c10:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2220      	movs	r2, #32
 8005c16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e00f      	b.n	8005c4e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	4013      	ands	r3, r2
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	bf0c      	ite	eq
 8005c3e:	2301      	moveq	r3, #1
 8005c40:	2300      	movne	r3, #0
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	461a      	mov	r2, r3
 8005c46:	79fb      	ldrb	r3, [r7, #7]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d0c3      	beq.n	8005bd4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005c56:	b480      	push	{r7}
 8005c58:	b083      	sub	sp, #12
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68da      	ldr	r2, [r3, #12]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005c6c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2220      	movs	r2, #32
 8005c72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8005c76:	bf00      	nop
 8005c78:	370c      	adds	r7, #12
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr

08005c82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c82:	b480      	push	{r7}
 8005c84:	b083      	sub	sp, #12
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68da      	ldr	r2, [r3, #12]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005c98:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	695a      	ldr	r2, [r3, #20]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 0201 	bic.w	r2, r2, #1
 8005ca8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2220      	movs	r2, #32
 8005cae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005cb2:	bf00      	nop
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr

08005cbe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b084      	sub	sp, #16
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f7ff fee7 	bl	8005aac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cde:	bf00      	nop
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	b085      	sub	sp, #20
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b21      	cmp	r3, #33	; 0x21
 8005cf8:	d144      	bne.n	8005d84 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d02:	d11a      	bne.n	8005d3a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a1b      	ldr	r3, [r3, #32]
 8005d08:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	881b      	ldrh	r3, [r3, #0]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d18:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d105      	bne.n	8005d2e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	1c9a      	adds	r2, r3, #2
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	621a      	str	r2, [r3, #32]
 8005d2c:	e00e      	b.n	8005d4c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	1c5a      	adds	r2, r3, #1
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	621a      	str	r2, [r3, #32]
 8005d38:	e008      	b.n	8005d4c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	1c59      	adds	r1, r3, #1
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	6211      	str	r1, [r2, #32]
 8005d44:	781a      	ldrb	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	3b01      	subs	r3, #1
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	4619      	mov	r1, r3
 8005d5a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10f      	bne.n	8005d80 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68da      	ldr	r2, [r3, #12]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d6e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68da      	ldr	r2, [r3, #12]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d7e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005d80:	2300      	movs	r3, #0
 8005d82:	e000      	b.n	8005d86 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005d84:	2302      	movs	r3, #2
  }
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3714      	adds	r7, #20
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr

08005d92 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b082      	sub	sp, #8
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68da      	ldr	r2, [r3, #12]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005da8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2220      	movs	r2, #32
 8005dae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f7ff fe5c 	bl	8005a70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3708      	adds	r7, #8
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b084      	sub	sp, #16
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	2b22      	cmp	r3, #34	; 0x22
 8005dd4:	d171      	bne.n	8005eba <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dde:	d123      	bne.n	8005e28 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de4:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10e      	bne.n	8005e0c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e04:	1c9a      	adds	r2, r3, #2
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	629a      	str	r2, [r3, #40]	; 0x28
 8005e0a:	e029      	b.n	8005e60 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e20:	1c5a      	adds	r2, r3, #1
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	629a      	str	r2, [r3, #40]	; 0x28
 8005e26:	e01b      	b.n	8005e60 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10a      	bne.n	8005e46 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6858      	ldr	r0, [r3, #4]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e3a:	1c59      	adds	r1, r3, #1
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	6291      	str	r1, [r2, #40]	; 0x28
 8005e40:	b2c2      	uxtb	r2, r0
 8005e42:	701a      	strb	r2, [r3, #0]
 8005e44:	e00c      	b.n	8005e60 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	b2da      	uxtb	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e52:	1c58      	adds	r0, r3, #1
 8005e54:	6879      	ldr	r1, [r7, #4]
 8005e56:	6288      	str	r0, [r1, #40]	; 0x28
 8005e58:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e5c:	b2d2      	uxtb	r2, r2
 8005e5e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	3b01      	subs	r3, #1
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d120      	bne.n	8005eb6 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68da      	ldr	r2, [r3, #12]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f022 0220 	bic.w	r2, r2, #32
 8005e82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68da      	ldr	r2, [r3, #12]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	695a      	ldr	r2, [r3, #20]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f022 0201 	bic.w	r2, r2, #1
 8005ea2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2220      	movs	r2, #32
 8005ea8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f7ff fdf3 	bl	8005a98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	e002      	b.n	8005ebc <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	e000      	b.n	8005ebc <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005eba:	2302      	movs	r3, #2
  }
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3710      	adds	r7, #16
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ec8:	b085      	sub	sp, #20
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	68da      	ldr	r2, [r3, #12]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	430a      	orrs	r2, r1
 8005ee2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	689a      	ldr	r2, [r3, #8]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	431a      	orrs	r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	431a      	orrs	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	69db      	ldr	r3, [r3, #28]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005f06:	f023 030c 	bic.w	r3, r3, #12
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	6812      	ldr	r2, [r2, #0]
 8005f0e:	68f9      	ldr	r1, [r7, #12]
 8005f10:	430b      	orrs	r3, r1
 8005f12:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	695b      	ldr	r3, [r3, #20]
 8005f1a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	699a      	ldr	r2, [r3, #24]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	430a      	orrs	r2, r1
 8005f28:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	69db      	ldr	r3, [r3, #28]
 8005f2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f32:	f040 818b 	bne.w	800624c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4ac1      	ldr	r2, [pc, #772]	; (8006240 <UART_SetConfig+0x37c>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d005      	beq.n	8005f4c <UART_SetConfig+0x88>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4abf      	ldr	r2, [pc, #764]	; (8006244 <UART_SetConfig+0x380>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	f040 80bd 	bne.w	80060c6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f4c:	f7fd fffe 	bl	8003f4c <HAL_RCC_GetPCLK2Freq>
 8005f50:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	461d      	mov	r5, r3
 8005f56:	f04f 0600 	mov.w	r6, #0
 8005f5a:	46a8      	mov	r8, r5
 8005f5c:	46b1      	mov	r9, r6
 8005f5e:	eb18 0308 	adds.w	r3, r8, r8
 8005f62:	eb49 0409 	adc.w	r4, r9, r9
 8005f66:	4698      	mov	r8, r3
 8005f68:	46a1      	mov	r9, r4
 8005f6a:	eb18 0805 	adds.w	r8, r8, r5
 8005f6e:	eb49 0906 	adc.w	r9, r9, r6
 8005f72:	f04f 0100 	mov.w	r1, #0
 8005f76:	f04f 0200 	mov.w	r2, #0
 8005f7a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005f7e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005f82:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005f86:	4688      	mov	r8, r1
 8005f88:	4691      	mov	r9, r2
 8005f8a:	eb18 0005 	adds.w	r0, r8, r5
 8005f8e:	eb49 0106 	adc.w	r1, r9, r6
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	461d      	mov	r5, r3
 8005f98:	f04f 0600 	mov.w	r6, #0
 8005f9c:	196b      	adds	r3, r5, r5
 8005f9e:	eb46 0406 	adc.w	r4, r6, r6
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	4623      	mov	r3, r4
 8005fa6:	f7fa fd4b 	bl	8000a40 <__aeabi_uldivmod>
 8005faa:	4603      	mov	r3, r0
 8005fac:	460c      	mov	r4, r1
 8005fae:	461a      	mov	r2, r3
 8005fb0:	4ba5      	ldr	r3, [pc, #660]	; (8006248 <UART_SetConfig+0x384>)
 8005fb2:	fba3 2302 	umull	r2, r3, r3, r2
 8005fb6:	095b      	lsrs	r3, r3, #5
 8005fb8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	461d      	mov	r5, r3
 8005fc0:	f04f 0600 	mov.w	r6, #0
 8005fc4:	46a9      	mov	r9, r5
 8005fc6:	46b2      	mov	sl, r6
 8005fc8:	eb19 0309 	adds.w	r3, r9, r9
 8005fcc:	eb4a 040a 	adc.w	r4, sl, sl
 8005fd0:	4699      	mov	r9, r3
 8005fd2:	46a2      	mov	sl, r4
 8005fd4:	eb19 0905 	adds.w	r9, r9, r5
 8005fd8:	eb4a 0a06 	adc.w	sl, sl, r6
 8005fdc:	f04f 0100 	mov.w	r1, #0
 8005fe0:	f04f 0200 	mov.w	r2, #0
 8005fe4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fe8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005fec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ff0:	4689      	mov	r9, r1
 8005ff2:	4692      	mov	sl, r2
 8005ff4:	eb19 0005 	adds.w	r0, r9, r5
 8005ff8:	eb4a 0106 	adc.w	r1, sl, r6
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	461d      	mov	r5, r3
 8006002:	f04f 0600 	mov.w	r6, #0
 8006006:	196b      	adds	r3, r5, r5
 8006008:	eb46 0406 	adc.w	r4, r6, r6
 800600c:	461a      	mov	r2, r3
 800600e:	4623      	mov	r3, r4
 8006010:	f7fa fd16 	bl	8000a40 <__aeabi_uldivmod>
 8006014:	4603      	mov	r3, r0
 8006016:	460c      	mov	r4, r1
 8006018:	461a      	mov	r2, r3
 800601a:	4b8b      	ldr	r3, [pc, #556]	; (8006248 <UART_SetConfig+0x384>)
 800601c:	fba3 1302 	umull	r1, r3, r3, r2
 8006020:	095b      	lsrs	r3, r3, #5
 8006022:	2164      	movs	r1, #100	; 0x64
 8006024:	fb01 f303 	mul.w	r3, r1, r3
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	00db      	lsls	r3, r3, #3
 800602c:	3332      	adds	r3, #50	; 0x32
 800602e:	4a86      	ldr	r2, [pc, #536]	; (8006248 <UART_SetConfig+0x384>)
 8006030:	fba2 2303 	umull	r2, r3, r2, r3
 8006034:	095b      	lsrs	r3, r3, #5
 8006036:	005b      	lsls	r3, r3, #1
 8006038:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800603c:	4498      	add	r8, r3
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	461d      	mov	r5, r3
 8006042:	f04f 0600 	mov.w	r6, #0
 8006046:	46a9      	mov	r9, r5
 8006048:	46b2      	mov	sl, r6
 800604a:	eb19 0309 	adds.w	r3, r9, r9
 800604e:	eb4a 040a 	adc.w	r4, sl, sl
 8006052:	4699      	mov	r9, r3
 8006054:	46a2      	mov	sl, r4
 8006056:	eb19 0905 	adds.w	r9, r9, r5
 800605a:	eb4a 0a06 	adc.w	sl, sl, r6
 800605e:	f04f 0100 	mov.w	r1, #0
 8006062:	f04f 0200 	mov.w	r2, #0
 8006066:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800606a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800606e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006072:	4689      	mov	r9, r1
 8006074:	4692      	mov	sl, r2
 8006076:	eb19 0005 	adds.w	r0, r9, r5
 800607a:	eb4a 0106 	adc.w	r1, sl, r6
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	461d      	mov	r5, r3
 8006084:	f04f 0600 	mov.w	r6, #0
 8006088:	196b      	adds	r3, r5, r5
 800608a:	eb46 0406 	adc.w	r4, r6, r6
 800608e:	461a      	mov	r2, r3
 8006090:	4623      	mov	r3, r4
 8006092:	f7fa fcd5 	bl	8000a40 <__aeabi_uldivmod>
 8006096:	4603      	mov	r3, r0
 8006098:	460c      	mov	r4, r1
 800609a:	461a      	mov	r2, r3
 800609c:	4b6a      	ldr	r3, [pc, #424]	; (8006248 <UART_SetConfig+0x384>)
 800609e:	fba3 1302 	umull	r1, r3, r3, r2
 80060a2:	095b      	lsrs	r3, r3, #5
 80060a4:	2164      	movs	r1, #100	; 0x64
 80060a6:	fb01 f303 	mul.w	r3, r1, r3
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	00db      	lsls	r3, r3, #3
 80060ae:	3332      	adds	r3, #50	; 0x32
 80060b0:	4a65      	ldr	r2, [pc, #404]	; (8006248 <UART_SetConfig+0x384>)
 80060b2:	fba2 2303 	umull	r2, r3, r2, r3
 80060b6:	095b      	lsrs	r3, r3, #5
 80060b8:	f003 0207 	and.w	r2, r3, #7
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4442      	add	r2, r8
 80060c2:	609a      	str	r2, [r3, #8]
 80060c4:	e26f      	b.n	80065a6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80060c6:	f7fd ff2d 	bl	8003f24 <HAL_RCC_GetPCLK1Freq>
 80060ca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	461d      	mov	r5, r3
 80060d0:	f04f 0600 	mov.w	r6, #0
 80060d4:	46a8      	mov	r8, r5
 80060d6:	46b1      	mov	r9, r6
 80060d8:	eb18 0308 	adds.w	r3, r8, r8
 80060dc:	eb49 0409 	adc.w	r4, r9, r9
 80060e0:	4698      	mov	r8, r3
 80060e2:	46a1      	mov	r9, r4
 80060e4:	eb18 0805 	adds.w	r8, r8, r5
 80060e8:	eb49 0906 	adc.w	r9, r9, r6
 80060ec:	f04f 0100 	mov.w	r1, #0
 80060f0:	f04f 0200 	mov.w	r2, #0
 80060f4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80060f8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80060fc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006100:	4688      	mov	r8, r1
 8006102:	4691      	mov	r9, r2
 8006104:	eb18 0005 	adds.w	r0, r8, r5
 8006108:	eb49 0106 	adc.w	r1, r9, r6
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	461d      	mov	r5, r3
 8006112:	f04f 0600 	mov.w	r6, #0
 8006116:	196b      	adds	r3, r5, r5
 8006118:	eb46 0406 	adc.w	r4, r6, r6
 800611c:	461a      	mov	r2, r3
 800611e:	4623      	mov	r3, r4
 8006120:	f7fa fc8e 	bl	8000a40 <__aeabi_uldivmod>
 8006124:	4603      	mov	r3, r0
 8006126:	460c      	mov	r4, r1
 8006128:	461a      	mov	r2, r3
 800612a:	4b47      	ldr	r3, [pc, #284]	; (8006248 <UART_SetConfig+0x384>)
 800612c:	fba3 2302 	umull	r2, r3, r3, r2
 8006130:	095b      	lsrs	r3, r3, #5
 8006132:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	461d      	mov	r5, r3
 800613a:	f04f 0600 	mov.w	r6, #0
 800613e:	46a9      	mov	r9, r5
 8006140:	46b2      	mov	sl, r6
 8006142:	eb19 0309 	adds.w	r3, r9, r9
 8006146:	eb4a 040a 	adc.w	r4, sl, sl
 800614a:	4699      	mov	r9, r3
 800614c:	46a2      	mov	sl, r4
 800614e:	eb19 0905 	adds.w	r9, r9, r5
 8006152:	eb4a 0a06 	adc.w	sl, sl, r6
 8006156:	f04f 0100 	mov.w	r1, #0
 800615a:	f04f 0200 	mov.w	r2, #0
 800615e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006162:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006166:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800616a:	4689      	mov	r9, r1
 800616c:	4692      	mov	sl, r2
 800616e:	eb19 0005 	adds.w	r0, r9, r5
 8006172:	eb4a 0106 	adc.w	r1, sl, r6
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	461d      	mov	r5, r3
 800617c:	f04f 0600 	mov.w	r6, #0
 8006180:	196b      	adds	r3, r5, r5
 8006182:	eb46 0406 	adc.w	r4, r6, r6
 8006186:	461a      	mov	r2, r3
 8006188:	4623      	mov	r3, r4
 800618a:	f7fa fc59 	bl	8000a40 <__aeabi_uldivmod>
 800618e:	4603      	mov	r3, r0
 8006190:	460c      	mov	r4, r1
 8006192:	461a      	mov	r2, r3
 8006194:	4b2c      	ldr	r3, [pc, #176]	; (8006248 <UART_SetConfig+0x384>)
 8006196:	fba3 1302 	umull	r1, r3, r3, r2
 800619a:	095b      	lsrs	r3, r3, #5
 800619c:	2164      	movs	r1, #100	; 0x64
 800619e:	fb01 f303 	mul.w	r3, r1, r3
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	00db      	lsls	r3, r3, #3
 80061a6:	3332      	adds	r3, #50	; 0x32
 80061a8:	4a27      	ldr	r2, [pc, #156]	; (8006248 <UART_SetConfig+0x384>)
 80061aa:	fba2 2303 	umull	r2, r3, r2, r3
 80061ae:	095b      	lsrs	r3, r3, #5
 80061b0:	005b      	lsls	r3, r3, #1
 80061b2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80061b6:	4498      	add	r8, r3
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	461d      	mov	r5, r3
 80061bc:	f04f 0600 	mov.w	r6, #0
 80061c0:	46a9      	mov	r9, r5
 80061c2:	46b2      	mov	sl, r6
 80061c4:	eb19 0309 	adds.w	r3, r9, r9
 80061c8:	eb4a 040a 	adc.w	r4, sl, sl
 80061cc:	4699      	mov	r9, r3
 80061ce:	46a2      	mov	sl, r4
 80061d0:	eb19 0905 	adds.w	r9, r9, r5
 80061d4:	eb4a 0a06 	adc.w	sl, sl, r6
 80061d8:	f04f 0100 	mov.w	r1, #0
 80061dc:	f04f 0200 	mov.w	r2, #0
 80061e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80061e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80061ec:	4689      	mov	r9, r1
 80061ee:	4692      	mov	sl, r2
 80061f0:	eb19 0005 	adds.w	r0, r9, r5
 80061f4:	eb4a 0106 	adc.w	r1, sl, r6
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	461d      	mov	r5, r3
 80061fe:	f04f 0600 	mov.w	r6, #0
 8006202:	196b      	adds	r3, r5, r5
 8006204:	eb46 0406 	adc.w	r4, r6, r6
 8006208:	461a      	mov	r2, r3
 800620a:	4623      	mov	r3, r4
 800620c:	f7fa fc18 	bl	8000a40 <__aeabi_uldivmod>
 8006210:	4603      	mov	r3, r0
 8006212:	460c      	mov	r4, r1
 8006214:	461a      	mov	r2, r3
 8006216:	4b0c      	ldr	r3, [pc, #48]	; (8006248 <UART_SetConfig+0x384>)
 8006218:	fba3 1302 	umull	r1, r3, r3, r2
 800621c:	095b      	lsrs	r3, r3, #5
 800621e:	2164      	movs	r1, #100	; 0x64
 8006220:	fb01 f303 	mul.w	r3, r1, r3
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	00db      	lsls	r3, r3, #3
 8006228:	3332      	adds	r3, #50	; 0x32
 800622a:	4a07      	ldr	r2, [pc, #28]	; (8006248 <UART_SetConfig+0x384>)
 800622c:	fba2 2303 	umull	r2, r3, r2, r3
 8006230:	095b      	lsrs	r3, r3, #5
 8006232:	f003 0207 	and.w	r2, r3, #7
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4442      	add	r2, r8
 800623c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800623e:	e1b2      	b.n	80065a6 <UART_SetConfig+0x6e2>
 8006240:	40011000 	.word	0x40011000
 8006244:	40011400 	.word	0x40011400
 8006248:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4ad7      	ldr	r2, [pc, #860]	; (80065b0 <UART_SetConfig+0x6ec>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d005      	beq.n	8006262 <UART_SetConfig+0x39e>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4ad6      	ldr	r2, [pc, #856]	; (80065b4 <UART_SetConfig+0x6f0>)
 800625c:	4293      	cmp	r3, r2
 800625e:	f040 80d1 	bne.w	8006404 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006262:	f7fd fe73 	bl	8003f4c <HAL_RCC_GetPCLK2Freq>
 8006266:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	469a      	mov	sl, r3
 800626c:	f04f 0b00 	mov.w	fp, #0
 8006270:	46d0      	mov	r8, sl
 8006272:	46d9      	mov	r9, fp
 8006274:	eb18 0308 	adds.w	r3, r8, r8
 8006278:	eb49 0409 	adc.w	r4, r9, r9
 800627c:	4698      	mov	r8, r3
 800627e:	46a1      	mov	r9, r4
 8006280:	eb18 080a 	adds.w	r8, r8, sl
 8006284:	eb49 090b 	adc.w	r9, r9, fp
 8006288:	f04f 0100 	mov.w	r1, #0
 800628c:	f04f 0200 	mov.w	r2, #0
 8006290:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006294:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006298:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800629c:	4688      	mov	r8, r1
 800629e:	4691      	mov	r9, r2
 80062a0:	eb1a 0508 	adds.w	r5, sl, r8
 80062a4:	eb4b 0609 	adc.w	r6, fp, r9
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	4619      	mov	r1, r3
 80062ae:	f04f 0200 	mov.w	r2, #0
 80062b2:	f04f 0300 	mov.w	r3, #0
 80062b6:	f04f 0400 	mov.w	r4, #0
 80062ba:	0094      	lsls	r4, r2, #2
 80062bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80062c0:	008b      	lsls	r3, r1, #2
 80062c2:	461a      	mov	r2, r3
 80062c4:	4623      	mov	r3, r4
 80062c6:	4628      	mov	r0, r5
 80062c8:	4631      	mov	r1, r6
 80062ca:	f7fa fbb9 	bl	8000a40 <__aeabi_uldivmod>
 80062ce:	4603      	mov	r3, r0
 80062d0:	460c      	mov	r4, r1
 80062d2:	461a      	mov	r2, r3
 80062d4:	4bb8      	ldr	r3, [pc, #736]	; (80065b8 <UART_SetConfig+0x6f4>)
 80062d6:	fba3 2302 	umull	r2, r3, r3, r2
 80062da:	095b      	lsrs	r3, r3, #5
 80062dc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	469b      	mov	fp, r3
 80062e4:	f04f 0c00 	mov.w	ip, #0
 80062e8:	46d9      	mov	r9, fp
 80062ea:	46e2      	mov	sl, ip
 80062ec:	eb19 0309 	adds.w	r3, r9, r9
 80062f0:	eb4a 040a 	adc.w	r4, sl, sl
 80062f4:	4699      	mov	r9, r3
 80062f6:	46a2      	mov	sl, r4
 80062f8:	eb19 090b 	adds.w	r9, r9, fp
 80062fc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006300:	f04f 0100 	mov.w	r1, #0
 8006304:	f04f 0200 	mov.w	r2, #0
 8006308:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800630c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006310:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006314:	4689      	mov	r9, r1
 8006316:	4692      	mov	sl, r2
 8006318:	eb1b 0509 	adds.w	r5, fp, r9
 800631c:	eb4c 060a 	adc.w	r6, ip, sl
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	4619      	mov	r1, r3
 8006326:	f04f 0200 	mov.w	r2, #0
 800632a:	f04f 0300 	mov.w	r3, #0
 800632e:	f04f 0400 	mov.w	r4, #0
 8006332:	0094      	lsls	r4, r2, #2
 8006334:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006338:	008b      	lsls	r3, r1, #2
 800633a:	461a      	mov	r2, r3
 800633c:	4623      	mov	r3, r4
 800633e:	4628      	mov	r0, r5
 8006340:	4631      	mov	r1, r6
 8006342:	f7fa fb7d 	bl	8000a40 <__aeabi_uldivmod>
 8006346:	4603      	mov	r3, r0
 8006348:	460c      	mov	r4, r1
 800634a:	461a      	mov	r2, r3
 800634c:	4b9a      	ldr	r3, [pc, #616]	; (80065b8 <UART_SetConfig+0x6f4>)
 800634e:	fba3 1302 	umull	r1, r3, r3, r2
 8006352:	095b      	lsrs	r3, r3, #5
 8006354:	2164      	movs	r1, #100	; 0x64
 8006356:	fb01 f303 	mul.w	r3, r1, r3
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	011b      	lsls	r3, r3, #4
 800635e:	3332      	adds	r3, #50	; 0x32
 8006360:	4a95      	ldr	r2, [pc, #596]	; (80065b8 <UART_SetConfig+0x6f4>)
 8006362:	fba2 2303 	umull	r2, r3, r2, r3
 8006366:	095b      	lsrs	r3, r3, #5
 8006368:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800636c:	4498      	add	r8, r3
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	469b      	mov	fp, r3
 8006372:	f04f 0c00 	mov.w	ip, #0
 8006376:	46d9      	mov	r9, fp
 8006378:	46e2      	mov	sl, ip
 800637a:	eb19 0309 	adds.w	r3, r9, r9
 800637e:	eb4a 040a 	adc.w	r4, sl, sl
 8006382:	4699      	mov	r9, r3
 8006384:	46a2      	mov	sl, r4
 8006386:	eb19 090b 	adds.w	r9, r9, fp
 800638a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800638e:	f04f 0100 	mov.w	r1, #0
 8006392:	f04f 0200 	mov.w	r2, #0
 8006396:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800639a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800639e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80063a2:	4689      	mov	r9, r1
 80063a4:	4692      	mov	sl, r2
 80063a6:	eb1b 0509 	adds.w	r5, fp, r9
 80063aa:	eb4c 060a 	adc.w	r6, ip, sl
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	4619      	mov	r1, r3
 80063b4:	f04f 0200 	mov.w	r2, #0
 80063b8:	f04f 0300 	mov.w	r3, #0
 80063bc:	f04f 0400 	mov.w	r4, #0
 80063c0:	0094      	lsls	r4, r2, #2
 80063c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80063c6:	008b      	lsls	r3, r1, #2
 80063c8:	461a      	mov	r2, r3
 80063ca:	4623      	mov	r3, r4
 80063cc:	4628      	mov	r0, r5
 80063ce:	4631      	mov	r1, r6
 80063d0:	f7fa fb36 	bl	8000a40 <__aeabi_uldivmod>
 80063d4:	4603      	mov	r3, r0
 80063d6:	460c      	mov	r4, r1
 80063d8:	461a      	mov	r2, r3
 80063da:	4b77      	ldr	r3, [pc, #476]	; (80065b8 <UART_SetConfig+0x6f4>)
 80063dc:	fba3 1302 	umull	r1, r3, r3, r2
 80063e0:	095b      	lsrs	r3, r3, #5
 80063e2:	2164      	movs	r1, #100	; 0x64
 80063e4:	fb01 f303 	mul.w	r3, r1, r3
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	011b      	lsls	r3, r3, #4
 80063ec:	3332      	adds	r3, #50	; 0x32
 80063ee:	4a72      	ldr	r2, [pc, #456]	; (80065b8 <UART_SetConfig+0x6f4>)
 80063f0:	fba2 2303 	umull	r2, r3, r2, r3
 80063f4:	095b      	lsrs	r3, r3, #5
 80063f6:	f003 020f 	and.w	r2, r3, #15
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4442      	add	r2, r8
 8006400:	609a      	str	r2, [r3, #8]
 8006402:	e0d0      	b.n	80065a6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006404:	f7fd fd8e 	bl	8003f24 <HAL_RCC_GetPCLK1Freq>
 8006408:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	469a      	mov	sl, r3
 800640e:	f04f 0b00 	mov.w	fp, #0
 8006412:	46d0      	mov	r8, sl
 8006414:	46d9      	mov	r9, fp
 8006416:	eb18 0308 	adds.w	r3, r8, r8
 800641a:	eb49 0409 	adc.w	r4, r9, r9
 800641e:	4698      	mov	r8, r3
 8006420:	46a1      	mov	r9, r4
 8006422:	eb18 080a 	adds.w	r8, r8, sl
 8006426:	eb49 090b 	adc.w	r9, r9, fp
 800642a:	f04f 0100 	mov.w	r1, #0
 800642e:	f04f 0200 	mov.w	r2, #0
 8006432:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006436:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800643a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800643e:	4688      	mov	r8, r1
 8006440:	4691      	mov	r9, r2
 8006442:	eb1a 0508 	adds.w	r5, sl, r8
 8006446:	eb4b 0609 	adc.w	r6, fp, r9
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	4619      	mov	r1, r3
 8006450:	f04f 0200 	mov.w	r2, #0
 8006454:	f04f 0300 	mov.w	r3, #0
 8006458:	f04f 0400 	mov.w	r4, #0
 800645c:	0094      	lsls	r4, r2, #2
 800645e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006462:	008b      	lsls	r3, r1, #2
 8006464:	461a      	mov	r2, r3
 8006466:	4623      	mov	r3, r4
 8006468:	4628      	mov	r0, r5
 800646a:	4631      	mov	r1, r6
 800646c:	f7fa fae8 	bl	8000a40 <__aeabi_uldivmod>
 8006470:	4603      	mov	r3, r0
 8006472:	460c      	mov	r4, r1
 8006474:	461a      	mov	r2, r3
 8006476:	4b50      	ldr	r3, [pc, #320]	; (80065b8 <UART_SetConfig+0x6f4>)
 8006478:	fba3 2302 	umull	r2, r3, r3, r2
 800647c:	095b      	lsrs	r3, r3, #5
 800647e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	469b      	mov	fp, r3
 8006486:	f04f 0c00 	mov.w	ip, #0
 800648a:	46d9      	mov	r9, fp
 800648c:	46e2      	mov	sl, ip
 800648e:	eb19 0309 	adds.w	r3, r9, r9
 8006492:	eb4a 040a 	adc.w	r4, sl, sl
 8006496:	4699      	mov	r9, r3
 8006498:	46a2      	mov	sl, r4
 800649a:	eb19 090b 	adds.w	r9, r9, fp
 800649e:	eb4a 0a0c 	adc.w	sl, sl, ip
 80064a2:	f04f 0100 	mov.w	r1, #0
 80064a6:	f04f 0200 	mov.w	r2, #0
 80064aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80064b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80064b6:	4689      	mov	r9, r1
 80064b8:	4692      	mov	sl, r2
 80064ba:	eb1b 0509 	adds.w	r5, fp, r9
 80064be:	eb4c 060a 	adc.w	r6, ip, sl
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	4619      	mov	r1, r3
 80064c8:	f04f 0200 	mov.w	r2, #0
 80064cc:	f04f 0300 	mov.w	r3, #0
 80064d0:	f04f 0400 	mov.w	r4, #0
 80064d4:	0094      	lsls	r4, r2, #2
 80064d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80064da:	008b      	lsls	r3, r1, #2
 80064dc:	461a      	mov	r2, r3
 80064de:	4623      	mov	r3, r4
 80064e0:	4628      	mov	r0, r5
 80064e2:	4631      	mov	r1, r6
 80064e4:	f7fa faac 	bl	8000a40 <__aeabi_uldivmod>
 80064e8:	4603      	mov	r3, r0
 80064ea:	460c      	mov	r4, r1
 80064ec:	461a      	mov	r2, r3
 80064ee:	4b32      	ldr	r3, [pc, #200]	; (80065b8 <UART_SetConfig+0x6f4>)
 80064f0:	fba3 1302 	umull	r1, r3, r3, r2
 80064f4:	095b      	lsrs	r3, r3, #5
 80064f6:	2164      	movs	r1, #100	; 0x64
 80064f8:	fb01 f303 	mul.w	r3, r1, r3
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	011b      	lsls	r3, r3, #4
 8006500:	3332      	adds	r3, #50	; 0x32
 8006502:	4a2d      	ldr	r2, [pc, #180]	; (80065b8 <UART_SetConfig+0x6f4>)
 8006504:	fba2 2303 	umull	r2, r3, r2, r3
 8006508:	095b      	lsrs	r3, r3, #5
 800650a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800650e:	4498      	add	r8, r3
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	469b      	mov	fp, r3
 8006514:	f04f 0c00 	mov.w	ip, #0
 8006518:	46d9      	mov	r9, fp
 800651a:	46e2      	mov	sl, ip
 800651c:	eb19 0309 	adds.w	r3, r9, r9
 8006520:	eb4a 040a 	adc.w	r4, sl, sl
 8006524:	4699      	mov	r9, r3
 8006526:	46a2      	mov	sl, r4
 8006528:	eb19 090b 	adds.w	r9, r9, fp
 800652c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006530:	f04f 0100 	mov.w	r1, #0
 8006534:	f04f 0200 	mov.w	r2, #0
 8006538:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800653c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006540:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006544:	4689      	mov	r9, r1
 8006546:	4692      	mov	sl, r2
 8006548:	eb1b 0509 	adds.w	r5, fp, r9
 800654c:	eb4c 060a 	adc.w	r6, ip, sl
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	4619      	mov	r1, r3
 8006556:	f04f 0200 	mov.w	r2, #0
 800655a:	f04f 0300 	mov.w	r3, #0
 800655e:	f04f 0400 	mov.w	r4, #0
 8006562:	0094      	lsls	r4, r2, #2
 8006564:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006568:	008b      	lsls	r3, r1, #2
 800656a:	461a      	mov	r2, r3
 800656c:	4623      	mov	r3, r4
 800656e:	4628      	mov	r0, r5
 8006570:	4631      	mov	r1, r6
 8006572:	f7fa fa65 	bl	8000a40 <__aeabi_uldivmod>
 8006576:	4603      	mov	r3, r0
 8006578:	460c      	mov	r4, r1
 800657a:	461a      	mov	r2, r3
 800657c:	4b0e      	ldr	r3, [pc, #56]	; (80065b8 <UART_SetConfig+0x6f4>)
 800657e:	fba3 1302 	umull	r1, r3, r3, r2
 8006582:	095b      	lsrs	r3, r3, #5
 8006584:	2164      	movs	r1, #100	; 0x64
 8006586:	fb01 f303 	mul.w	r3, r1, r3
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	011b      	lsls	r3, r3, #4
 800658e:	3332      	adds	r3, #50	; 0x32
 8006590:	4a09      	ldr	r2, [pc, #36]	; (80065b8 <UART_SetConfig+0x6f4>)
 8006592:	fba2 2303 	umull	r2, r3, r2, r3
 8006596:	095b      	lsrs	r3, r3, #5
 8006598:	f003 020f 	and.w	r2, r3, #15
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4442      	add	r2, r8
 80065a2:	609a      	str	r2, [r3, #8]
}
 80065a4:	e7ff      	b.n	80065a6 <UART_SetConfig+0x6e2>
 80065a6:	bf00      	nop
 80065a8:	3714      	adds	r7, #20
 80065aa:	46bd      	mov	sp, r7
 80065ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065b0:	40011000 	.word	0x40011000
 80065b4:	40011400 	.word	0x40011400
 80065b8:	51eb851f 	.word	0x51eb851f

080065bc <__libc_init_array>:
 80065bc:	b570      	push	{r4, r5, r6, lr}
 80065be:	4e0d      	ldr	r6, [pc, #52]	; (80065f4 <__libc_init_array+0x38>)
 80065c0:	4c0d      	ldr	r4, [pc, #52]	; (80065f8 <__libc_init_array+0x3c>)
 80065c2:	1ba4      	subs	r4, r4, r6
 80065c4:	10a4      	asrs	r4, r4, #2
 80065c6:	2500      	movs	r5, #0
 80065c8:	42a5      	cmp	r5, r4
 80065ca:	d109      	bne.n	80065e0 <__libc_init_array+0x24>
 80065cc:	4e0b      	ldr	r6, [pc, #44]	; (80065fc <__libc_init_array+0x40>)
 80065ce:	4c0c      	ldr	r4, [pc, #48]	; (8006600 <__libc_init_array+0x44>)
 80065d0:	f000 fd6c 	bl	80070ac <_init>
 80065d4:	1ba4      	subs	r4, r4, r6
 80065d6:	10a4      	asrs	r4, r4, #2
 80065d8:	2500      	movs	r5, #0
 80065da:	42a5      	cmp	r5, r4
 80065dc:	d105      	bne.n	80065ea <__libc_init_array+0x2e>
 80065de:	bd70      	pop	{r4, r5, r6, pc}
 80065e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80065e4:	4798      	blx	r3
 80065e6:	3501      	adds	r5, #1
 80065e8:	e7ee      	b.n	80065c8 <__libc_init_array+0xc>
 80065ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80065ee:	4798      	blx	r3
 80065f0:	3501      	adds	r5, #1
 80065f2:	e7f2      	b.n	80065da <__libc_init_array+0x1e>
 80065f4:	0800751c 	.word	0x0800751c
 80065f8:	0800751c 	.word	0x0800751c
 80065fc:	0800751c 	.word	0x0800751c
 8006600:	08007520 	.word	0x08007520

08006604 <memset>:
 8006604:	4402      	add	r2, r0
 8006606:	4603      	mov	r3, r0
 8006608:	4293      	cmp	r3, r2
 800660a:	d100      	bne.n	800660e <memset+0xa>
 800660c:	4770      	bx	lr
 800660e:	f803 1b01 	strb.w	r1, [r3], #1
 8006612:	e7f9      	b.n	8006608 <memset+0x4>

08006614 <sinf>:
 8006614:	ee10 3a10 	vmov	r3, s0
 8006618:	b507      	push	{r0, r1, r2, lr}
 800661a:	4a1d      	ldr	r2, [pc, #116]	; (8006690 <sinf+0x7c>)
 800661c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006620:	4293      	cmp	r3, r2
 8006622:	dc05      	bgt.n	8006630 <sinf+0x1c>
 8006624:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8006694 <sinf+0x80>
 8006628:	2000      	movs	r0, #0
 800662a:	f000 fc41 	bl	8006eb0 <__kernel_sinf>
 800662e:	e004      	b.n	800663a <sinf+0x26>
 8006630:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006634:	db04      	blt.n	8006640 <sinf+0x2c>
 8006636:	ee30 0a40 	vsub.f32	s0, s0, s0
 800663a:	b003      	add	sp, #12
 800663c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006640:	4668      	mov	r0, sp
 8006642:	f000 f829 	bl	8006698 <__ieee754_rem_pio2f>
 8006646:	f000 0003 	and.w	r0, r0, #3
 800664a:	2801      	cmp	r0, #1
 800664c:	d008      	beq.n	8006660 <sinf+0x4c>
 800664e:	2802      	cmp	r0, #2
 8006650:	d00d      	beq.n	800666e <sinf+0x5a>
 8006652:	b9b0      	cbnz	r0, 8006682 <sinf+0x6e>
 8006654:	2001      	movs	r0, #1
 8006656:	eddd 0a01 	vldr	s1, [sp, #4]
 800665a:	ed9d 0a00 	vldr	s0, [sp]
 800665e:	e7e4      	b.n	800662a <sinf+0x16>
 8006660:	eddd 0a01 	vldr	s1, [sp, #4]
 8006664:	ed9d 0a00 	vldr	s0, [sp]
 8006668:	f000 f942 	bl	80068f0 <__kernel_cosf>
 800666c:	e7e5      	b.n	800663a <sinf+0x26>
 800666e:	2001      	movs	r0, #1
 8006670:	eddd 0a01 	vldr	s1, [sp, #4]
 8006674:	ed9d 0a00 	vldr	s0, [sp]
 8006678:	f000 fc1a 	bl	8006eb0 <__kernel_sinf>
 800667c:	eeb1 0a40 	vneg.f32	s0, s0
 8006680:	e7db      	b.n	800663a <sinf+0x26>
 8006682:	eddd 0a01 	vldr	s1, [sp, #4]
 8006686:	ed9d 0a00 	vldr	s0, [sp]
 800668a:	f000 f931 	bl	80068f0 <__kernel_cosf>
 800668e:	e7f5      	b.n	800667c <sinf+0x68>
 8006690:	3f490fd8 	.word	0x3f490fd8
 8006694:	00000000 	.word	0x00000000

08006698 <__ieee754_rem_pio2f>:
 8006698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800669a:	ee10 6a10 	vmov	r6, s0
 800669e:	4b86      	ldr	r3, [pc, #536]	; (80068b8 <__ieee754_rem_pio2f+0x220>)
 80066a0:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80066a4:	429c      	cmp	r4, r3
 80066a6:	b087      	sub	sp, #28
 80066a8:	4605      	mov	r5, r0
 80066aa:	dc05      	bgt.n	80066b8 <__ieee754_rem_pio2f+0x20>
 80066ac:	2300      	movs	r3, #0
 80066ae:	ed85 0a00 	vstr	s0, [r5]
 80066b2:	6043      	str	r3, [r0, #4]
 80066b4:	2000      	movs	r0, #0
 80066b6:	e020      	b.n	80066fa <__ieee754_rem_pio2f+0x62>
 80066b8:	4b80      	ldr	r3, [pc, #512]	; (80068bc <__ieee754_rem_pio2f+0x224>)
 80066ba:	429c      	cmp	r4, r3
 80066bc:	dc38      	bgt.n	8006730 <__ieee754_rem_pio2f+0x98>
 80066be:	2e00      	cmp	r6, #0
 80066c0:	f024 040f 	bic.w	r4, r4, #15
 80066c4:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80068c0 <__ieee754_rem_pio2f+0x228>
 80066c8:	4b7e      	ldr	r3, [pc, #504]	; (80068c4 <__ieee754_rem_pio2f+0x22c>)
 80066ca:	dd18      	ble.n	80066fe <__ieee754_rem_pio2f+0x66>
 80066cc:	429c      	cmp	r4, r3
 80066ce:	ee70 7a47 	vsub.f32	s15, s0, s14
 80066d2:	bf09      	itett	eq
 80066d4:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 80068c8 <__ieee754_rem_pio2f+0x230>
 80066d8:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 80068cc <__ieee754_rem_pio2f+0x234>
 80066dc:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80066e0:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 80068d0 <__ieee754_rem_pio2f+0x238>
 80066e4:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80066e8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80066ec:	edc0 6a00 	vstr	s13, [r0]
 80066f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80066f4:	edc0 7a01 	vstr	s15, [r0, #4]
 80066f8:	2001      	movs	r0, #1
 80066fa:	b007      	add	sp, #28
 80066fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066fe:	429c      	cmp	r4, r3
 8006700:	ee70 7a07 	vadd.f32	s15, s0, s14
 8006704:	bf09      	itett	eq
 8006706:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 80068c8 <__ieee754_rem_pio2f+0x230>
 800670a:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 80068cc <__ieee754_rem_pio2f+0x234>
 800670e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8006712:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 80068d0 <__ieee754_rem_pio2f+0x238>
 8006716:	ee77 6a87 	vadd.f32	s13, s15, s14
 800671a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800671e:	edc0 6a00 	vstr	s13, [r0]
 8006722:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006726:	edc0 7a01 	vstr	s15, [r0, #4]
 800672a:	f04f 30ff 	mov.w	r0, #4294967295
 800672e:	e7e4      	b.n	80066fa <__ieee754_rem_pio2f+0x62>
 8006730:	4b68      	ldr	r3, [pc, #416]	; (80068d4 <__ieee754_rem_pio2f+0x23c>)
 8006732:	429c      	cmp	r4, r3
 8006734:	dc71      	bgt.n	800681a <__ieee754_rem_pio2f+0x182>
 8006736:	f000 fc03 	bl	8006f40 <fabsf>
 800673a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80068d8 <__ieee754_rem_pio2f+0x240>
 800673e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006742:	eee0 7a07 	vfma.f32	s15, s0, s14
 8006746:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800674a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800674e:	ee17 0a90 	vmov	r0, s15
 8006752:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80068c0 <__ieee754_rem_pio2f+0x228>
 8006756:	eeb1 7a46 	vneg.f32	s14, s12
 800675a:	eea7 0a27 	vfma.f32	s0, s14, s15
 800675e:	281f      	cmp	r0, #31
 8006760:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80068cc <__ieee754_rem_pio2f+0x234>
 8006764:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006768:	ee70 6a67 	vsub.f32	s13, s0, s15
 800676c:	ee16 3a90 	vmov	r3, s13
 8006770:	dc1c      	bgt.n	80067ac <__ieee754_rem_pio2f+0x114>
 8006772:	1e47      	subs	r7, r0, #1
 8006774:	4959      	ldr	r1, [pc, #356]	; (80068dc <__ieee754_rem_pio2f+0x244>)
 8006776:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800677a:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800677e:	428a      	cmp	r2, r1
 8006780:	d014      	beq.n	80067ac <__ieee754_rem_pio2f+0x114>
 8006782:	602b      	str	r3, [r5, #0]
 8006784:	ed95 7a00 	vldr	s14, [r5]
 8006788:	ee30 0a47 	vsub.f32	s0, s0, s14
 800678c:	2e00      	cmp	r6, #0
 800678e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006792:	ed85 0a01 	vstr	s0, [r5, #4]
 8006796:	dab0      	bge.n	80066fa <__ieee754_rem_pio2f+0x62>
 8006798:	eeb1 7a47 	vneg.f32	s14, s14
 800679c:	eeb1 0a40 	vneg.f32	s0, s0
 80067a0:	ed85 7a00 	vstr	s14, [r5]
 80067a4:	ed85 0a01 	vstr	s0, [r5, #4]
 80067a8:	4240      	negs	r0, r0
 80067aa:	e7a6      	b.n	80066fa <__ieee754_rem_pio2f+0x62>
 80067ac:	15e4      	asrs	r4, r4, #23
 80067ae:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80067b2:	1aa2      	subs	r2, r4, r2
 80067b4:	2a08      	cmp	r2, #8
 80067b6:	dde4      	ble.n	8006782 <__ieee754_rem_pio2f+0xea>
 80067b8:	eddf 7a43 	vldr	s15, [pc, #268]	; 80068c8 <__ieee754_rem_pio2f+0x230>
 80067bc:	eef0 6a40 	vmov.f32	s13, s0
 80067c0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80067c4:	ee30 0a66 	vsub.f32	s0, s0, s13
 80067c8:	eea7 0a27 	vfma.f32	s0, s14, s15
 80067cc:	eddf 7a40 	vldr	s15, [pc, #256]	; 80068d0 <__ieee754_rem_pio2f+0x238>
 80067d0:	ee96 0a27 	vfnms.f32	s0, s12, s15
 80067d4:	ee76 5ac0 	vsub.f32	s11, s13, s0
 80067d8:	eef0 7a40 	vmov.f32	s15, s0
 80067dc:	ee15 3a90 	vmov	r3, s11
 80067e0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80067e4:	1aa4      	subs	r4, r4, r2
 80067e6:	2c19      	cmp	r4, #25
 80067e8:	dc04      	bgt.n	80067f4 <__ieee754_rem_pio2f+0x15c>
 80067ea:	edc5 5a00 	vstr	s11, [r5]
 80067ee:	eeb0 0a66 	vmov.f32	s0, s13
 80067f2:	e7c7      	b.n	8006784 <__ieee754_rem_pio2f+0xec>
 80067f4:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80068e0 <__ieee754_rem_pio2f+0x248>
 80067f8:	eeb0 0a66 	vmov.f32	s0, s13
 80067fc:	eea7 0a25 	vfma.f32	s0, s14, s11
 8006800:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8006804:	eee7 7a25 	vfma.f32	s15, s14, s11
 8006808:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80068e4 <__ieee754_rem_pio2f+0x24c>
 800680c:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8006810:	ee30 7a67 	vsub.f32	s14, s0, s15
 8006814:	ed85 7a00 	vstr	s14, [r5]
 8006818:	e7b4      	b.n	8006784 <__ieee754_rem_pio2f+0xec>
 800681a:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800681e:	db06      	blt.n	800682e <__ieee754_rem_pio2f+0x196>
 8006820:	ee70 7a40 	vsub.f32	s15, s0, s0
 8006824:	edc0 7a01 	vstr	s15, [r0, #4]
 8006828:	edc0 7a00 	vstr	s15, [r0]
 800682c:	e742      	b.n	80066b4 <__ieee754_rem_pio2f+0x1c>
 800682e:	15e2      	asrs	r2, r4, #23
 8006830:	3a86      	subs	r2, #134	; 0x86
 8006832:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8006836:	ee07 3a90 	vmov	s15, r3
 800683a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800683e:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80068e8 <__ieee754_rem_pio2f+0x250>
 8006842:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006846:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800684a:	ed8d 7a03 	vstr	s14, [sp, #12]
 800684e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006852:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006856:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800685a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800685e:	ed8d 7a04 	vstr	s14, [sp, #16]
 8006862:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006866:	eef5 7a40 	vcmp.f32	s15, #0.0
 800686a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800686e:	edcd 7a05 	vstr	s15, [sp, #20]
 8006872:	d11e      	bne.n	80068b2 <__ieee754_rem_pio2f+0x21a>
 8006874:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8006878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800687c:	bf0c      	ite	eq
 800687e:	2301      	moveq	r3, #1
 8006880:	2302      	movne	r3, #2
 8006882:	491a      	ldr	r1, [pc, #104]	; (80068ec <__ieee754_rem_pio2f+0x254>)
 8006884:	9101      	str	r1, [sp, #4]
 8006886:	2102      	movs	r1, #2
 8006888:	9100      	str	r1, [sp, #0]
 800688a:	a803      	add	r0, sp, #12
 800688c:	4629      	mov	r1, r5
 800688e:	f000 f88d 	bl	80069ac <__kernel_rem_pio2f>
 8006892:	2e00      	cmp	r6, #0
 8006894:	f6bf af31 	bge.w	80066fa <__ieee754_rem_pio2f+0x62>
 8006898:	edd5 7a00 	vldr	s15, [r5]
 800689c:	eef1 7a67 	vneg.f32	s15, s15
 80068a0:	edc5 7a00 	vstr	s15, [r5]
 80068a4:	edd5 7a01 	vldr	s15, [r5, #4]
 80068a8:	eef1 7a67 	vneg.f32	s15, s15
 80068ac:	edc5 7a01 	vstr	s15, [r5, #4]
 80068b0:	e77a      	b.n	80067a8 <__ieee754_rem_pio2f+0x110>
 80068b2:	2303      	movs	r3, #3
 80068b4:	e7e5      	b.n	8006882 <__ieee754_rem_pio2f+0x1ea>
 80068b6:	bf00      	nop
 80068b8:	3f490fd8 	.word	0x3f490fd8
 80068bc:	4016cbe3 	.word	0x4016cbe3
 80068c0:	3fc90f80 	.word	0x3fc90f80
 80068c4:	3fc90fd0 	.word	0x3fc90fd0
 80068c8:	37354400 	.word	0x37354400
 80068cc:	37354443 	.word	0x37354443
 80068d0:	2e85a308 	.word	0x2e85a308
 80068d4:	43490f80 	.word	0x43490f80
 80068d8:	3f22f984 	.word	0x3f22f984
 80068dc:	08007144 	.word	0x08007144
 80068e0:	2e85a300 	.word	0x2e85a300
 80068e4:	248d3132 	.word	0x248d3132
 80068e8:	43800000 	.word	0x43800000
 80068ec:	080071c4 	.word	0x080071c4

080068f0 <__kernel_cosf>:
 80068f0:	ee10 3a10 	vmov	r3, s0
 80068f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068f8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80068fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006900:	da05      	bge.n	800690e <__kernel_cosf+0x1e>
 8006902:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006906:	ee17 2a90 	vmov	r2, s15
 800690a:	2a00      	cmp	r2, #0
 800690c:	d03b      	beq.n	8006986 <__kernel_cosf+0x96>
 800690e:	ee20 6a00 	vmul.f32	s12, s0, s0
 8006912:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006916:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800698c <__kernel_cosf+0x9c>
 800691a:	4a1d      	ldr	r2, [pc, #116]	; (8006990 <__kernel_cosf+0xa0>)
 800691c:	ee66 7a07 	vmul.f32	s15, s12, s14
 8006920:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8006994 <__kernel_cosf+0xa4>
 8006924:	eea6 7a25 	vfma.f32	s14, s12, s11
 8006928:	4293      	cmp	r3, r2
 800692a:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8006998 <__kernel_cosf+0xa8>
 800692e:	eee7 5a06 	vfma.f32	s11, s14, s12
 8006932:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800699c <__kernel_cosf+0xac>
 8006936:	eea5 7a86 	vfma.f32	s14, s11, s12
 800693a:	eddf 5a19 	vldr	s11, [pc, #100]	; 80069a0 <__kernel_cosf+0xb0>
 800693e:	eee7 5a06 	vfma.f32	s11, s14, s12
 8006942:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80069a4 <__kernel_cosf+0xb4>
 8006946:	eea5 7a86 	vfma.f32	s14, s11, s12
 800694a:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800694e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8006952:	eee6 0a07 	vfma.f32	s1, s12, s14
 8006956:	dc04      	bgt.n	8006962 <__kernel_cosf+0x72>
 8006958:	ee77 0ae0 	vsub.f32	s1, s15, s1
 800695c:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8006960:	4770      	bx	lr
 8006962:	4a11      	ldr	r2, [pc, #68]	; (80069a8 <__kernel_cosf+0xb8>)
 8006964:	4293      	cmp	r3, r2
 8006966:	bfda      	itte	le
 8006968:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800696c:	ee07 3a10 	vmovle	s14, r3
 8006970:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8006974:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006978:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800697c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8006980:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006984:	4770      	bx	lr
 8006986:	eeb0 0a66 	vmov.f32	s0, s13
 800698a:	4770      	bx	lr
 800698c:	ad47d74e 	.word	0xad47d74e
 8006990:	3e999999 	.word	0x3e999999
 8006994:	310f74f6 	.word	0x310f74f6
 8006998:	b493f27c 	.word	0xb493f27c
 800699c:	37d00d01 	.word	0x37d00d01
 80069a0:	bab60b61 	.word	0xbab60b61
 80069a4:	3d2aaaab 	.word	0x3d2aaaab
 80069a8:	3f480000 	.word	0x3f480000

080069ac <__kernel_rem_pio2f>:
 80069ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069b0:	ed2d 8b04 	vpush	{d8-d9}
 80069b4:	b0d7      	sub	sp, #348	; 0x15c
 80069b6:	469b      	mov	fp, r3
 80069b8:	460e      	mov	r6, r1
 80069ba:	4bbe      	ldr	r3, [pc, #760]	; (8006cb4 <__kernel_rem_pio2f+0x308>)
 80069bc:	9964      	ldr	r1, [sp, #400]	; 0x190
 80069be:	9002      	str	r0, [sp, #8]
 80069c0:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 80069c4:	9865      	ldr	r0, [sp, #404]	; 0x194
 80069c6:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8006cc4 <__kernel_rem_pio2f+0x318>
 80069ca:	1ed1      	subs	r1, r2, #3
 80069cc:	2308      	movs	r3, #8
 80069ce:	fb91 f1f3 	sdiv	r1, r1, r3
 80069d2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80069d6:	f10b 3aff 	add.w	sl, fp, #4294967295
 80069da:	1c4c      	adds	r4, r1, #1
 80069dc:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 80069e0:	eba1 050a 	sub.w	r5, r1, sl
 80069e4:	aa1a      	add	r2, sp, #104	; 0x68
 80069e6:	eb09 070a 	add.w	r7, r9, sl
 80069ea:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 80069ee:	4696      	mov	lr, r2
 80069f0:	2300      	movs	r3, #0
 80069f2:	42bb      	cmp	r3, r7
 80069f4:	dd0f      	ble.n	8006a16 <__kernel_rem_pio2f+0x6a>
 80069f6:	af42      	add	r7, sp, #264	; 0x108
 80069f8:	2200      	movs	r2, #0
 80069fa:	454a      	cmp	r2, r9
 80069fc:	dc27      	bgt.n	8006a4e <__kernel_rem_pio2f+0xa2>
 80069fe:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8006a02:	eb0b 0302 	add.w	r3, fp, r2
 8006a06:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8006a0a:	9d02      	ldr	r5, [sp, #8]
 8006a0c:	eddf 7aad 	vldr	s15, [pc, #692]	; 8006cc4 <__kernel_rem_pio2f+0x318>
 8006a10:	f04f 0c00 	mov.w	ip, #0
 8006a14:	e015      	b.n	8006a42 <__kernel_rem_pio2f+0x96>
 8006a16:	42dd      	cmn	r5, r3
 8006a18:	bf5d      	ittte	pl
 8006a1a:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 8006a1e:	ee07 2a90 	vmovpl	s15, r2
 8006a22:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8006a26:	eef0 7a47 	vmovmi.f32	s15, s14
 8006a2a:	ecee 7a01 	vstmia	lr!, {s15}
 8006a2e:	3301      	adds	r3, #1
 8006a30:	e7df      	b.n	80069f2 <__kernel_rem_pio2f+0x46>
 8006a32:	ecf5 6a01 	vldmia	r5!, {s13}
 8006a36:	ed33 7a01 	vldmdb	r3!, {s14}
 8006a3a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006a3e:	f10c 0c01 	add.w	ip, ip, #1
 8006a42:	45d4      	cmp	ip, sl
 8006a44:	ddf5      	ble.n	8006a32 <__kernel_rem_pio2f+0x86>
 8006a46:	ece7 7a01 	vstmia	r7!, {s15}
 8006a4a:	3201      	adds	r2, #1
 8006a4c:	e7d5      	b.n	80069fa <__kernel_rem_pio2f+0x4e>
 8006a4e:	ab06      	add	r3, sp, #24
 8006a50:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8006a54:	9304      	str	r3, [sp, #16]
 8006a56:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8006cc0 <__kernel_rem_pio2f+0x314>
 8006a5a:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8006cbc <__kernel_rem_pio2f+0x310>
 8006a5e:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8006a62:	9303      	str	r3, [sp, #12]
 8006a64:	464d      	mov	r5, r9
 8006a66:	ab56      	add	r3, sp, #344	; 0x158
 8006a68:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8006a6c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8006a70:	3f01      	subs	r7, #1
 8006a72:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8006a76:	00bf      	lsls	r7, r7, #2
 8006a78:	ab56      	add	r3, sp, #344	; 0x158
 8006a7a:	19da      	adds	r2, r3, r7
 8006a7c:	3a4c      	subs	r2, #76	; 0x4c
 8006a7e:	2300      	movs	r3, #0
 8006a80:	1ae9      	subs	r1, r5, r3
 8006a82:	2900      	cmp	r1, #0
 8006a84:	dc4c      	bgt.n	8006b20 <__kernel_rem_pio2f+0x174>
 8006a86:	4620      	mov	r0, r4
 8006a88:	f000 faa4 	bl	8006fd4 <scalbnf>
 8006a8c:	eeb0 8a40 	vmov.f32	s16, s0
 8006a90:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8006a94:	ee28 0a00 	vmul.f32	s0, s16, s0
 8006a98:	f000 fa5a 	bl	8006f50 <floorf>
 8006a9c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8006aa0:	eea0 8a67 	vfms.f32	s16, s0, s15
 8006aa4:	2c00      	cmp	r4, #0
 8006aa6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8006aaa:	edcd 7a01 	vstr	s15, [sp, #4]
 8006aae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ab2:	ee38 8a67 	vsub.f32	s16, s16, s15
 8006ab6:	dd48      	ble.n	8006b4a <__kernel_rem_pio2f+0x19e>
 8006ab8:	1e69      	subs	r1, r5, #1
 8006aba:	ab06      	add	r3, sp, #24
 8006abc:	f1c4 0008 	rsb	r0, r4, #8
 8006ac0:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8006ac4:	9a01      	ldr	r2, [sp, #4]
 8006ac6:	fa4c f300 	asr.w	r3, ip, r0
 8006aca:	441a      	add	r2, r3
 8006acc:	4083      	lsls	r3, r0
 8006ace:	9201      	str	r2, [sp, #4]
 8006ad0:	ebac 0203 	sub.w	r2, ip, r3
 8006ad4:	ab06      	add	r3, sp, #24
 8006ad6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8006ada:	f1c4 0307 	rsb	r3, r4, #7
 8006ade:	fa42 f803 	asr.w	r8, r2, r3
 8006ae2:	f1b8 0f00 	cmp.w	r8, #0
 8006ae6:	dd41      	ble.n	8006b6c <__kernel_rem_pio2f+0x1c0>
 8006ae8:	9b01      	ldr	r3, [sp, #4]
 8006aea:	2000      	movs	r0, #0
 8006aec:	3301      	adds	r3, #1
 8006aee:	9301      	str	r3, [sp, #4]
 8006af0:	4601      	mov	r1, r0
 8006af2:	4285      	cmp	r5, r0
 8006af4:	dc6d      	bgt.n	8006bd2 <__kernel_rem_pio2f+0x226>
 8006af6:	2c00      	cmp	r4, #0
 8006af8:	dd04      	ble.n	8006b04 <__kernel_rem_pio2f+0x158>
 8006afa:	2c01      	cmp	r4, #1
 8006afc:	d07e      	beq.n	8006bfc <__kernel_rem_pio2f+0x250>
 8006afe:	2c02      	cmp	r4, #2
 8006b00:	f000 8086 	beq.w	8006c10 <__kernel_rem_pio2f+0x264>
 8006b04:	f1b8 0f02 	cmp.w	r8, #2
 8006b08:	d130      	bne.n	8006b6c <__kernel_rem_pio2f+0x1c0>
 8006b0a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006b0e:	ee30 8a48 	vsub.f32	s16, s0, s16
 8006b12:	b359      	cbz	r1, 8006b6c <__kernel_rem_pio2f+0x1c0>
 8006b14:	4620      	mov	r0, r4
 8006b16:	f000 fa5d 	bl	8006fd4 <scalbnf>
 8006b1a:	ee38 8a40 	vsub.f32	s16, s16, s0
 8006b1e:	e025      	b.n	8006b6c <__kernel_rem_pio2f+0x1c0>
 8006b20:	ee60 7a28 	vmul.f32	s15, s0, s17
 8006b24:	a806      	add	r0, sp, #24
 8006b26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b2e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8006b32:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006b36:	ee10 1a10 	vmov	r1, s0
 8006b3a:	ed32 0a01 	vldmdb	r2!, {s0}
 8006b3e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8006b42:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006b46:	3301      	adds	r3, #1
 8006b48:	e79a      	b.n	8006a80 <__kernel_rem_pio2f+0xd4>
 8006b4a:	d106      	bne.n	8006b5a <__kernel_rem_pio2f+0x1ae>
 8006b4c:	1e6b      	subs	r3, r5, #1
 8006b4e:	aa06      	add	r2, sp, #24
 8006b50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006b54:	ea4f 2822 	mov.w	r8, r2, asr #8
 8006b58:	e7c3      	b.n	8006ae2 <__kernel_rem_pio2f+0x136>
 8006b5a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006b5e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b66:	da31      	bge.n	8006bcc <__kernel_rem_pio2f+0x220>
 8006b68:	f04f 0800 	mov.w	r8, #0
 8006b6c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8006b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b74:	f040 80a8 	bne.w	8006cc8 <__kernel_rem_pio2f+0x31c>
 8006b78:	1e6b      	subs	r3, r5, #1
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	4548      	cmp	r0, r9
 8006b80:	da4d      	bge.n	8006c1e <__kernel_rem_pio2f+0x272>
 8006b82:	2a00      	cmp	r2, #0
 8006b84:	f000 8087 	beq.w	8006c96 <__kernel_rem_pio2f+0x2ea>
 8006b88:	aa06      	add	r2, sp, #24
 8006b8a:	3c08      	subs	r4, #8
 8006b8c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006b90:	2900      	cmp	r1, #0
 8006b92:	f000 808d 	beq.w	8006cb0 <__kernel_rem_pio2f+0x304>
 8006b96:	4620      	mov	r0, r4
 8006b98:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006b9c:	9302      	str	r3, [sp, #8]
 8006b9e:	f000 fa19 	bl	8006fd4 <scalbnf>
 8006ba2:	9b02      	ldr	r3, [sp, #8]
 8006ba4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8006cc0 <__kernel_rem_pio2f+0x314>
 8006ba8:	0099      	lsls	r1, r3, #2
 8006baa:	aa42      	add	r2, sp, #264	; 0x108
 8006bac:	1850      	adds	r0, r2, r1
 8006bae:	1d05      	adds	r5, r0, #4
 8006bb0:	461c      	mov	r4, r3
 8006bb2:	2c00      	cmp	r4, #0
 8006bb4:	f280 80b8 	bge.w	8006d28 <__kernel_rem_pio2f+0x37c>
 8006bb8:	2500      	movs	r5, #0
 8006bba:	1b5c      	subs	r4, r3, r5
 8006bbc:	2c00      	cmp	r4, #0
 8006bbe:	f2c0 80d8 	blt.w	8006d72 <__kernel_rem_pio2f+0x3c6>
 8006bc2:	4f3d      	ldr	r7, [pc, #244]	; (8006cb8 <__kernel_rem_pio2f+0x30c>)
 8006bc4:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8006cc4 <__kernel_rem_pio2f+0x318>
 8006bc8:	2400      	movs	r4, #0
 8006bca:	e0c6      	b.n	8006d5a <__kernel_rem_pio2f+0x3ae>
 8006bcc:	f04f 0802 	mov.w	r8, #2
 8006bd0:	e78a      	b.n	8006ae8 <__kernel_rem_pio2f+0x13c>
 8006bd2:	ab06      	add	r3, sp, #24
 8006bd4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006bd8:	b949      	cbnz	r1, 8006bee <__kernel_rem_pio2f+0x242>
 8006bda:	b12b      	cbz	r3, 8006be8 <__kernel_rem_pio2f+0x23c>
 8006bdc:	aa06      	add	r2, sp, #24
 8006bde:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8006be2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8006be6:	2301      	movs	r3, #1
 8006be8:	3001      	adds	r0, #1
 8006bea:	4619      	mov	r1, r3
 8006bec:	e781      	b.n	8006af2 <__kernel_rem_pio2f+0x146>
 8006bee:	aa06      	add	r2, sp, #24
 8006bf0:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8006bf4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	e7f5      	b.n	8006be8 <__kernel_rem_pio2f+0x23c>
 8006bfc:	1e68      	subs	r0, r5, #1
 8006bfe:	ab06      	add	r3, sp, #24
 8006c00:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006c04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c08:	aa06      	add	r2, sp, #24
 8006c0a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8006c0e:	e779      	b.n	8006b04 <__kernel_rem_pio2f+0x158>
 8006c10:	1e68      	subs	r0, r5, #1
 8006c12:	ab06      	add	r3, sp, #24
 8006c14:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006c18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c1c:	e7f4      	b.n	8006c08 <__kernel_rem_pio2f+0x25c>
 8006c1e:	a906      	add	r1, sp, #24
 8006c20:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8006c24:	3801      	subs	r0, #1
 8006c26:	430a      	orrs	r2, r1
 8006c28:	e7a9      	b.n	8006b7e <__kernel_rem_pio2f+0x1d2>
 8006c2a:	f10c 0c01 	add.w	ip, ip, #1
 8006c2e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006c32:	2a00      	cmp	r2, #0
 8006c34:	d0f9      	beq.n	8006c2a <__kernel_rem_pio2f+0x27e>
 8006c36:	eb0b 0305 	add.w	r3, fp, r5
 8006c3a:	aa1a      	add	r2, sp, #104	; 0x68
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	1898      	adds	r0, r3, r2
 8006c40:	3004      	adds	r0, #4
 8006c42:	1c69      	adds	r1, r5, #1
 8006c44:	3704      	adds	r7, #4
 8006c46:	2200      	movs	r2, #0
 8006c48:	4465      	add	r5, ip
 8006c4a:	9005      	str	r0, [sp, #20]
 8006c4c:	428d      	cmp	r5, r1
 8006c4e:	f6ff af0a 	blt.w	8006a66 <__kernel_rem_pio2f+0xba>
 8006c52:	a81a      	add	r0, sp, #104	; 0x68
 8006c54:	eb02 0c03 	add.w	ip, r2, r3
 8006c58:	4484      	add	ip, r0
 8006c5a:	9803      	ldr	r0, [sp, #12]
 8006c5c:	f8dd e008 	ldr.w	lr, [sp, #8]
 8006c60:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8006c64:	9001      	str	r0, [sp, #4]
 8006c66:	ee07 0a90 	vmov	s15, r0
 8006c6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c6e:	9805      	ldr	r0, [sp, #20]
 8006c70:	edcc 7a00 	vstr	s15, [ip]
 8006c74:	eddf 7a13 	vldr	s15, [pc, #76]	; 8006cc4 <__kernel_rem_pio2f+0x318>
 8006c78:	eb00 0802 	add.w	r8, r0, r2
 8006c7c:	f04f 0c00 	mov.w	ip, #0
 8006c80:	45d4      	cmp	ip, sl
 8006c82:	dd0c      	ble.n	8006c9e <__kernel_rem_pio2f+0x2f2>
 8006c84:	eb02 0c07 	add.w	ip, r2, r7
 8006c88:	a842      	add	r0, sp, #264	; 0x108
 8006c8a:	4484      	add	ip, r0
 8006c8c:	edcc 7a01 	vstr	s15, [ip, #4]
 8006c90:	3101      	adds	r1, #1
 8006c92:	3204      	adds	r2, #4
 8006c94:	e7da      	b.n	8006c4c <__kernel_rem_pio2f+0x2a0>
 8006c96:	9b04      	ldr	r3, [sp, #16]
 8006c98:	f04f 0c01 	mov.w	ip, #1
 8006c9c:	e7c7      	b.n	8006c2e <__kernel_rem_pio2f+0x282>
 8006c9e:	ecfe 6a01 	vldmia	lr!, {s13}
 8006ca2:	ed38 7a01 	vldmdb	r8!, {s14}
 8006ca6:	f10c 0c01 	add.w	ip, ip, #1
 8006caa:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006cae:	e7e7      	b.n	8006c80 <__kernel_rem_pio2f+0x2d4>
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	e769      	b.n	8006b88 <__kernel_rem_pio2f+0x1dc>
 8006cb4:	08007508 	.word	0x08007508
 8006cb8:	080074dc 	.word	0x080074dc
 8006cbc:	43800000 	.word	0x43800000
 8006cc0:	3b800000 	.word	0x3b800000
 8006cc4:	00000000 	.word	0x00000000
 8006cc8:	4260      	negs	r0, r4
 8006cca:	eeb0 0a48 	vmov.f32	s0, s16
 8006cce:	f000 f981 	bl	8006fd4 <scalbnf>
 8006cd2:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8006cbc <__kernel_rem_pio2f+0x310>
 8006cd6:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8006cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cde:	db1a      	blt.n	8006d16 <__kernel_rem_pio2f+0x36a>
 8006ce0:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8006cc0 <__kernel_rem_pio2f+0x314>
 8006ce4:	ee60 7a27 	vmul.f32	s15, s0, s15
 8006ce8:	aa06      	add	r2, sp, #24
 8006cea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006cee:	a906      	add	r1, sp, #24
 8006cf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006cf4:	3408      	adds	r4, #8
 8006cf6:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8006cfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006cfe:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006d02:	ee10 3a10 	vmov	r3, s0
 8006d06:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8006d0a:	1c6b      	adds	r3, r5, #1
 8006d0c:	ee17 2a90 	vmov	r2, s15
 8006d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006d14:	e73f      	b.n	8006b96 <__kernel_rem_pio2f+0x1ea>
 8006d16:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006d1a:	aa06      	add	r2, sp, #24
 8006d1c:	ee10 3a10 	vmov	r3, s0
 8006d20:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8006d24:	462b      	mov	r3, r5
 8006d26:	e736      	b.n	8006b96 <__kernel_rem_pio2f+0x1ea>
 8006d28:	aa06      	add	r2, sp, #24
 8006d2a:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8006d2e:	9202      	str	r2, [sp, #8]
 8006d30:	ee07 2a90 	vmov	s15, r2
 8006d34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d38:	3c01      	subs	r4, #1
 8006d3a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8006d3e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006d42:	ed65 7a01 	vstmdb	r5!, {s15}
 8006d46:	e734      	b.n	8006bb2 <__kernel_rem_pio2f+0x206>
 8006d48:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8006d4c:	ecf7 6a01 	vldmia	r7!, {s13}
 8006d50:	ed9c 7a00 	vldr	s14, [ip]
 8006d54:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006d58:	3401      	adds	r4, #1
 8006d5a:	454c      	cmp	r4, r9
 8006d5c:	dc01      	bgt.n	8006d62 <__kernel_rem_pio2f+0x3b6>
 8006d5e:	42a5      	cmp	r5, r4
 8006d60:	daf2      	bge.n	8006d48 <__kernel_rem_pio2f+0x39c>
 8006d62:	aa56      	add	r2, sp, #344	; 0x158
 8006d64:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8006d68:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8006d6c:	3501      	adds	r5, #1
 8006d6e:	3804      	subs	r0, #4
 8006d70:	e723      	b.n	8006bba <__kernel_rem_pio2f+0x20e>
 8006d72:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8006d74:	2a03      	cmp	r2, #3
 8006d76:	d84d      	bhi.n	8006e14 <__kernel_rem_pio2f+0x468>
 8006d78:	e8df f002 	tbb	[pc, r2]
 8006d7c:	021f1f3e 	.word	0x021f1f3e
 8006d80:	aa56      	add	r2, sp, #344	; 0x158
 8006d82:	4411      	add	r1, r2
 8006d84:	399c      	subs	r1, #156	; 0x9c
 8006d86:	4608      	mov	r0, r1
 8006d88:	461c      	mov	r4, r3
 8006d8a:	2c00      	cmp	r4, #0
 8006d8c:	dc5f      	bgt.n	8006e4e <__kernel_rem_pio2f+0x4a2>
 8006d8e:	4608      	mov	r0, r1
 8006d90:	461c      	mov	r4, r3
 8006d92:	2c01      	cmp	r4, #1
 8006d94:	dc6b      	bgt.n	8006e6e <__kernel_rem_pio2f+0x4c2>
 8006d96:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8006cc4 <__kernel_rem_pio2f+0x318>
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	dc77      	bgt.n	8006e8e <__kernel_rem_pio2f+0x4e2>
 8006d9e:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8006da2:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8006da6:	f1b8 0f00 	cmp.w	r8, #0
 8006daa:	d176      	bne.n	8006e9a <__kernel_rem_pio2f+0x4ee>
 8006dac:	edc6 6a00 	vstr	s13, [r6]
 8006db0:	ed86 7a01 	vstr	s14, [r6, #4]
 8006db4:	edc6 7a02 	vstr	s15, [r6, #8]
 8006db8:	e02c      	b.n	8006e14 <__kernel_rem_pio2f+0x468>
 8006dba:	aa56      	add	r2, sp, #344	; 0x158
 8006dbc:	4411      	add	r1, r2
 8006dbe:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8006cc4 <__kernel_rem_pio2f+0x318>
 8006dc2:	399c      	subs	r1, #156	; 0x9c
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	2800      	cmp	r0, #0
 8006dc8:	da32      	bge.n	8006e30 <__kernel_rem_pio2f+0x484>
 8006dca:	f1b8 0f00 	cmp.w	r8, #0
 8006dce:	d035      	beq.n	8006e3c <__kernel_rem_pio2f+0x490>
 8006dd0:	eef1 7a47 	vneg.f32	s15, s14
 8006dd4:	edc6 7a00 	vstr	s15, [r6]
 8006dd8:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8006ddc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006de0:	a82f      	add	r0, sp, #188	; 0xbc
 8006de2:	2101      	movs	r1, #1
 8006de4:	428b      	cmp	r3, r1
 8006de6:	da2c      	bge.n	8006e42 <__kernel_rem_pio2f+0x496>
 8006de8:	f1b8 0f00 	cmp.w	r8, #0
 8006dec:	d001      	beq.n	8006df2 <__kernel_rem_pio2f+0x446>
 8006dee:	eef1 7a67 	vneg.f32	s15, s15
 8006df2:	edc6 7a01 	vstr	s15, [r6, #4]
 8006df6:	e00d      	b.n	8006e14 <__kernel_rem_pio2f+0x468>
 8006df8:	aa56      	add	r2, sp, #344	; 0x158
 8006dfa:	4411      	add	r1, r2
 8006dfc:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8006cc4 <__kernel_rem_pio2f+0x318>
 8006e00:	399c      	subs	r1, #156	; 0x9c
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	da0e      	bge.n	8006e24 <__kernel_rem_pio2f+0x478>
 8006e06:	f1b8 0f00 	cmp.w	r8, #0
 8006e0a:	d001      	beq.n	8006e10 <__kernel_rem_pio2f+0x464>
 8006e0c:	eef1 7a67 	vneg.f32	s15, s15
 8006e10:	edc6 7a00 	vstr	s15, [r6]
 8006e14:	9b01      	ldr	r3, [sp, #4]
 8006e16:	f003 0007 	and.w	r0, r3, #7
 8006e1a:	b057      	add	sp, #348	; 0x15c
 8006e1c:	ecbd 8b04 	vpop	{d8-d9}
 8006e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e24:	ed31 7a01 	vldmdb	r1!, {s14}
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006e2e:	e7e8      	b.n	8006e02 <__kernel_rem_pio2f+0x456>
 8006e30:	ed71 7a01 	vldmdb	r1!, {s15}
 8006e34:	3801      	subs	r0, #1
 8006e36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006e3a:	e7c4      	b.n	8006dc6 <__kernel_rem_pio2f+0x41a>
 8006e3c:	eef0 7a47 	vmov.f32	s15, s14
 8006e40:	e7c8      	b.n	8006dd4 <__kernel_rem_pio2f+0x428>
 8006e42:	ecb0 7a01 	vldmia	r0!, {s14}
 8006e46:	3101      	adds	r1, #1
 8006e48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006e4c:	e7ca      	b.n	8006de4 <__kernel_rem_pio2f+0x438>
 8006e4e:	ed50 7a02 	vldr	s15, [r0, #-8]
 8006e52:	ed70 6a01 	vldmdb	r0!, {s13}
 8006e56:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006e5a:	3c01      	subs	r4, #1
 8006e5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006e60:	ed00 7a01 	vstr	s14, [r0, #-4]
 8006e64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e68:	edc0 7a00 	vstr	s15, [r0]
 8006e6c:	e78d      	b.n	8006d8a <__kernel_rem_pio2f+0x3de>
 8006e6e:	ed50 7a02 	vldr	s15, [r0, #-8]
 8006e72:	ed70 6a01 	vldmdb	r0!, {s13}
 8006e76:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006e7a:	3c01      	subs	r4, #1
 8006e7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006e80:	ed00 7a01 	vstr	s14, [r0, #-4]
 8006e84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e88:	edc0 7a00 	vstr	s15, [r0]
 8006e8c:	e781      	b.n	8006d92 <__kernel_rem_pio2f+0x3e6>
 8006e8e:	ed31 7a01 	vldmdb	r1!, {s14}
 8006e92:	3b01      	subs	r3, #1
 8006e94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006e98:	e77f      	b.n	8006d9a <__kernel_rem_pio2f+0x3ee>
 8006e9a:	eef1 6a66 	vneg.f32	s13, s13
 8006e9e:	eeb1 7a47 	vneg.f32	s14, s14
 8006ea2:	edc6 6a00 	vstr	s13, [r6]
 8006ea6:	ed86 7a01 	vstr	s14, [r6, #4]
 8006eaa:	eef1 7a67 	vneg.f32	s15, s15
 8006eae:	e781      	b.n	8006db4 <__kernel_rem_pio2f+0x408>

08006eb0 <__kernel_sinf>:
 8006eb0:	ee10 3a10 	vmov	r3, s0
 8006eb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006eb8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8006ebc:	da04      	bge.n	8006ec8 <__kernel_sinf+0x18>
 8006ebe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006ec2:	ee17 3a90 	vmov	r3, s15
 8006ec6:	b35b      	cbz	r3, 8006f20 <__kernel_sinf+0x70>
 8006ec8:	ee20 7a00 	vmul.f32	s14, s0, s0
 8006ecc:	eddf 7a15 	vldr	s15, [pc, #84]	; 8006f24 <__kernel_sinf+0x74>
 8006ed0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8006f28 <__kernel_sinf+0x78>
 8006ed4:	eea7 6a27 	vfma.f32	s12, s14, s15
 8006ed8:	eddf 7a14 	vldr	s15, [pc, #80]	; 8006f2c <__kernel_sinf+0x7c>
 8006edc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8006ee0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8006f30 <__kernel_sinf+0x80>
 8006ee4:	eea7 6a87 	vfma.f32	s12, s15, s14
 8006ee8:	eddf 7a12 	vldr	s15, [pc, #72]	; 8006f34 <__kernel_sinf+0x84>
 8006eec:	ee60 6a07 	vmul.f32	s13, s0, s14
 8006ef0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8006ef4:	b930      	cbnz	r0, 8006f04 <__kernel_sinf+0x54>
 8006ef6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8006f38 <__kernel_sinf+0x88>
 8006efa:	eea7 6a27 	vfma.f32	s12, s14, s15
 8006efe:	eea6 0a26 	vfma.f32	s0, s12, s13
 8006f02:	4770      	bx	lr
 8006f04:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8006f08:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8006f0c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8006f10:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8006f14:	eddf 7a09 	vldr	s15, [pc, #36]	; 8006f3c <__kernel_sinf+0x8c>
 8006f18:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8006f1c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	2f2ec9d3 	.word	0x2f2ec9d3
 8006f28:	b2d72f34 	.word	0xb2d72f34
 8006f2c:	3638ef1b 	.word	0x3638ef1b
 8006f30:	b9500d01 	.word	0xb9500d01
 8006f34:	3c088889 	.word	0x3c088889
 8006f38:	be2aaaab 	.word	0xbe2aaaab
 8006f3c:	3e2aaaab 	.word	0x3e2aaaab

08006f40 <fabsf>:
 8006f40:	ee10 3a10 	vmov	r3, s0
 8006f44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f48:	ee00 3a10 	vmov	s0, r3
 8006f4c:	4770      	bx	lr
	...

08006f50 <floorf>:
 8006f50:	ee10 3a10 	vmov	r3, s0
 8006f54:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006f58:	0dca      	lsrs	r2, r1, #23
 8006f5a:	3a7f      	subs	r2, #127	; 0x7f
 8006f5c:	2a16      	cmp	r2, #22
 8006f5e:	dc2a      	bgt.n	8006fb6 <floorf+0x66>
 8006f60:	2a00      	cmp	r2, #0
 8006f62:	da11      	bge.n	8006f88 <floorf+0x38>
 8006f64:	eddf 7a18 	vldr	s15, [pc, #96]	; 8006fc8 <floorf+0x78>
 8006f68:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006f6c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f74:	dd05      	ble.n	8006f82 <floorf+0x32>
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	da23      	bge.n	8006fc2 <floorf+0x72>
 8006f7a:	4a14      	ldr	r2, [pc, #80]	; (8006fcc <floorf+0x7c>)
 8006f7c:	2900      	cmp	r1, #0
 8006f7e:	bf18      	it	ne
 8006f80:	4613      	movne	r3, r2
 8006f82:	ee00 3a10 	vmov	s0, r3
 8006f86:	4770      	bx	lr
 8006f88:	4911      	ldr	r1, [pc, #68]	; (8006fd0 <floorf+0x80>)
 8006f8a:	4111      	asrs	r1, r2
 8006f8c:	420b      	tst	r3, r1
 8006f8e:	d0fa      	beq.n	8006f86 <floorf+0x36>
 8006f90:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8006fc8 <floorf+0x78>
 8006f94:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006f98:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fa0:	ddef      	ble.n	8006f82 <floorf+0x32>
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	bfbe      	ittt	lt
 8006fa6:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8006faa:	fa40 f202 	asrlt.w	r2, r0, r2
 8006fae:	189b      	addlt	r3, r3, r2
 8006fb0:	ea23 0301 	bic.w	r3, r3, r1
 8006fb4:	e7e5      	b.n	8006f82 <floorf+0x32>
 8006fb6:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8006fba:	d3e4      	bcc.n	8006f86 <floorf+0x36>
 8006fbc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006fc0:	4770      	bx	lr
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	e7dd      	b.n	8006f82 <floorf+0x32>
 8006fc6:	bf00      	nop
 8006fc8:	7149f2ca 	.word	0x7149f2ca
 8006fcc:	bf800000 	.word	0xbf800000
 8006fd0:	007fffff 	.word	0x007fffff

08006fd4 <scalbnf>:
 8006fd4:	b508      	push	{r3, lr}
 8006fd6:	ee10 2a10 	vmov	r2, s0
 8006fda:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8006fde:	ed2d 8b02 	vpush	{d8}
 8006fe2:	eef0 0a40 	vmov.f32	s1, s0
 8006fe6:	d004      	beq.n	8006ff2 <scalbnf+0x1e>
 8006fe8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006fec:	d306      	bcc.n	8006ffc <scalbnf+0x28>
 8006fee:	ee70 0a00 	vadd.f32	s1, s0, s0
 8006ff2:	ecbd 8b02 	vpop	{d8}
 8006ff6:	eeb0 0a60 	vmov.f32	s0, s1
 8006ffa:	bd08      	pop	{r3, pc}
 8006ffc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007000:	d21c      	bcs.n	800703c <scalbnf+0x68>
 8007002:	4b1f      	ldr	r3, [pc, #124]	; (8007080 <scalbnf+0xac>)
 8007004:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007084 <scalbnf+0xb0>
 8007008:	4298      	cmp	r0, r3
 800700a:	ee60 0a27 	vmul.f32	s1, s0, s15
 800700e:	db10      	blt.n	8007032 <scalbnf+0x5e>
 8007010:	ee10 2a90 	vmov	r2, s1
 8007014:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8007018:	3b19      	subs	r3, #25
 800701a:	4403      	add	r3, r0
 800701c:	2bfe      	cmp	r3, #254	; 0xfe
 800701e:	dd0f      	ble.n	8007040 <scalbnf+0x6c>
 8007020:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8007088 <scalbnf+0xb4>
 8007024:	eeb0 0a48 	vmov.f32	s0, s16
 8007028:	f000 f834 	bl	8007094 <copysignf>
 800702c:	ee60 0a08 	vmul.f32	s1, s0, s16
 8007030:	e7df      	b.n	8006ff2 <scalbnf+0x1e>
 8007032:	eddf 7a16 	vldr	s15, [pc, #88]	; 800708c <scalbnf+0xb8>
 8007036:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800703a:	e7da      	b.n	8006ff2 <scalbnf+0x1e>
 800703c:	0ddb      	lsrs	r3, r3, #23
 800703e:	e7ec      	b.n	800701a <scalbnf+0x46>
 8007040:	2b00      	cmp	r3, #0
 8007042:	dd06      	ble.n	8007052 <scalbnf+0x7e>
 8007044:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8007048:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800704c:	ee00 3a90 	vmov	s1, r3
 8007050:	e7cf      	b.n	8006ff2 <scalbnf+0x1e>
 8007052:	f113 0f16 	cmn.w	r3, #22
 8007056:	da06      	bge.n	8007066 <scalbnf+0x92>
 8007058:	f24c 3350 	movw	r3, #50000	; 0xc350
 800705c:	4298      	cmp	r0, r3
 800705e:	dcdf      	bgt.n	8007020 <scalbnf+0x4c>
 8007060:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800708c <scalbnf+0xb8>
 8007064:	e7de      	b.n	8007024 <scalbnf+0x50>
 8007066:	3319      	adds	r3, #25
 8007068:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800706c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8007070:	eddf 7a07 	vldr	s15, [pc, #28]	; 8007090 <scalbnf+0xbc>
 8007074:	ee07 3a10 	vmov	s14, r3
 8007078:	ee67 0a27 	vmul.f32	s1, s14, s15
 800707c:	e7b9      	b.n	8006ff2 <scalbnf+0x1e>
 800707e:	bf00      	nop
 8007080:	ffff3cb0 	.word	0xffff3cb0
 8007084:	4c000000 	.word	0x4c000000
 8007088:	7149f2ca 	.word	0x7149f2ca
 800708c:	0da24260 	.word	0x0da24260
 8007090:	33000000 	.word	0x33000000

08007094 <copysignf>:
 8007094:	ee10 3a10 	vmov	r3, s0
 8007098:	ee10 2a90 	vmov	r2, s1
 800709c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070a0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80070a4:	4313      	orrs	r3, r2
 80070a6:	ee00 3a10 	vmov	s0, r3
 80070aa:	4770      	bx	lr

080070ac <_init>:
 80070ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ae:	bf00      	nop
 80070b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070b2:	bc08      	pop	{r3}
 80070b4:	469e      	mov	lr, r3
 80070b6:	4770      	bx	lr

080070b8 <_fini>:
 80070b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ba:	bf00      	nop
 80070bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070be:	bc08      	pop	{r3}
 80070c0:	469e      	mov	lr, r3
 80070c2:	4770      	bx	lr
